{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"skorecard \u00b6 skorecard is a scikit-learn compatible python package that helps streamline the development of credit risk acceptance models (scorecards). Scorecards are \u2018traditional\u2019 models used by banks in the credit decision process. Internally, scorecards are Logistic Regressions models that make use of features that are binned into different groups. The process of binning is usually done manually by experts, and skorecard provides tools to makes this process easier. skorecard is built on top of scikit-learn as well as other excellent open source projects like optbinning , dash and plotly . Features \u2b50 \u00b6 Automate bucketing of features inside scikit-learn pipelines. Dash webapp to help manually tweak bucketing of features with business knowledge Extension to sklearn.linear_model.LogisticRegression that is also able to report p-values Plots and reports to speed up analysis and writing technical documentation. Quick demo \u00b6 skorecard offers a range of bucketers : import pandas as pd from skorecard.bucketers import EqualWidthBucketer df = pd . DataFrame ({ 'column' : range ( 100 )}) ewb = EqualWidthBucketer ( n_bins = 5 ) ewb . fit_transform ( df ) ewb . bucket_table ( 'column' ) #> bucket label Count Count (%) #> 0 -1 Missing 0.0 0.0 #> 1 0 (-inf, 19.8] 20.0 20.0 #> 2 1 (19.8, 39.6] 20.0 20.0 #> 3 2 (39.6, 59.400000000000006] 20.0 20.0 #> 4 3 (59.400000000000006, 79.2] 20.0 20.0 #> 5 4 (79.2, inf] 20.0 20.0 That also support a dash app to explore and update bucket boundaries: ewb . fit_interactive ( df ) #> Dash app running on http://127.0.0.1:8050/ Installation \u00b6 pip3 install skorecard Documentation \u00b6 See ing-bank.github.io/skorecard/ . Presentations \u00b6 Title Host Date Speaker(s) Skorecard: Making logistic regressions great again ING Data Science Meetup 10 June 2021 Daniel Timbrell, Sandro Bjelogrlic, Tim Vink","title":"Index"},{"location":"#skorecard","text":"skorecard is a scikit-learn compatible python package that helps streamline the development of credit risk acceptance models (scorecards). Scorecards are \u2018traditional\u2019 models used by banks in the credit decision process. Internally, scorecards are Logistic Regressions models that make use of features that are binned into different groups. The process of binning is usually done manually by experts, and skorecard provides tools to makes this process easier. skorecard is built on top of scikit-learn as well as other excellent open source projects like optbinning , dash and plotly .","title":"skorecard"},{"location":"#features","text":"Automate bucketing of features inside scikit-learn pipelines. Dash webapp to help manually tweak bucketing of features with business knowledge Extension to sklearn.linear_model.LogisticRegression that is also able to report p-values Plots and reports to speed up analysis and writing technical documentation.","title":"Features \u2b50"},{"location":"#quick-demo","text":"skorecard offers a range of bucketers : import pandas as pd from skorecard.bucketers import EqualWidthBucketer df = pd . DataFrame ({ 'column' : range ( 100 )}) ewb = EqualWidthBucketer ( n_bins = 5 ) ewb . fit_transform ( df ) ewb . bucket_table ( 'column' ) #> bucket label Count Count (%) #> 0 -1 Missing 0.0 0.0 #> 1 0 (-inf, 19.8] 20.0 20.0 #> 2 1 (19.8, 39.6] 20.0 20.0 #> 3 2 (39.6, 59.400000000000006] 20.0 20.0 #> 4 3 (59.400000000000006, 79.2] 20.0 20.0 #> 5 4 (79.2, inf] 20.0 20.0 That also support a dash app to explore and update bucket boundaries: ewb . fit_interactive ( df ) #> Dash app running on http://127.0.0.1:8050/","title":"Quick demo"},{"location":"#installation","text":"pip3 install skorecard","title":"Installation"},{"location":"#documentation","text":"See ing-bank.github.io/skorecard/ .","title":"Documentation"},{"location":"#presentations","text":"Title Host Date Speaker(s) Skorecard: Making logistic regressions great again ING Data Science Meetup 10 June 2021 Daniel Timbrell, Sandro Bjelogrlic, Tim Vink","title":"Presentations"},{"location":"contributing/","text":"Contributing guidelines \u00b6 Make sure to discuss any changes you would like to make in the issue board, before putting in any work. Setup \u00b6 Development install: pip install -e '.[all]' Unit testing: pytest We use pre-commit hooks to ensure code styling. Install with: pre-commit install Documentation \u00b6 We use mkdocs with mkdocs-material theme. The docs are structured using the divio documentation system . To view the docs locally: pip install mkdocs-material mkdocs serve Releases and versioning \u00b6 We use semver for versioning. When we are ready for a release, the maintainer runs: git tag -a v0.1 -m \"skorecard v0.1\" && git push origin v0.1 When we create a new github release a github action is triggered that: a new version will be deployed to pypi the docs will be re-built and deployed Logo \u00b6 We adapted the 'scores' noun We used this color scheme from coolors.co We edited the logo using https://boxy-svg.com/app Terminology \u00b6 BucketMapping is a custom class that stores all the information needed for bucketing, including the map itself (either boundaries for binning, or a list of lists for categoricals) FeaturesBucketMapping is simply a collection of BucketMapping s, and is used to store all info for bucketing transformations for a dataset.","title":"Contributing"},{"location":"contributing/#contributing-guidelines","text":"Make sure to discuss any changes you would like to make in the issue board, before putting in any work.","title":"Contributing guidelines"},{"location":"contributing/#setup","text":"Development install: pip install -e '.[all]' Unit testing: pytest We use pre-commit hooks to ensure code styling. Install with: pre-commit install","title":"Setup"},{"location":"contributing/#documentation","text":"We use mkdocs with mkdocs-material theme. The docs are structured using the divio documentation system . To view the docs locally: pip install mkdocs-material mkdocs serve","title":"Documentation"},{"location":"contributing/#releases-and-versioning","text":"We use semver for versioning. When we are ready for a release, the maintainer runs: git tag -a v0.1 -m \"skorecard v0.1\" && git push origin v0.1 When we create a new github release a github action is triggered that: a new version will be deployed to pypi the docs will be re-built and deployed","title":"Releases and versioning"},{"location":"contributing/#logo","text":"We adapted the 'scores' noun We used this color scheme from coolors.co We edited the logo using https://boxy-svg.com/app","title":"Logo"},{"location":"contributing/#terminology","text":"BucketMapping is a custom class that stores all the information needed for bucketing, including the map itself (either boundaries for binning, or a list of lists for categoricals) FeaturesBucketMapping is simply a collection of BucketMapping s, and is used to store all info for bucketing transformations for a dataset.","title":"Terminology"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/","text":"The AgglomerativeClusteringBucketer transformer creates buckets using sklearn.AgglomerativeClustering . Support Examples: from skorecard import datasets from skorecard.bucketers import AgglomerativeClusteringBucketer specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20001,30000]\" : [ 20000 , 30000 ]}} X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = AgglomerativeClusteringBucketer ( n_bins = 10 , variables = [ 'LIMIT_BAL' ], specials = specials ) bucketer . fit_transform ( X ) bucketer . fit_transform ( X )[ 'LIMIT_BAL' ] . value_counts () variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , n_bins = 5 , variables = [], specials = {}, missing_treatment = 'separate' , remainder = 'passthrough' , ** kwargs ) special \u00b6 Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (dict) of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' kwargs Other parameters passed to AgglomerativeBucketer {} bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"AgglomerativeClusteringBucketer"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (dict) of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' kwargs Other parameters passed to AgglomerativeBucketer {}","title":"__init__()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/AgglomerativeClusteringBucketer/#skorecard.bucketers.bucketers.AgglomerativeClusteringBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/AsIsCategoricalBucketer/","text":"The AsIsCategoricalBucketer treats unique values as categories. Support: It will assign each a bucket number in the order of appearance. If new data contains new, unknown labels they will be replaced by 'Other'. This is bucketer is useful when you have data that is already sufficiented bucketed, but you would like to be able to bucket new data in the same way. Examples: from skorecard import datasets from skorecard.bucketers import AsIsCategoricalBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = AsIsCategoricalBucketer ( variables = [ 'EDUCATION' ]) bucketer . fit_transform ( X ) variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , variables = [], specials = {}, missing_treatment = 'separate' , remainder = 'passthrough' ) special \u00b6 Init the class. Parameters: Name Type Description Default variables list The features to bucket. Uses all features if not defined. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"AsIsCategoricalBucketer"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default variables list The features to bucket. Uses all features if not defined. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/AsIsCategoricalBucketer/#skorecard.bucketers.bucketers.AsIsCategoricalBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/AsIsNumericalBucketer/","text":"The AsIsNumericalBucketer transformer creates buckets by treating the existing unique values as boundaries. Support: This is bucketer is useful when you have data that is already sufficiented bucketed, but you would like to be able to bucket new data in the same way. Examples: from skorecard import datasets from skorecard.bucketers import AsIsNumericalBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = AsIsNumericalBucketer ( variables = [ 'LIMIT_BAL' ]) bucketer . fit_transform ( X ) variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , right = True , variables = [], specials = {}, missing_treatment = 'separate' , remainder = 'passthrough' ) special \u00b6 Init the class. Parameters: Name Type Description Default right boolean Is the right value included in a range (default) or is 'up to not but including'. For example, if you have [5, 10], the ranges for right=True would be (-Inf, 5], (5, 10], (10, Inf] or [-Inf, 5), [5, 10), [10, Inf) for right=False True variables list The features to bucket. Uses all features if not defined. [] specials dict (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values.. 'separate' remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"AsIsNumericalBucketer"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default right boolean Is the right value included in a range (default) or is 'up to not but including'. For example, if you have [5, 10], the ranges for right=True would be (-Inf, 5], (5, 10], (10, Inf] or [-Inf, 5), [5, 10), [10, Inf) for right=False True variables list The features to bucket. Uses all features if not defined. [] specials dict (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values.. 'separate' remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/AsIsNumericalBucketer/#skorecard.bucketers.bucketers.AsIsNumericalBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/DecisionTreeBucketer/","text":"The DecisionTreeBucketer transformer creates buckets by training a decision tree. Support: It uses sklearn.tree.DecisionTreeClassifier to find the splits. Examples: from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) # make sure that those cases specials = { \"LIMIT_BAL\" :{ \"=50000\" :[ 50000 ], \"in [20001,30000]\" :[ 20000 , 30000 ], } } dt_bucketer = DecisionTreeBucketer ( variables = [ 'LIMIT_BAL' ], specials = specials ) dt_bucketer . fit ( X , y ) dt_bucketer . fit_transform ( X , y )[ 'LIMIT_BAL' ] . value_counts () variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , variables = [], specials = {}, max_n_bins = 100 , missing_treatment = 'separate' , min_bin_size = 0.05 , random_state = 42 , remainder = 'passthrough' , dt_kwargs = {}) special \u00b6 Init the class. Parameters: Name Type Description Default variables list The features to bucket. Uses all features if not defined. [] specials dict dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} min_bin_size int Minimum fraction of observations in a bucket. Passed directly to min_samples_leaf. 0.05 max_n_bins int Maximum numbers of after the bucketing. Passed directly to max_leaf_nodes of the DecisionTreeClassifier. If specials are defined, max_leaf_nodes will be redefined to max_n_bins - (number of special bins). The DecisionTreeClassifier requires max_leaf_nodes>=2: therefore, max_n_bins must always be >= (number of special bins + 2) if specials are defined, otherwise must be >=2. 100 missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' random_state int The random state, Passed directly to DecisionTreeClassifier 42 remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' dt_kwargs Other parameters passed to DecisionTreeClassifier {} bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"DecisionTreeBucketer"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default variables list The features to bucket. Uses all features if not defined. [] specials dict dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} min_bin_size int Minimum fraction of observations in a bucket. Passed directly to min_samples_leaf. 0.05 max_n_bins int Maximum numbers of after the bucketing. Passed directly to max_leaf_nodes of the DecisionTreeClassifier. If specials are defined, max_leaf_nodes will be redefined to max_n_bins - (number of special bins). The DecisionTreeClassifier requires max_leaf_nodes>=2: therefore, max_n_bins must always be >= (number of special bins + 2) if specials are defined, otherwise must be >=2. 100 missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' random_state int The random state, Passed directly to DecisionTreeClassifier 42 remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' dt_kwargs Other parameters passed to DecisionTreeClassifier {}","title":"__init__()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/DecisionTreeBucketer/#skorecard.bucketers.bucketers.DecisionTreeBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/EqualFrequencyBucketer/","text":"The EqualFrequencyBucketer transformer creates buckets with equal number of elements. Support: Examples: from skorecard import datasets from skorecard.bucketers import EqualFrequencyBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = EqualFrequencyBucketer ( n_bins = 10 , variables = [ 'LIMIT_BAL' ]) bucketer . fit_transform ( X ) bucketer . fit_transform ( X )[ 'LIMIT_BAL' ] . value_counts () variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , n_bins = 5 , variables = [], specials = {}, missing_treatment = 'separate' , remainder = 'passthrough' ) special \u00b6 Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values.. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"EqualFrequencyBucketer"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values.. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/EqualFrequencyBucketer/#skorecard.bucketers.bucketers.EqualFrequencyBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/EqualWidthBucketer/","text":"The EqualWidthBucketer transformer creates equally spaced bins using numpy.histogram function. Support: Examples: from skorecard import datasets from skorecard.bucketers import EqualWidthBucketer specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20001,30000]\" : [ 20000 , 30000 ]}} X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = EqualWidthBucketer ( n_bins = 10 , variables = [ 'LIMIT_BAL' ], specials = specials ) bucketer . fit_transform ( X ) bucketer . fit_transform ( X )[ 'LIMIT_BAL' ] . value_counts () variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , n_bins = 5 , variables = [], specials = {}, missing_treatment = 'separate' , remainder = 'passthrough' ) special \u00b6 Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (dict) of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"EqualWidthBucketer"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default n_bins int Number of bins to create. 5 variables list The features to bucket. Uses all features if not defined. [] specials (dict) of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/EqualWidthBucketer/#skorecard.bucketers.bucketers.EqualWidthBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/OptimalBucketer/","text":"The OptimalBucketer transformer uses the optbinning package to find optimal buckets. Support: This bucketer basically wraps optbinning.OptimalBinning to be consistent with skorecard. Requires a feature to be pre-bucketed to max 100 buckets. Optbinning uses a constrained programming solver to merge buckets, taking into account the following constraints 1) monotonicity in bad rate, 2) at least 5% of records per bin. Examples: from skorecard import datasets from skorecard.bucketers import OptimalBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = OptimalBucketer ( variables = [ 'LIMIT_BAL' ]) bucketer . fit_transform ( X , y ) __init__ ( self , variables = [], specials = {}, variables_type = 'numerical' , max_n_bins = 10 , missing_treatment = 'separate' , min_bin_size = 0.05 , cat_cutoff = None , time_limit = 25 , remainder = 'passthrough' , solver = 'cp' , monotonic_trend = 'auto_asc_desc' , gamma = 0 , ob_kwargs = {}) special \u00b6 Initialize Optimal Bucketer. Parameters: Name Type Description Default variables List of variables to bucket. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are passed, they are not considered in the fitting procedure. {} variables_type Passed to optbinning.OptimalBinning : Type of the variables. Must be either 'categorical' or 'numerical'. 'numerical' missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' min_bin_size Passed to optbinning.OptimalBinning : Minimum fraction of observations in a bucket. 0.05 max_n_bins Passed to optbinning.OptimalBinning : Maximum numbers of bins to return. 10 cat_cutoff Passed to optbinning.OptimalBinning : Threshold ratio (None, or >0 and <=1) below which categories are grouped together in a bucket 'other'. None time_limit float Passed to optbinning.OptimalBinning : Time limit in seconds to find an optimal solution. 25 remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' solver str Passed to optbinning.OptimalBinning : The optimizer to solve the optimal binning problem. Supported solvers are \u201cmip\u201d to choose a mixed-integer programming solver, \u201ccp\u201d (default) to choose a constrained programming solver or \u201cls\u201d to choose LocalSolver. 'cp' monotonic_trend str Passed to optbinning.OptimalBinning : The event rate monotonic trend. Supported trends are \u201cauto\u201d, \u201cauto_heuristic\u201d and \u201cauto_asc_desc\u201d to automatically determine the trend maximizing IV using a machine learning classifier, \u201cascending\u201d, \u201cdescending\u201d, \u201cconcave\u201d, \u201cconvex\u201d, \u201cpeak\u201d and \u201cpeak_heuristic\u201d to allow a peak change point, and \u201cvalley\u201d and \u201cvalley_heuristic\u201d to allow a valley change point. Trends \u201cauto_heuristic\u201d, \u201cpeak_heuristic\u201d and \u201cvalley_heuristic\u201d use a heuristic to determine the change point, and are significantly faster for large size instances (max_n_prebins > 20). Trend \u201cauto_asc_desc\u201d is used to automatically select the best monotonic trend between \u201cascending\u201d and \u201cdescending\u201d. If None, then the monotonic constraint is disabled. 'auto_asc_desc' gamma float Passed to optbinning.OptimalBinning : Regularization strength to reduce the number of dominating bins. Larger values specify stronger regularization. Default is 0. Option supported by solvers \u201ccp\u201d and \u201cmip\u201d. 0 ob_kwargs dict Other parameters passed to optbinning.OptimalBinning . {} bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"OptimalBucketer"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.__init__","text":"Initialize Optimal Bucketer. Parameters: Name Type Description Default variables List of variables to bucket. [] specials (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are passed, they are not considered in the fitting procedure. {} variables_type Passed to optbinning.OptimalBinning : Type of the variables. Must be either 'categorical' or 'numerical'. 'numerical' missing_treatment Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' min_bin_size Passed to optbinning.OptimalBinning : Minimum fraction of observations in a bucket. 0.05 max_n_bins Passed to optbinning.OptimalBinning : Maximum numbers of bins to return. 10 cat_cutoff Passed to optbinning.OptimalBinning : Threshold ratio (None, or >0 and <=1) below which categories are grouped together in a bucket 'other'. None time_limit float Passed to optbinning.OptimalBinning : Time limit in seconds to find an optimal solution. 25 remainder How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' solver str Passed to optbinning.OptimalBinning : The optimizer to solve the optimal binning problem. Supported solvers are \u201cmip\u201d to choose a mixed-integer programming solver, \u201ccp\u201d (default) to choose a constrained programming solver or \u201cls\u201d to choose LocalSolver. 'cp' monotonic_trend str Passed to optbinning.OptimalBinning : The event rate monotonic trend. Supported trends are \u201cauto\u201d, \u201cauto_heuristic\u201d and \u201cauto_asc_desc\u201d to automatically determine the trend maximizing IV using a machine learning classifier, \u201cascending\u201d, \u201cdescending\u201d, \u201cconcave\u201d, \u201cconvex\u201d, \u201cpeak\u201d and \u201cpeak_heuristic\u201d to allow a peak change point, and \u201cvalley\u201d and \u201cvalley_heuristic\u201d to allow a valley change point. Trends \u201cauto_heuristic\u201d, \u201cpeak_heuristic\u201d and \u201cvalley_heuristic\u201d use a heuristic to determine the change point, and are significantly faster for large size instances (max_n_prebins > 20). Trend \u201cauto_asc_desc\u201d is used to automatically select the best monotonic trend between \u201cascending\u201d and \u201cdescending\u201d. If None, then the monotonic constraint is disabled. 'auto_asc_desc' gamma float Passed to optbinning.OptimalBinning : Regularization strength to reduce the number of dominating bins. Larger values specify stronger regularization. Default is 0. Option supported by solvers \u201ccp\u201d and \u201cmip\u201d. 0 ob_kwargs dict Other parameters passed to optbinning.OptimalBinning . {}","title":"__init__()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/OptimalBucketer/#skorecard.bucketers.bucketers.OptimalBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/","text":"The OrdinalCategoricalBucketer replaces categories by ordinal numbers. Support When sort_by_target is false the buckets are assigned in order of frequency. When sort_by_target is true the buckets are ordered based on the mean of the target per category. For example, if for a variable colour the means of the target for blue , red and grey is 0.5 , 0.8 and 0.1 respectively, grey will be the first bucket ( 0 ), blue the second ( 1 ) and red the third ( 3 ). If new data contains unknown labels (f.e. yellow), they will be replaced by the 'Other' bucket ( -2 ), and if new data contains missing values, they will be replaced by the 'Missing' bucket ( -1 ). Examples: from skorecard import datasets from skorecard.bucketers import OrdinalCategoricalBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucketer = OrdinalCategoricalBucketer ( variables = [ 'EDUCATION' ]) bucketer . fit_transform ( X , y ) bucketer = OrdinalCategoricalBucketer ( max_n_categories = 2 , variables = [ 'EDUCATION' ]) bucketer . fit_transform ( X , y ) Credits: Code & ideas adapted from: feature_engine.categorical_encoders.OrdinalCategoricalEncoder feature_engine.categorical_encoders.RareLabelCategoricalEncoder variables_type property readonly \u00b6 Signals variables type supported by this bucketer. __init__ ( self , tol = 0.05 , max_n_categories = None , variables = [], specials = {}, encoding_method = 'frequency' , missing_treatment = 'separate' , remainder = 'passthrough' ) special \u00b6 Init the class. Parameters: Name Type Description Default tol float the minimum frequency a label should have to be considered frequent. Categories with frequencies lower than tol will be grouped together (in the 'other' bucket). 0.05 max_n_categories int the maximum number of categories that should be considered frequent. If None, all categories with frequency above the tolerance (tol) will be considered. None variables list The features to bucket. Uses all features if not defined. [] specials dict (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} encoding_method string encoding method. - \"frequency\" (default): orders the buckets based on the frequency of observations in the bucket. The lower the number of the bucket the most frequent are the observations in that bucket. - \"ordered\": orders the buckets based on the average class 1 rate in the bucket. The lower the number of the bucket the lower the fraction of class 1 in that bucket. 'frequency' missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) inherited \u00b6 Fit X, y. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"OrdinalCategoricalBucketer"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.variables_type","text":"Signals variables type supported by this bucketer.","title":"variables_type"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.__init__","text":"Init the class. Parameters: Name Type Description Default tol float the minimum frequency a label should have to be considered frequent. Categories with frequencies lower than tol will be grouped together (in the 'other' bucket). 0.05 max_n_categories int the maximum number of categories that should be considered frequent. If None, all categories with frequency above the tolerance (tol) will be considered. None variables list The features to bucket. Uses all features if not defined. [] specials dict (nested) dictionary of special values that require their own binning. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} encoding_method string encoding method. - \"frequency\" (default): orders the buckets based on the frequency of observations in the bucket. The lower the number of the bucket the most frequent are the observations in that bucket. - \"ordered\": orders the buckets based on the average class 1 rate in the bucket. The lower the number of the bucket the lower the fraction of class 1 in that bucket. 'frequency' missing_treatment str or dict Defines how we treat the missing values present in the data. If a string, it must be one of the following options: separate: Missing values get put in a separate 'Other' bucket: -1 most_risky: Missing values are put into the bucket containing the largest percentage of Class 1. least_risky: Missing values are put into the bucket containing the largest percentage of Class 0. most_frequent: Missing values are put into the most common bucket. neutral: Missing values are put into the bucket with WoE closest to 0. similar: Missing values are put into the bucket with WoE closest to the bucket with only missing values. passthrough: Leaves missing values untouched. If a dict, it must be of the following format: {\" \": } This bucket number is where we will put the missing values. 'separate' remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.fit","text":"Fit X, y.","title":"fit()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/OrdinalCategoricalBucketer/#skorecard.bucketers.bucketers.OrdinalCategoricalBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/bucketers/UserInputBucketer/","text":"The UserInputBucketer transformer creates buckets by implementing user-defined boundaries. Support: This is a special bucketer that is not fitted but rather relies on pre-defined user input. The most common use-case is loading bucket mapping information previously fitted by other bucketers. Examples: from skorecard import datasets from skorecard.bucketers import AgglomerativeClusteringBucketer , UserInputBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) ac_bucketer = AgglomerativeClusteringBucketer ( n_bins = 3 , variables = [ 'LIMIT_BAL' ]) ac_bucketer . fit ( X ) mapping = ac_bucketer . features_bucket_mapping_ ui_bucketer = UserInputBucketer ( mapping ) new_X = ui_bucketer . fit_transform ( X ) assert len ( new_X [ 'LIMIT_BAL' ] . unique ()) == 3 #Map some values to the special buckets specials = { \"LIMIT_BAL\" :{ \"=50000\" :[ 50000 ], \"in [20001,30000]\" :[ 20000 , 30000 ], } } ac_bucketer = AgglomerativeClusteringBucketer ( n_bins = 3 , variables = [ 'LIMIT_BAL' ], specials = specials ) ac_bucketer . fit ( X ) mapping = ac_bucketer . features_bucket_mapping_ ui_bucketer = UserInputBucketer ( mapping ) new_X = ui_bucketer . fit_transform ( X ) assert len ( new_X [ 'LIMIT_BAL' ] . unique ()) == 5 __init__ ( self , features_bucket_mapping = None , variables = [], remainder = 'passthrough' ) special \u00b6 Initialise the user-defined boundaries with a dictionary. Notes: - features_bucket_mapping is stored without the trailing underscore (_) because it is not fitted. Parameters: Name Type Description Default features_bucket_mapping None, Dict, FeaturesBucketMapping, str or Path Contains the feature name and boundaries defined for this feature. If a dict, it will be converted to an internal FeaturesBucketMapping object. If a string or path, which will attempt to load the file as a yaml and convert to FeaturesBucketMapping object. None variables List The features to bucket. Uses all features in features_bucket_mapping if not defined. [] remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) \u00b6 Init the class. fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) inherited \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers predict_proba ( self , X ) inherited \u00b6 Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers save_yml ( self , fout ) inherited \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X , y = None ) inherited \u00b6 Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"UserInputBucketer"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.__init__","text":"Initialise the user-defined boundaries with a dictionary. Notes: - features_bucket_mapping is stored without the trailing underscore (_) because it is not fitted. Parameters: Name Type Description Default features_bucket_mapping None, Dict, FeaturesBucketMapping, str or Path Contains the feature name and boundaries defined for this feature. If a dict, it will be converted to an internal FeaturesBucketMapping object. If a string or path, which will attempt to load the file as a yaml and convert to FeaturesBucketMapping object. None variables List The features to bucket. Uses all features in features_bucket_mapping if not defined. [] remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.fit","text":"Init the class.","title":"fit()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.predict","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description y (np.array) Transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.predict_proba","text":"Applies the transform method. To be used for the grid searches. Parameters: Name Type Description Default X DataFrame The numerical data which will be transformed into the corresponding buckets required Returns: Type Description yhat (np.array) transformed X, such that the values of X are replaced by the corresponding bucket numbers","title":"predict_proba()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike file output required","title":"save_yml()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/bucketers/UserInputBucketer/#skorecard.bucketers.bucketers.UserInputBucketer.transform","text":"Transforms an array into the corresponding buckets fitted by the Transformer. Parameters: Name Type Description Default X DataFrame dataframe which will be transformed into the corresponding buckets required y array target None Returns: Type Description DataFrame df (pd.DataFrame): dataset with transformed features","title":"transform()"},{"location":"api/datasets/load_uci_credit_card/","text":"Datasets \u00b6 Loads the UCI Credit Card Dataset. This dataset contains a sample of Default of Credit Card Clients Dataset . Examples: from skorecard import datasets df = datasets . load_uci_credit_card ( as_frame = True ) Parameters: Name Type Description Default return_X_y bool If True, returns (data, target) instead of a dict object. False as_frame bool give the pandas dataframe instead of X, y matrices (default=False). False (pd.DataFrame, dict or tuple) features and target, with as follows: if as_frame is True: returns pd.DataFrame with y as a target return_X_y is True: returns a tuple: (X,y) is both are false (default setting): returns a dictionary where the key data contains the features, and the key target is the target","title":"Datasets"},{"location":"api/datasets/load_uci_credit_card/#datasets","text":"Loads the UCI Credit Card Dataset. This dataset contains a sample of Default of Credit Card Clients Dataset . Examples: from skorecard import datasets df = datasets . load_uci_credit_card ( as_frame = True ) Parameters: Name Type Description Default return_X_y bool If True, returns (data, target) instead of a dict object. False as_frame bool give the pandas dataframe instead of X, y matrices (default=False). False (pd.DataFrame, dict or tuple) features and target, with as follows: if as_frame is True: returns pd.DataFrame with y as a target return_X_y is True: returns a tuple: (X,y) is both are false (default setting): returns a dictionary where the key data contains the features, and the key target is the target","title":"Datasets"},{"location":"api/linear_model/LogisticRegression/","text":"Extended Logistic Regression. Extends sklearn.linear_model.LogisticRegression . This class provides the following extra statistics, calculated on .fit() and accessible via .get_stats() : cov_matrix_ : covariance matrix for the estimated parameters. std_err_intercept_ : estimated uncertainty for the intercept std_err_coef_ : estimated uncertainty for the coefficients z_intercept_ : estimated z-statistic for the intercept z_coef_ : estimated z-statistic for the coefficients p_value_intercept_ : estimated p-value for the intercept p_value_coef_ : estimated p-value for the coefficients Examples: from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import EqualFrequencyBucketer from skorecard.linear_model import LogisticRegression from sklearn.pipeline import Pipeline from sklearn.preprocessing import OneHotEncoder X , y = load_uci_credit_card ( return_X_y = True ) pipeline = Pipeline ([ ( 'bucketer' , EqualFrequencyBucketer ( n_bins = 10 )), ( 'clf' , LogisticRegression ( calculate_stats = True )) ]) pipeline . fit ( X , y ) assert pipeline . named_steps [ 'clf' ] . p_val_coef_ [ 0 ][ 0 ] > 0 pipeline . named_steps [ 'clf' ] . get_stats () An example output of .get_stats() : Index Coef. Std.Err z Pz const -0.537571 0.096108 -5.593394 2.226735e-08 EDUCATION 0.010091 0.044874 0.224876 8.220757e-01 __init__ ( self , penalty = 'l2' , calculate_stats = False , dual = False , tol = 0.0001 , C = 1.0 , fit_intercept = True , intercept_scaling = 1 , class_weight = None , random_state = None , solver = 'lbfgs' , max_iter = 100 , multi_class = 'auto' , verbose = 0 , warm_start = False , n_jobs = None , l1_ratio = None ) special \u00b6 Extends sklearn.linear_model.LogisticRegression.fit() . Parameters: Name Type Description Default calculate_stats bool If true, calculate statistics like standard error during fit, accessible with .get_stats() False decision_function ( self , X ) inherited \u00b6 Predict confidence scores for samples. The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane. Parameters \u00b6 X : array-like or sparse matrix, shape (n_samples, n_features) Samples. Returns \u00b6 array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes) Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted. densify ( self ) inherited \u00b6 Convert coefficient matrix to dense array format. Converts the coef_ member (back) to a numpy.ndarray. This is the default format of coef_ and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op. Returns \u00b6 self Fitted estimator. fit ( self , X , y , sample_weight = None , calculate_stats = False , ** kwargs ) \u00b6 Fit the model. Overwrites sklearn.linear_model.LogisticRegression.fit() . In addition to the standard fit by sklearn, this function will compute the covariance of the coefficients. Parameters: Name Type Description Default X array-like, sparse matrix Matrix of shape (n_samples, n_features) Training vector, where n_samples is the number of samples and n_features is the number of features. required y array-like of shape (n_samples,) Target vector relative to X. required sample_weight array-like of shape (n_samples,) default=None Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight. None calculate_stats bool If true, calculate statistics like standard error during fit, accessible with .get_stats() False Returns: Type Description self (LogisticRegression) Fitted estimator. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. get_stats ( self ) \u00b6 Puts the summary statistics of the fit() function into a pandas DataFrame. Returns: Type Description DataFrame data (pandas DataFrame): The statistics dataframe, indexed by the column name predict ( self , X ) inherited \u00b6 Predict class labels for samples in X. Parameters \u00b6 X : array-like or sparse matrix, shape (n_samples, n_features) Samples. Returns \u00b6 C : array, shape [n_samples] Predicted class label per sample. predict_log_proba ( self , X ) inherited \u00b6 Predict logarithm of probability estimates. The returned estimates for all classes are ordered by the label of classes. Parameters \u00b6 X : array-like of shape (n_samples, n_features) Vector to be scored, where n_samples is the number of samples and n_features is the number of features. Returns \u00b6 T : array-like of shape (n_samples, n_classes) Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in self.classes_ . predict_proba ( self , X ) inherited \u00b6 Probability estimates. The returned estimates for all classes are ordered by the label of classes. For a multi_class problem, if multi_class is set to be \"multinomial\" the softmax function is used to find the predicted probability of each class. Else use a one-vs-rest approach, i.e calculate the probability of each class assuming it to be positive using the logistic function. and normalize these values across all the classes. Parameters \u00b6 X : array-like of shape (n_samples, n_features) Vector to be scored, where n_samples is the number of samples and n_features is the number of features. Returns \u00b6 T : array-like of shape (n_samples, n_classes) Returns the probability of the sample for each class in the model, where classes are ordered as they are in self.classes_ . score ( self , X , y , sample_weight = None ) inherited \u00b6 Return the mean accuracy on the given test data and labels. In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted. Parameters \u00b6 X : array-like of shape (n_samples, n_features) Test samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights. Returns \u00b6 score : float Mean accuracy of self.predict(X) wrt. y . set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. sparsify ( self ) inherited \u00b6 Convert coefficient matrix to sparse format. Converts the coef_ member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation. The intercept_ member is not converted. Returns \u00b6 self Fitted estimator. Notes \u00b6 For non-sparse models, i.e. when there are not many zeros in coef_ , this may actually increase memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with (coef_ == 0).sum() , must be more than 50% for this to provide significant benefits. After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify.","title":"LogisticRegression"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.__init__","text":"Extends sklearn.linear_model.LogisticRegression.fit() . Parameters: Name Type Description Default calculate_stats bool If true, calculate statistics like standard error during fit, accessible with .get_stats() False","title":"__init__()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.decision_function","text":"Predict confidence scores for samples. The confidence score for a sample is proportional to the signed distance of that sample to the hyperplane.","title":"decision_function()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.decision_function--parameters","text":"X : array-like or sparse matrix, shape (n_samples, n_features) Samples.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.decision_function--returns","text":"array, shape=(n_samples,) if n_classes == 2 else (n_samples, n_classes) Confidence scores per (sample, class) combination. In the binary case, confidence score for self.classes_[1] where >0 means this class would be predicted.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.densify","text":"Convert coefficient matrix to dense array format. Converts the coef_ member (back) to a numpy.ndarray. This is the default format of coef_ and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.","title":"densify()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.densify--returns","text":"self Fitted estimator.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.fit","text":"Fit the model. Overwrites sklearn.linear_model.LogisticRegression.fit() . In addition to the standard fit by sklearn, this function will compute the covariance of the coefficients. Parameters: Name Type Description Default X array-like, sparse matrix Matrix of shape (n_samples, n_features) Training vector, where n_samples is the number of samples and n_features is the number of features. required y array-like of shape (n_samples,) Target vector relative to X. required sample_weight array-like of shape (n_samples,) default=None Array of weights that are assigned to individual samples. If not provided, then each sample is given unit weight. None calculate_stats bool If true, calculate statistics like standard error during fit, accessible with .get_stats() False Returns: Type Description self (LogisticRegression) Fitted estimator.","title":"fit()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.get_stats","text":"Puts the summary statistics of the fit() function into a pandas DataFrame. Returns: Type Description DataFrame data (pandas DataFrame): The statistics dataframe, indexed by the column name","title":"get_stats()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict","text":"Predict class labels for samples in X.","title":"predict()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict--parameters","text":"X : array-like or sparse matrix, shape (n_samples, n_features) Samples.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict--returns","text":"C : array, shape [n_samples] Predicted class label per sample.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_log_proba","text":"Predict logarithm of probability estimates. The returned estimates for all classes are ordered by the label of classes.","title":"predict_log_proba()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_log_proba--parameters","text":"X : array-like of shape (n_samples, n_features) Vector to be scored, where n_samples is the number of samples and n_features is the number of features.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_log_proba--returns","text":"T : array-like of shape (n_samples, n_classes) Returns the log-probability of the sample for each class in the model, where classes are ordered as they are in self.classes_ .","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_proba","text":"Probability estimates. The returned estimates for all classes are ordered by the label of classes. For a multi_class problem, if multi_class is set to be \"multinomial\" the softmax function is used to find the predicted probability of each class. Else use a one-vs-rest approach, i.e calculate the probability of each class assuming it to be positive using the logistic function. and normalize these values across all the classes.","title":"predict_proba()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_proba--parameters","text":"X : array-like of shape (n_samples, n_features) Vector to be scored, where n_samples is the number of samples and n_features is the number of features.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.predict_proba--returns","text":"T : array-like of shape (n_samples, n_classes) Returns the probability of the sample for each class in the model, where classes are ordered as they are in self.classes_ .","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.score","text":"Return the mean accuracy on the given test data and labels. In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.","title":"score()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.score--parameters","text":"X : array-like of shape (n_samples, n_features) Test samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs) True labels for X . sample_weight : array-like of shape (n_samples,), default=None Sample weights.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.score--returns","text":"score : float Mean accuracy of self.predict(X) wrt. y .","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.sparsify","text":"Convert coefficient matrix to sparse format. Converts the coef_ member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation. The intercept_ member is not converted.","title":"sparsify()"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.sparsify--returns","text":"self Fitted estimator.","title":"Returns"},{"location":"api/linear_model/LogisticRegression/#skorecard.linear_model.linear_model.LogisticRegression.sparsify--notes","text":"For non-sparse models, i.e. when there are not many zeros in coef_ , this may actually increase memory usage, so use this method with care. A rule of thumb is that the number of zero elements, which can be computed with (coef_ == 0).sum() , must be more than 50% for this to provide significant benefits. After calling this method, further fitting with the partial_fit method (if any) will not work until you call densify.","title":"Notes"},{"location":"api/pipeline/BucketingProcess/","text":"A two-step bucketing pipeline allowing for pre-bucketing before bucketing. Often you want to pre-bucket features (f.e. to 100 buckets) before bucketing to a smaller set. This brings some additional challenges around propagating specials and defining a bucketer that is able to go from raw data to final bucket. This class facilicates the process and also provides all regular methods and attributes: .summary() : See which columns are bucketed .plot_bucket() : Plot buckets of a column .bucket_table() : Table with buckets of a column .save_to_yaml() : Save information necessary for bucketing to a YAML file .features_bucket_mapping_ : Access bucketing information Examples: from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer , AsIsCategoricalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline df = datasets . load_uci_credit_card ( as_frame = True ) y = df [ \"default\" ] X = df . drop ( columns = [ \"default\" ]) num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] bucketing_process = BucketingProcess ( specials = { 'LIMIT_BAL' : { '=400000.0' : [ 400000.0 ]}}, prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ), ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ) ) bucketing_process . fit ( X , y ) # Details bucketing_process . summary () # all vars, and # buckets bucketing_process . bucket_table ( \"LIMIT_BAL\" ) bucketing_process . plot_bucket ( \"LIMIT_BAL\" ) bucketing_process . prebucket_table ( \"LIMIT_BAL\" ) bucketing_process . plot_prebucket ( \"LIMIT_BAL\" ) features_bucket_mapping_ property readonly \u00b6 Returns a FeaturesBucketMapping instance. In normal bucketers, you can access .features_bucket_mapping_ to retrieve a FeaturesBucketMapping instance. This contains all the info you need to transform values into their buckets. In this class, we basically have a two step bucketing process: first prebucketing, and then we bucket the prebuckets. In order to still be able to use BucketingProcess as if it were a normal bucketer, we'll need to merge both into one. name property readonly \u00b6 To be able to identity the bucketingprocess in a pipeline. __init__ ( self , prebucketing_pipeline = Pipeline ( steps = [( 'decisiontreebucketer' , DecisionTreeBucketer ( max_n_bins = 50 , min_bin_size = 0.02 ))]), bucketing_pipeline = Pipeline ( steps = [( 'optimalbucketer' , OptimalBucketer ( max_n_bins = 6 ))]), variables = [], specials = {}, remainder = 'passthrough' ) special \u00b6 Define a BucketingProcess to first prebucket and then bucket multiple columns in one go. Parameters: Name Type Description Default prebucketing_pipeline Pipeline The scikit-learn pipeline that does pre-bucketing. Defaults to an all-numeric DecisionTreeBucketer pipeline. Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=50, min_bin_size=0.02))]) bucketing_pipeline Pipeline The scikit-learn pipeline that does bucketing. Defaults to an all-numeric OptimalBucketer pipeline. Must transform same features as the prebucketing pipeline. Pipeline(steps=[('optimalbucketer', OptimalBucketer(max_n_bins=6))]) variables List The features to bucket. Uses all features if not defined. [] specials Dict (nested) dictionary of special values that require their own binning. Will merge when specials are also defined in any bucketers in a (pre)bucketing pipeline, and overwrite in case there are shared keys. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough' bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above fit ( self , X , y = None ) \u00b6 Fit the prebucketing and bucketing pipeline with X , y . Parameters: Name Type Description Default X pd.DataFrame Data to fit on. required y np.array target. Defaults to None. None fit_interactive ( self , X , y = None , mode = 'external' , ** server_kwargs ) \u00b6 Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig plot_prebucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Generates the prebucket table and produces a corresponding plotly plot. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig prebucket_table ( self , column ) \u00b6 Generates the statistics for the buckets of a particular column. An example is seen below: pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 (-inf, 1.0) 479 7.98 300 179 37.37 0.73 0.05 0 1 [1.0, 2.0) 370 6.17 233 137 37.03 0.71 0.04 0 Parameters: Name Type Description Default column str The column we wish to analyse required Returns: Type Description DataFrame df (pd.DataFrame): A pandas dataframe of the format above save_yml ( self , fout ) \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike path for output file required set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64 transform ( self , X ) \u00b6 Transform X through the prebucketing and bucketing pipelines.","title":"BucketingProcess"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.features_bucket_mapping_","text":"Returns a FeaturesBucketMapping instance. In normal bucketers, you can access .features_bucket_mapping_ to retrieve a FeaturesBucketMapping instance. This contains all the info you need to transform values into their buckets. In this class, we basically have a two step bucketing process: first prebucketing, and then we bucket the prebuckets. In order to still be able to use BucketingProcess as if it were a normal bucketer, we'll need to merge both into one.","title":"features_bucket_mapping_"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.name","text":"To be able to identity the bucketingprocess in a pipeline.","title":"name"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.__init__","text":"Define a BucketingProcess to first prebucket and then bucket multiple columns in one go. Parameters: Name Type Description Default prebucketing_pipeline Pipeline The scikit-learn pipeline that does pre-bucketing. Defaults to an all-numeric DecisionTreeBucketer pipeline. Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=50, min_bin_size=0.02))]) bucketing_pipeline Pipeline The scikit-learn pipeline that does bucketing. Defaults to an all-numeric OptimalBucketer pipeline. Must transform same features as the prebucketing pipeline. Pipeline(steps=[('optimalbucketer', OptimalBucketer(max_n_bins=6))]) variables List The features to bucket. Uses all features if not defined. [] specials Dict (nested) dictionary of special values that require their own binning. Will merge when specials are also defined in any bucketers in a (pre)bucketing pipeline, and overwrite in case there are shared keys. The dictionary has the following format: {\" \" : {\"name of special bucket\" : }} For every feature that needs a special value, a dictionary must be passed as value. This dictionary contains a name of a bucket (key) and an array of unique values that should be put in that bucket. When special values are defined, they are not considered in the fitting procedure. {} remainder str How we want the non-specified columns to be transformed. It must be in [\"passthrough\", \"drop\"]. passthrough (Default): all columns that were not specified in \"variables\" will be passed through. drop: all remaining columns that were not specified in \"variables\" will be dropped. 'passthrough'","title":"__init__()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.fit","text":"Fit the prebucketing and bucketing pipeline with X , y . Parameters: Name Type Description Default X pd.DataFrame Data to fit on. required y np.array target. Defaults to None. None","title":"fit()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.fit_interactive","text":"Fit a bucketer and then interactive edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.plot_prebucket","text":"Generates the prebucket table and produces a corresponding plotly plot. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_prebucket()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.prebucket_table","text":"Generates the statistics for the buckets of a particular column. An example is seen below: pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 (-inf, 1.0) 479 7.98 300 179 37.37 0.73 0.05 0 1 [1.0, 2.0) 370 6.17 233 137 37.03 0.71 0.04 0 Parameters: Name Type Description Default column str The column we wish to analyse required Returns: Type Description DataFrame df (pd.DataFrame): A pandas dataframe of the format above","title":"prebucket_table()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout ~PathLike path for output file required","title":"save_yml()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/pipeline/BucketingProcess/#skorecard.pipeline.bucketing_process.BucketingProcess.transform","text":"Transform X through the prebucketing and bucketing pipelines.","title":"transform()"},{"location":"api/pipeline/KeepPandas/","text":"Wrapper to keep column names of pandas dataframes in a scikit-learn transformer. Any scikit-learn transformer wrapped in KeepPandas will return a pd.DataFrame on .transform() . Warning You should only use KeepPandas() when you know for sure scikit-learn did not change the order of your columns. Examples: from skorecard.pipeline import KeepPandas from skorecard import datasets from skorecard.bucketers import EqualWidthBucketer from sklearn.pipeline import make_pipeline from sklearn.preprocessing import StandardScaler X , y = datasets . load_uci_credit_card ( return_X_y = True ) bucket_pipeline = make_pipeline ( KeepPandas ( StandardScaler ()), EqualWidthBucketer ( n_bins = 5 , variables = [ 'LIMIT_BAL' , 'BILL_AMT1' ]), ) bucket_pipeline . fit_transform ( X , y ) __init__ ( self , transformer ) special \u00b6 Initialize. __repr__ ( self ) special \u00b6 String representation. fit ( self , X , y = None , * args , ** kwargs ) \u00b6 Fit estimator. fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_feature_names ( self ) \u00b6 Return estimator feature names. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. transform ( self , X , * args , ** kwargs ) \u00b6 Transform X.","title":"KeepPandas"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.__init__","text":"Initialize.","title":"__init__()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.__repr__","text":"String representation.","title":"__repr__()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.fit","text":"Fit estimator.","title":"fit()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.get_feature_names","text":"Return estimator feature names.","title":"get_feature_names()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/pipeline/KeepPandas/#skorecard.pipeline.pipeline.KeepPandas.transform","text":"Transform X.","title":"transform()"},{"location":"api/pipeline/SkorecardPipeline/","text":"A sklearn Pipeline with several attribute and methods added. This Pipeline of bucketers behaves more like a bucketer and adds: .summary() : See which columns are bucketed .plot_bucket() : Plot buckets of a column .bucket_table() : Table with buckets of a column .save_to_yaml() : Save information necessary for bucketing to a YAML file .features_bucket_mapping_ : Access bucketing information .fit_interactive() : Edit fitted buckets interactively in a dash app from skorecard.pipeline.pipeline import SkorecardPipeline from skorecard.bucketers import DecisionTreeBucketer , OrdinalCategoricalBucketer from skorecard import datasets pipe = SkorecardPipeline ([ ( 'decisiontreebucketer' , DecisionTreeBucketer ( variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ], max_n_bins = 5 )), ( 'ordinalcategoricalbucketer' , OrdinalCategoricalBucketer ( variables = [ \"EDUCATION\" , \"MARRIAGE\" ], tol = 0.05 )), ]) df = datasets . load_uci_credit_card ( as_frame = True ) features = [ \"LIMIT_BAL\" , \"BILL_AMT1\" , \"EDUCATION\" , \"MARRIAGE\" ] X = df [ features ] y = df [ \"default\" ] . values pipe . fit ( X , y ) pipe . bucket_table ( 'LIMIT_BAL' ) bucket_tables_ property readonly \u00b6 Retrieve bucket tables. Used by .bucket_table() features_bucket_mapping_ property readonly \u00b6 Retrieve features bucket mapping. inverse_transform inherited property readonly \u00b6 Apply inverse transformations in reverse order All estimators in the pipeline must support inverse_transform . Parameters \u00b6 Xt : array-like of shape (n_samples, n_transformed_features) Data samples, where n_samples is the number of samples and n_features is the number of features. Must fulfill input requirements of last step of pipeline's inverse_transform method. Returns \u00b6 Xt : array-like of shape (n_samples, n_features) summary_dict_ : Dict property readonly \u00b6 Retrieve summary_dicts and combine. Used by .summary() transform inherited property readonly \u00b6 Apply transforms, and transform with the final estimator This also works where final estimator is None : all prior transformations are applied. Parameters \u00b6 X : iterable Data to transform. Must fulfill input requirements of first step of the pipeline. Returns \u00b6 Xt : array-like of shape (n_samples, n_transformed_features) __class__ inherited \u00b6 Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()). __instancecheck__ ( cls , instance ) special \u00b6 Override for isinstance(instance, cls). __new__ ( mcls , name , bases , namespace , ** kwargs ) special staticmethod \u00b6 Create and return a new object. See help(type) for accurate signature. __subclasscheck__ ( cls , subclass ) special \u00b6 Override for issubclass(subclass, cls). register ( cls , subclass ) \u00b6 Register a virtual subclass of an ABC. Returns the subclass, to allow usage as a class decorator. __init__ ( self , steps , * , memory = None , verbose = False ) special \u00b6 Wraps sklearn Pipeline. bucket_table ( self , column ) inherited \u00b6 Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above decision_function ( self , X ) inherited \u00b6 Apply transforms, and decision_function of the final estimator Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. Returns \u00b6 y_score : array-like of shape (n_samples, n_classes) fit ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit the model Fit all the transforms one after the other and transform the data, then fit the transformed data using the final estimator. Parameters \u00b6 X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p . Returns \u00b6 self : Pipeline This estimator fit_interactive ( self , X , y = None , mode = 'external' ) \u00b6 Fit a bucketer and then interactively edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab fit_predict ( self , X , y = None , ** fit_params ) inherited \u00b6 Applies fit_predict of last step in pipeline after transforms. Applies fit_transforms of a pipeline to the data, followed by the fit_predict method of the final estimator in the pipeline. Valid only if the final estimator implements fit_predict. Parameters \u00b6 X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p . Returns \u00b6 y_pred : array-like fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit the model and transform with the final estimator Fits all the transforms one after the other and transforms the data, then uses fit_transform on transformed data with the final estimator. Parameters \u00b6 X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p . Returns \u00b6 Xt : array-like of shape (n_samples, n_transformed_features) Transformed samples get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Returns the parameters given in the constructor as well as the estimators contained within the steps of the Pipeline . Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : mapping of string to any Parameter names mapped to their values. plot_bucket ( self , column , line = 'event_rate' , format = None , scale = None , width = None , height = None ) inherited \u00b6 Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig predict ( self , X , ** predict_params ) inherited \u00b6 Apply transforms to the data, and predict with the final estimator Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. **predict_params : dict of string -> object Parameters to the predict called at the end of all transformations in the pipeline. Note that while this may be used to return uncertainties from some models with return_std or return_cov, uncertainties that are generated by the transformations in the pipeline are not propagated to the final estimator. .. versionadded:: 0.20 Returns \u00b6 y_pred : array-like predict_log_proba ( self , X ) inherited \u00b6 Apply transforms, and predict_log_proba of the final estimator Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. Returns \u00b6 y_score : array-like of shape (n_samples, n_classes) predict_proba ( self , X ) inherited \u00b6 Apply transforms, and predict_proba of the final estimator Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. Returns \u00b6 y_proba : array-like of shape (n_samples, n_classes) save_yml ( self , fout ) \u00b6 Save the features bucket to a yaml file. Parameters: Name Type Description Default fout file output required score ( self , X , y = None , sample_weight = None ) inherited \u00b6 Apply transforms, and score with the final estimator Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Targets used for scoring. Must fulfill label requirements for all steps of the pipeline. sample_weight : array-like, default=None If not None, this argument is passed as sample_weight keyword argument to the score method of the final estimator. Returns \u00b6 score : float score_samples ( self , X ) inherited \u00b6 Apply transforms, and score_samples of the final estimator. Parameters \u00b6 X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. Returns \u00b6 y_score : ndarray of shape (n_samples,) set_params ( self , ** kwargs ) inherited \u00b6 Set the parameters of this estimator. Valid parameter keys can be listed with get_params() . Note that you can directly set the parameters of the estimators contained in steps . Returns \u00b6 self summary ( self ) inherited \u00b6 Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"SkorecardPipeline"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.bucket_tables_","text":"Retrieve bucket tables. Used by .bucket_table()","title":"bucket_tables_"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.features_bucket_mapping_","text":"Retrieve features bucket mapping.","title":"features_bucket_mapping_"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.inverse_transform","text":"Apply inverse transformations in reverse order All estimators in the pipeline must support inverse_transform .","title":"inverse_transform"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.inverse_transform--parameters","text":"Xt : array-like of shape (n_samples, n_transformed_features) Data samples, where n_samples is the number of samples and n_features is the number of features. Must fulfill input requirements of last step of pipeline's inverse_transform method.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.inverse_transform--returns","text":"Xt : array-like of shape (n_samples, n_features)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.summary_dict_","text":"Retrieve summary_dicts and combine. Used by .summary()","title":"summary_dict_"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.transform","text":"Apply transforms, and transform with the final estimator This also works where final estimator is None : all prior transformations are applied.","title":"transform"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.transform--parameters","text":"X : iterable Data to transform. Must fulfill input requirements of first step of the pipeline.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.transform--returns","text":"Xt : array-like of shape (n_samples, n_transformed_features)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__class__","text":"Metaclass for defining Abstract Base Classes (ABCs). Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as 'virtual subclasses' -- these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won't show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()).","title":"__class__"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__class__.__instancecheck__","text":"Override for isinstance(instance, cls).","title":"__instancecheck__()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__class__.__new__","text":"Create and return a new object. See help(type) for accurate signature.","title":"__new__()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__class__.__subclasscheck__","text":"Override for issubclass(subclass, cls).","title":"__subclasscheck__()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__class__.register","text":"Register a virtual subclass of an ABC. Returns the subclass, to allow usage as a class decorator.","title":"register()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.__init__","text":"Wraps sklearn Pipeline.","title":"__init__()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.bucket_table","text":"Generates the statistics for the buckets of a particular column. The pre-buckets are matched to the post-buckets, so that the user has a much clearer understanding of how the BucketingProcess ends up with the final buckets. An example: bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 (-inf, 25000.0) 479.0 7.98 300.0 179.0 37.37 0.73 0.05 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 37.03 0.71 0.04 Parameters: Name Type Description Default column The column we wish to analyse required Returns: Type Description df (pd.DataFrame) A pandas dataframe of the format above","title":"bucket_table()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.decision_function","text":"Apply transforms, and decision_function of the final estimator","title":"decision_function()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.decision_function--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.decision_function--returns","text":"y_score : array-like of shape (n_samples, n_classes)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit","text":"Fit the model Fit all the transforms one after the other and transform the data, then fit the transformed data using the final estimator.","title":"fit()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit--parameters","text":"X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p .","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit--returns","text":"self : Pipeline This estimator","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_interactive","text":"Fit a bucketer and then interactively edit the fit using a dash app. Note we are using a jupyterdash app, which supports 3 different modes: 'external' (default): Start dash server and print URL 'inline': Start dash app inside an Iframe in the jupyter notebook 'jupyterlab': Start dash app as a new tab inside jupyterlab","title":"fit_interactive()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_predict","text":"Applies fit_predict of last step in pipeline after transforms. Applies fit_transforms of a pipeline to the data, followed by the fit_predict method of the final estimator in the pipeline. Valid only if the final estimator implements fit_predict.","title":"fit_predict()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_predict--parameters","text":"X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p .","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_predict--returns","text":"y_pred : array-like","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_transform","text":"Fit the model and transform with the final estimator Fits all the transforms one after the other and transforms the data, then uses fit_transform on transformed data with the final estimator.","title":"fit_transform()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_transform--parameters","text":"X : iterable Training data. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Training targets. Must fulfill label requirements for all steps of the pipeline. **fit_params : dict of string -> object Parameters passed to the fit method of each step, where each parameter name is prefixed such that parameter p for step s has key s__p .","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.fit_transform--returns","text":"Xt : array-like of shape (n_samples, n_transformed_features) Transformed samples","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.get_params","text":"Get parameters for this estimator. Returns the parameters given in the constructor as well as the estimators contained within the steps of the Pipeline .","title":"get_params()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.get_params--returns","text":"params : mapping of string to any Parameter names mapped to their values.","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.plot_bucket","text":"Plot the buckets. Parameters: Name Type Description Default column The column we want to visualise required line The line to plot on the secondary axis. Default is Event Rate. 'event_rate' format The format of the image, such as 'png'. The default None returns a plotly image. None scale If format is specified, the scale of the image None width If format is specified, the width of the image None height If format is specified, the image of the image None Returns: Type Description plot plotly fig","title":"plot_bucket()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict","text":"Apply transforms to the data, and predict with the final estimator","title":"predict()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. **predict_params : dict of string -> object Parameters to the predict called at the end of all transformations in the pipeline. Note that while this may be used to return uncertainties from some models with return_std or return_cov, uncertainties that are generated by the transformations in the pipeline are not propagated to the final estimator. .. versionadded:: 0.20","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict--returns","text":"y_pred : array-like","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_log_proba","text":"Apply transforms, and predict_log_proba of the final estimator","title":"predict_log_proba()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_log_proba--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_log_proba--returns","text":"y_score : array-like of shape (n_samples, n_classes)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_proba","text":"Apply transforms, and predict_proba of the final estimator","title":"predict_proba()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_proba--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.predict_proba--returns","text":"y_proba : array-like of shape (n_samples, n_classes)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.save_yml","text":"Save the features bucket to a yaml file. Parameters: Name Type Description Default fout file output required","title":"save_yml()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score","text":"Apply transforms, and score with the final estimator","title":"score()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline. y : iterable, default=None Targets used for scoring. Must fulfill label requirements for all steps of the pipeline. sample_weight : array-like, default=None If not None, this argument is passed as sample_weight keyword argument to the score method of the final estimator.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score--returns","text":"score : float","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score_samples","text":"Apply transforms, and score_samples of the final estimator.","title":"score_samples()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score_samples--parameters","text":"X : iterable Data to predict on. Must fulfill input requirements of first step of the pipeline.","title":"Parameters"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.score_samples--returns","text":"y_score : ndarray of shape (n_samples,)","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.set_params","text":"Set the parameters of this estimator. Valid parameter keys can be listed with get_params() . Note that you can directly set the parameters of the estimators contained in steps .","title":"set_params()"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.set_params--returns","text":"self","title":"Returns"},{"location":"api/pipeline/SkorecardPipeline/#skorecard.pipeline.pipeline.SkorecardPipeline.summary","text":"Display a summary table for columns passed to .fit() . The format is the following: column num_prebuckets num_buckets dtype LIMIT_BAL 15 10 float64 BILL_AMT1 15 6 float64","title":"summary()"},{"location":"api/pipeline/to_skorecard_pipeline/","text":"Transform a scikit-learn Pipeline to a SkorecardPipeline. A SkorecardPipeline is a normal scikit-learn pipeline with some extra methods and attributes. Examples: from skorecard.pipeline.pipeline import SkorecardPipeline , to_skorecard_pipeline from skorecard.bucketers import DecisionTreeBucketer , OrdinalCategoricalBucketer from skorecard import datasets from sklearn.pipeline import make_pipeline pipe = make_pipeline ( DecisionTreeBucketer ( variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ], max_n_bins = 5 ), OrdinalCategoricalBucketer ( variables = [ \"EDUCATION\" , \"MARRIAGE\" ], tol = 0.05 ) ) sk_pipe = to_skorecard_pipeline ( pipe ) df = datasets . load_uci_credit_card ( as_frame = True ) features = [ \"LIMIT_BAL\" , \"BILL_AMT1\" , \"EDUCATION\" , \"MARRIAGE\" ] X = df [ features ] y = df [ \"default\" ] . values Parameters: Name Type Description Default pipeline Pipeline scikit-learn pipeline instance. required Returns: Type Description SkorecardPipeline pipeline (skorecard.pipeline.SkorecardPipeline): modified pipeline instance.","title":"To skorecard pipeline"},{"location":"api/preprocessing/ColumnSelector/","text":"Transformer that performs selection of variables from a pandas dataframe. Useful in pipelines, where we require a step that selects feautures. Examples: from skorecard import datasets from skorecard.preprocessing import ColumnSelector X , y = datasets . load_uci_credit_card ( return_X_y = True ) cs = ColumnSelector ( variables = [ 'EDUCATION' ]) assert cs . fit_transform ( X , y ) . columns == [ 'EDUCATION' ] __init__ ( self , variables = []) special \u00b6 Transformer constructor. Parameters: Name Type Description Default variables List list of columns to select. Default value is set to None - in this case, there is no selection of columns. [] fit ( self , X , y = None ) \u00b6 Fit the transformer. Here to be compliant with the sklearn API, does not fit anything. fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. transform ( self , X ) \u00b6 Selects the columns. Parameters: Name Type Description Default X pd.DataFrame Dataset required","title":"ColumnSelector"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.__init__","text":"Transformer constructor. Parameters: Name Type Description Default variables List list of columns to select. Default value is set to None - in this case, there is no selection of columns. []","title":"__init__()"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.fit","text":"Fit the transformer. Here to be compliant with the sklearn API, does not fit anything.","title":"fit()"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/preprocessing/ColumnSelector/#skorecard.preprocessing.preprocessing.ColumnSelector.transform","text":"Selects the columns. Parameters: Name Type Description Default X pd.DataFrame Dataset required","title":"transform()"},{"location":"api/preprocessing/WoeEncoder/","text":"Transformer that encodes unique values in features to their Weight of Evidence estimation. This class has been deprecated in favor of category_encoders.woe.WOEEncoder Only works for binary classification (target y has 0 and 1 values). The weight of evidence is given by: np.log( p(1) / p(0) ) The target probability ratio is given by: p(1) / p(0) For example in the variable colour, if the mean of the target = 1 for blue is 0.8 and the mean of the target = 0 is 0.2, blue will be replaced by: np.log(0.8/0.2) = 1.386 if log_ratio is selected. Alternatively, blue will be replaced by 0.8 / 0.2 = 4 if ratio is selected. More formally: for each unique value \ud835\udc65, consider the corresponding rows in the training set compute what percentage of positives is in these rows, compared to the whole set compute what percentage of negatives is in these rows, compared to the whole set take the ratio of these percentages take the natural logarithm of that ratio to get the weight of evidence corresponding to \ud835\udc65, so that \ud835\udc4a\ud835\udc42\ud835\udc38(\ud835\udc65) is either positive or negative according to whether \ud835\udc65 is more representative of positives or negatives More details: blogpost on weight of evidence Examples: from skorecard import datasets from skorecard.preprocessing import WoeEncoder X , y = datasets . load_uci_credit_card ( return_X_y = True ) we = WoeEncoder ( variables = [ 'EDUCATION' ]) we . fit_transform ( X , y ) we . fit_transform ( X , y )[ 'EDUCATION' ] . value_counts () Credits: Some inspiration taken from feature_engine.categorical_encoders . __init__ ( self , epsilon = 0.0001 , variables = [], handle_unknown = 'value' ) special \u00b6 Constructor for WoEEncoder. Parameters: Name Type Description Default epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 variables list The features to bucket. Uses all features if not defined. [] handle_unknown str How to handle any new values encountered in X on transform(). options are 'return_nan', 'error' and 'value', defaults to 'value', which will assume WOE=0. 'value' fit ( self , X , y ) \u00b6 Calculate the WOE for every column. Parameters: Name Type Description Default X np.array (binned) features required y np.array target required fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. transform ( self , X ) \u00b6 Transform X to weight of evidence encoding. Parameters: Name Type Description Default X pd.DataFrame dataset required","title":"WoeEncoder"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.__init__","text":"Constructor for WoEEncoder. Parameters: Name Type Description Default epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 variables list The features to bucket. Uses all features if not defined. [] handle_unknown str How to handle any new values encountered in X on transform(). options are 'return_nan', 'error' and 'value', defaults to 'value', which will assume WOE=0. 'value'","title":"__init__()"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.fit","text":"Calculate the WOE for every column. Parameters: Name Type Description Default X np.array (binned) features required y np.array target required","title":"fit()"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/preprocessing/WoeEncoder/#skorecard.preprocessing._WoEEncoder.WoeEncoder.transform","text":"Transform X to weight of evidence encoding. Parameters: Name Type Description Default X pd.DataFrame dataset required","title":"transform()"},{"location":"api/reporting/iv/","text":"Information Value \u00b6 Calculate the Information Value (IV) of the features in X . X must be the output of fitted bucketers. \\[ IV = \\sum { (\\% goods - \\% bads) } * { WOE } \\] \\[ WOE=\\ln (\\% { goods } / \\% { bads }) \\] Examples: from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer from skorecard.reporting import iv X , y = datasets . load_uci_credit_card ( return_X_y = True ) dbt = DecisionTreeBucketer () X_bins = dbt . fit_transform ( X , y ) iv_dict = iv ( X_bins , y ) Parameters: Name Type Description Default X DataFrame pd.DataFrame (bucketed) features required y Series pd.Series: target values required epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 digits Optional[int] number of significant decimal digits in the IV calculation None Returns: Type Description Dict IVs (dict): Keys are feature names, values are the IV values","title":"Information Value"},{"location":"api/reporting/iv/#information-value","text":"Calculate the Information Value (IV) of the features in X . X must be the output of fitted bucketers. \\[ IV = \\sum { (\\% goods - \\% bads) } * { WOE } \\] \\[ WOE=\\ln (\\% { goods } / \\% { bads }) \\] Examples: from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer from skorecard.reporting import iv X , y = datasets . load_uci_credit_card ( return_X_y = True ) dbt = DecisionTreeBucketer () X_bins = dbt . fit_transform ( X , y ) iv_dict = iv ( X_bins , y ) Parameters: Name Type Description Default X DataFrame pd.DataFrame (bucketed) features required y Series pd.Series: target values required epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 digits Optional[int] number of significant decimal digits in the IV calculation None Returns: Type Description Dict IVs (dict): Keys are feature names, values are the IV values","title":"Information Value"},{"location":"api/reporting/psi/","text":"Population Stability Index \u00b6 Calculate the PSI between the features in two dataframes, X1 and X2 . X1 and X2 should be bucketed (outputs of fitted bucketers). \\[ PSI = \\sum((\\%{ Good } - \\%{ Bad }) imes \\ln rac{\\%{ Good }}{\\%{ Bad }}) \\] Parameters: Name Type Description Default X1 DataFrame bucketed features, expected required X2 DataFrame bucketed features, actual data required epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 digits (int): number of significant decimal digits in the IV calculation None Examples: from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer from skorecard.reporting import psi X , y = datasets . load_uci_credit_card ( return_X_y = True ) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.25 , random_state = 42 ) dbt = DecisionTreeBucketer () X_train_bins = dbt . fit_transform ( X_train , y_train ) X_test_bins = dbt . transform ( X_test ) psi_dict = psi ( X_train_bins , X_test_bins )","title":"Population Stability Index"},{"location":"api/reporting/psi/#population-stability-index","text":"Calculate the PSI between the features in two dataframes, X1 and X2 . X1 and X2 should be bucketed (outputs of fitted bucketers). \\[ PSI = \\sum((\\%{ Good } - \\%{ Bad }) imes \\ln rac{\\%{ Good }}{\\%{ Bad }}) \\] Parameters: Name Type Description Default X1 DataFrame bucketed features, expected required X2 DataFrame bucketed features, actual data required epsilon float Amount to be added to relative counts in order to avoid division by zero in the WOE calculation. 0.0001 digits (int): number of significant decimal digits in the IV calculation None Examples: from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer from skorecard.reporting import psi X , y = datasets . load_uci_credit_card ( return_X_y = True ) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.25 , random_state = 42 ) dbt = DecisionTreeBucketer () X_train_bins = dbt . fit_transform ( X_train , y_train ) X_test_bins = dbt . transform ( X_test ) psi_dict = psi ( X_train_bins , X_test_bins )","title":"Population Stability Index"},{"location":"api/rescale/rescale/","text":"ScoreCardPoints \u00b6 Transformer to map the the buckets from the skorecard model and maps them to the rescaled points. Examples: from skorecard import Skorecard from skorecard.rescale import ScoreCardPoints from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) model = Skorecard ( variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" , \"EDUCATION\" , \"MARRIAGE\" ]) model . fit ( X , y ) scp = ScoreCardPoints ( model ) scp . transform ( X ) __init__ ( self , skorecard_model , * , pdo = 20 , ref_score = 100 , ref_odds = 1 ) special \u00b6 Class constructor. fit_transform ( self , X , y = None , ** fit_params ) inherited \u00b6 Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X . Parameters \u00b6 X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters. Returns \u00b6 X_new : ndarray array of shape (n_samples, n_features_new) Transformed array. get_params ( self , deep = True ) inherited \u00b6 Get parameters for this estimator. Parameters \u00b6 deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators. Returns \u00b6 params : dict Parameter names mapped to their values. get_scorecard_points ( self ) \u00b6 Get the scorecard points. set_params ( self , ** params ) inherited \u00b6 Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object. Parameters \u00b6 **params : dict Estimator parameters. Returns \u00b6 self : estimator instance Estimator instance. transform ( self , X ) \u00b6 Transform the features to the points.","title":"ScoreCardPoints"},{"location":"api/rescale/rescale/#scorecardpoints","text":"Transformer to map the the buckets from the skorecard model and maps them to the rescaled points. Examples: from skorecard import Skorecard from skorecard.rescale import ScoreCardPoints from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) model = Skorecard ( variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" , \"EDUCATION\" , \"MARRIAGE\" ]) model . fit ( X , y ) scp = ScoreCardPoints ( model ) scp . transform ( X )","title":"ScoreCardPoints"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.__init__","text":"Class constructor.","title":"__init__()"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.fit_transform","text":"Fit to data, then transform it. Fits transformer to X and y with optional parameters fit_params and returns a transformed version of X .","title":"fit_transform()"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.fit_transform--parameters","text":"X : array-like of shape (n_samples, n_features) Input samples. y : array-like of shape (n_samples,) or (n_samples, n_outputs), default=None Target values (None for unsupervised transformations). **fit_params : dict Additional fit parameters.","title":"Parameters"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.fit_transform--returns","text":"X_new : ndarray array of shape (n_samples, n_features_new) Transformed array.","title":"Returns"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.get_params","text":"Get parameters for this estimator.","title":"get_params()"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.get_params--parameters","text":"deep : bool, default=True If True, will return the parameters for this estimator and contained subobjects that are estimators.","title":"Parameters"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.get_params--returns","text":"params : dict Parameter names mapped to their values.","title":"Returns"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.get_scorecard_points","text":"Get the scorecard points.","title":"get_scorecard_points()"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.set_params","text":"Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as :class: ~sklearn.pipeline.Pipeline ). The latter have parameters of the form <component>__<parameter> so that it's possible to update each component of a nested object.","title":"set_params()"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.set_params--parameters","text":"**params : dict Estimator parameters.","title":"Parameters"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.set_params--returns","text":"self : estimator instance Estimator instance.","title":"Returns"},{"location":"api/rescale/rescale/#skorecard.rescale.rescale.ScoreCardPoints.transform","text":"Transform the features to the points.","title":"transform()"},{"location":"discussion/benchmark_with_EBM/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); EBM benchmark with skorecard \u00b6 This benchmark was adjusted from https://raw.githubusercontent.com/interpretml/interpret/master/benchmarks/EBM%20Classification%20Comparison.ipynb. # To run benchmark script, you will need to install XGBoost # (pip install XGBoost) import numpy as np import pandas as pd from sklearn.datasets import load_breast_cancer import warnings warnings . filterwarnings ( \"ignore\" ) def load_breast_data (): breast = load_breast_cancer () feature_names = list ( breast . feature_names ) X , y = pd . DataFrame ( breast . data , columns = feature_names ), breast . target dataset = { 'problem' : 'classification' , 'full' : { 'X' : X , 'y' : y , }, } return dataset def load_adult_data (): df = pd . read_csv ( \"https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\" , header = None ) df . columns = [ \"Age\" , \"WorkClass\" , \"fnlwgt\" , \"Education\" , \"EducationNum\" , \"MaritalStatus\" , \"Occupation\" , \"Relationship\" , \"Race\" , \"Gender\" , \"CapitalGain\" , \"CapitalLoss\" , \"HoursPerWeek\" , \"NativeCountry\" , \"Income\" ] train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_heart_data (): # https://www.kaggle.com/ronitf/heart-disease-uci df = pd . read_csv ( r 'heart.csv' ) train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_credit_data (): # https://www.kaggle.com/mlg-ulb/creditcardfraud df = pd . read_csv ( r 'creditcard.csv' ) train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_telco_churn_data (): # https://www.kaggle.com/blastchar/telco-customer-churn df = pd . read_csv ( r 'WA_Fn-UseC_-Telco-Customer-Churn.csv' ) train_cols = df . columns [ 1 : - 1 ] # First column is an ID label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] # 'Yes, No' dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset from sklearn.preprocessing import OneHotEncoder , FunctionTransformer , StandardScaler from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.model_selection import StratifiedShuffleSplit , cross_validate from sklearn.ensemble import RandomForestClassifier from sklearn.preprocessing import OrdinalEncoder from xgboost import XGBClassifier from sklearn.linear_model import LogisticRegression from interpret.glassbox import ExplainableBoostingClassifier from skorecard import Skorecard from optbinning import BinningProcess from optbinning import Scorecard def format_n ( x ): return \" {0:.3f} \" . format ( x ) def process_model ( clf , name , X , y , n_splits = 3 ): # Evaluate model ss = StratifiedShuffleSplit ( n_splits = n_splits , test_size = 0.25 , random_state = 1337 ) scores = cross_validate ( clf , X , y , scoring = 'roc_auc' , cv = ss , n_jobs =- 1 , return_estimator = True ) record = dict () record [ 'model_name' ] = name record [ 'fit_time_mean' ] = format_n ( np . mean ( scores [ 'fit_time' ])) record [ 'fit_time_std' ] = format_n ( np . std ( scores [ 'fit_time' ])) record [ 'test_score_mean' ] = format_n ( np . mean ( scores [ 'test_score' ])) record [ 'test_score_std' ] = format_n ( np . std ( scores [ 'test_score' ])) return record def benchmark_models ( dataset_name , X , y , ct = None , n_splits = 3 , random_state = 1337 ): if ct is None : is_cat = np . array ([ dt . kind == 'O' for dt in X . dtypes ]) cat_cols = X . columns . values [ is_cat ] num_cols = X . columns . values [ ~ is_cat ] cat_ohe_step = ( 'ohe' , OneHotEncoder ( sparse = False , handle_unknown = 'ignore' )) cat_pipe = Pipeline ([ cat_ohe_step ]) num_pipe = Pipeline ([( 'identity' , FunctionTransformer ())]) transformers = [ ( 'cat' , cat_pipe , cat_cols ), ( 'num' , num_pipe , num_cols ) ] ct = ColumnTransformer ( transformers = transformers ) cat_ord_step = ( 'ord_enc' , OrdinalEncoder ()) cat_pipe = Pipeline ([ cat_ord_step ]) transformers = [ ( 'cat' , cat_pipe , cat_cols ), ( 'num' , num_pipe , num_cols ) ] ot = ColumnTransformer ( transformers = transformers ) records = [] summary_record = {} summary_record [ 'dataset_name' ] = dataset_name print () print ( '-' * 78 ) print ( dataset_name ) print ( '-' * 78 ) print ( summary_record ) print () pipe = Pipeline ([ ( 'ct' , ct ), ( 'std' , StandardScaler ()), ( 'lr' , LogisticRegression ( random_state = random_state )), ]) record = process_model ( pipe , 'lr_ohe' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ot' , ot ), ( 'std' , StandardScaler ()), ( 'lr' , LogisticRegression ( max_iter = 7000 , random_state = random_state )), ]) record = process_model ( pipe , 'lr_ordinal' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # Scorecard num_features = list ( X . _get_numeric_data () . columns ) cat_features = [ f for f in X . columns if f not in num_features ] scorecard = Scorecard ( binning_process = BinningProcess ( variable_names = num_features + cat_features , categorical_variables = cat_features , selection_criteria = { \"iv\" : { \"min\" : 0.02 , \"max\" : 1 }, \"quality_score\" : { \"min\" : 0.01 }}), estimator = LogisticRegression ( solver = \"lbfgs\" ), scaling_method = \"min_max\" , scaling_method_params = { \"min\" : 300 , \"max\" : 850 } ) record = process_model ( scorecard , 'optbinning.scorecard' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # Skorecard skorecard = Skorecard () record = process_model ( skorecard , 'skorecard' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ct' , ct ), # n_estimators updated from 10 to 100 due to sci-kit defaults changing in future versions ( 'rf-100' , RandomForestClassifier ( n_estimators = 100 , n_jobs =- 1 , random_state = random_state )), ]) record = process_model ( pipe , 'rf-100' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ct' , ct ), ( 'xgb' , XGBClassifier ( random_state = random_state , eval_metric = 'logloss' )), ]) record = process_model ( pipe , 'xgb' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # No pipeline needed due to EBM handling string datatypes ebm_inter = ExplainableBoostingClassifier ( n_jobs =- 1 , random_state = random_state ) record = process_model ( ebm_inter , 'ebm' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) return records results = [] n_splits = 3 from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) result = benchmark_models ( 'UCI-creditcard' , X , y , n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ UCI-creditcard ------------------------------------------------------------------------------ {'dataset_name': 'UCI-creditcard'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.009', 'fit_time_std': '0.001', 'test_score_mean': '0.621', 'test_score_std': '0.023'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.008', 'fit_time_std': '0.000', 'test_score_mean': '0.621', 'test_score_std': '0.023'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.265', 'fit_time_std': '0.007', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '1.042', 'fit_time_std': '0.235', 'test_score_mean': '0.627', 'test_score_std': '0.018'} {'model_name': 'rf-100', 'fit_time_mean': '0.344', 'fit_time_std': '0.005', 'test_score_mean': '0.588', 'test_score_std': '0.013'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.588', 'fit_time_std': '0.002', 'test_score_mean': '0.596', 'test_score_std': '0.005'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '1.141', 'fit_time_std': '0.094', 'test_score_mean': '0.644', 'test_score_std': '0.012'} dataset = load_breast_data () result = benchmark_models ( 'breast-cancer' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ breast-cancer ------------------------------------------------------------------------------ {'dataset_name': 'breast-cancer'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.012', 'fit_time_std': '0.001', 'test_score_mean': '0.994', 'test_score_std': '0.006'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.011', 'fit_time_std': '0.000', 'test_score_mean': '0.994', 'test_score_std': '0.006'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '2.184', 'fit_time_std': '0.027', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '9.318', 'fit_time_std': '0.915', 'test_score_mean': '0.996', 'test_score_std': '0.004'} {'model_name': 'rf-100', 'fit_time_mean': '0.159', 'fit_time_std': '0.001', 'test_score_mean': '0.992', 'test_score_std': '0.009'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.185', 'fit_time_std': '0.026', 'test_score_mean': '0.992', 'test_score_std': '0.010'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '3.863', 'fit_time_std': '1.145', 'test_score_mean': '0.995', 'test_score_std': '0.006'} dataset = load_adult_data () result = benchmark_models ( 'adult' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) # 0.888 ------------------------------------------------------------------------------ adult ------------------------------------------------------------------------------ {'dataset_name': 'adult'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.909', 'fit_time_std': '0.030', 'test_score_mean': '0.906', 'test_score_std': '0.003'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.136', 'fit_time_std': '0.000', 'test_score_mean': '0.855', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.184', 'fit_time_std': '0.003', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '2.831', 'fit_time_std': '0.026', 'test_score_mean': '0.888', 'test_score_std': '0.004'} {'model_name': 'rf-100', 'fit_time_mean': '2.224', 'fit_time_std': '0.013', 'test_score_mean': '0.903', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '7.538', 'fit_time_std': '0.089', 'test_score_mean': '0.927', 'test_score_std': '0.001'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '49.284', 'fit_time_std': '2.831', 'test_score_mean': '0.928', 'test_score_std': '0.002'} dataset = load_telco_churn_data () result = benchmark_models ( 'telco_churn' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ telco_churn ------------------------------------------------------------------------------ {'dataset_name': 'telco_churn'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( {'model_name': 'lr_ohe', 'fit_time_mean': '9.855', 'fit_time_std': '0.033', 'test_score_mean': '0.809', 'test_score_std': '0.014'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.078', 'fit_time_std': '0.001', 'test_score_mean': 'nan', 'test_score_std': 'nan'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['4186.3', '2653.65', '764.55', '5186', '3625.2', '7220.35', '1369.8', '3460.95', '6526.65', '2424.45', '89.5', '300.7', '144.95', '4689.15', '8564.75', '187.45', '2852.4', '1498.35', '1269.6', '5069.65', '313.6', '1342.15', '2510.2', '6287.25', '2888.7', '446.8', '1718.95', '1884.65', '1105.4', '539.85', '1647', '3152.5', '231.45', '4965.1', '254.5', '3389.25', '1852.85', '2624.25', '100.2', '4464.8', '5968.4', '953.65', '2265', '5817.45', '4495.65', '2201.75', '3121.45', '1800.05', '1905.7', '1160.45', '6710.5', '1601.2', '5568.35', '1097.15', '851.75', '4698.05', '1534.05', '2310.2', '6886.25', '8035.95', '2272.8', '2877.05', '4510.8', '74.5', '903.8', '1618.2', '1029.8', '1682.05', '6126.1', '670.35', '5749.8', '5376.4', '329.8', '5125.75', '967.9', '1147', '342.4', '315.3', '1035.7', '3608', '832.05', '2614.1', '2679.7', '6521.9', '1083', '874.2', '3825.85', '5746.75', '314.45', '1233.65', '7159.7', '488.65', '5720.35', '6218.45', '363.15', '1841.9', '1559.15', '2813.05', '617.85', '2627.35', '5073.1', '2007.85', '4972.1', '1433.8', '3437.45', '283.95', '846.8', '2263.4', '716.4', '7159.05', '7553.6', '1743.5', '3351.55', '46.3', '3097', '321.05', '343.95', '1873.7', '1263.85', '68.65', '3440.25', '2587.7', '2076.2', '4097.05', '6333.4', '292.4', '5717.85', '5560', '1423.15', '2936.25', '237.25', '6841.45', '1259.35', '29.95', '3471.1', '746.75', '396.3', '8477.7', '6871.7', '4965', '2117.25', '5931', '266.6', '2401.05', '7283.25', '1146.05', '393.15', '498.25', '469.25', '188.7', '1818.3', '1789.25', '677.05', '387.4', '1513.6', '3094.05', '163.7', '4447.55', '702.05', '7491.75', '2937.65', '70.15', '49.7', '3474.05', '950.2', '78.05', '7726.35', '951.55', '1028.75', '2048.8', '1078.9', '134.5', '1677.85', '3265.95', '21.05', '3983.6', '4599.15', '1451.9', '4145.25', '1321.3', '767.9', '1215.45', '6716.45', '1238.45', '2072.75', '4615.25', '141.1', '1274.05', '571.05', '408.5', '890.5', '1336.15', '72.1', '7213.75', '1843.05', '1399.35', '2666.75', '121.25', '2415.95', '564.4', '1671.6', '146.05', '4378.35', '3004.15', '1686.85', '4131.2', '746.5', '3379.25', '4146.05', '4630.2', '3460.3', '456.85', '320.45', '6224.8', '446.1', '3029.1', '4566.5', '1494.5', '1133.9', '3313.4', '3121.4', '2088.75', '7987.6', '1031.7', '3019.7', '1623.4', '129.6', '3168.75', '229.6', '1359.45', '1374.35', '1294.6', '2217.15', '1952.25', '2257.75', '151.65', '4674.4', '2768.35', '8404.9', '2513.5', '1790.65', '1313.55', '435.25', '1734.65', '1414.65', '1573.7', '5753.25', '263.65', '3990.6', '89.05', '3416.85', '1558.7', '2193.2', '7746.7', '6474.4', '75.7', '3645.75', '78.8', '1242.45', '1593.1', '1442.2', '118.5', '1258.3', '6283.3', '3160.55', '1850.65', '2429.1', '7919.8', '2586', '3488.15', '2966.95', '6506.15', '5443.65', '2365.15', '198', '3231.05', '5409.75', '6019.35', '6341.45', '50.65', '5894.5', '4685.55', '95.05', '152.7', '7222.75', '358.05', '3807.35', '966.55', '2799', '62.9', '930.05', '1801.9', '212.3', '93.45', '889.9', '886.7', '3771.5', '2753.8', '1622.45', '3082.1', '4523.25', '4862.5', '4746.05', '723.4', '2960.1', '171.45', '4400.75', '5706.3', '3562.5', '582.5', '5794.45', '688.5', '2094.65', '1698.55', '928.4', '4309.55', '4871.05', '3254.35', '168.6', '1510.3', '888.75', '788.05', '1140.05', '323.15', '3969.35', '6127.6', '6293.45', '105.5', '78.3', '1174.8', '68.8', '31.9', '865.85', '609.05', '2291.2', '184.95', '3865.6', '927.65', '356.1', '770.6', '1729.35', '347.4', '6567.9', '3023.55', '518.9', '524.35', '543', '228', '3249.4', '46.35', '688.65', '1411.35', '3767.4', '7767.25', '7475.85', '3019.1', '959.9', '68.45', '566.1', '365.8', '788.55', '746.05', '1054.75', '6841.3', '3846.75', '3089.6', '2236.2', '7455.45', '213.35', '2516.2', '4816.7', '8127.6', '279.5', '1380.4', '1388', '3145.15', '679', '3624.35', '110.05', '3320.75', '1268.85', '2019.8', '3186.7', '2444.25', '1177.95', '2011.4', '521.35', '7446.9', '118.4', '4748.7', '2303.35', '287.85', '1332.4', '6126.15', '4916.95', '221.1', '690.5', '2215.25', '5791.85', '3264.5', '331.35', '1394.55', '92.5', '4692.95', '3210.35', '5224.35', '4478.85', '541.15', '2082.95', '154.85', '7061.65', '839.65', '1329.15', '330.6', '321.65', '579', '418.25', '4133.95', '132.2', '140.1', '7323.15', '5270.6', '1489.3', '876.75', '2823', '4600.95', '1581.95', '150.75', '1389.6', '70.4', '606.55', '727.85', '7544', '2762.75', '990.3', '512.45', '8456.75', '93.85', '6603', '36.55', '688.2', '4433.3', '505.9', '3444.85', '152.3', '4018.35', '2308.6', '1178.25', '3165.6', '2301.15', '399.45', '655.3', '672.7', '2832.75', '5515.45', '2018.1', '4614.55', '615.35', '87.9', '123.8', '1663.5', '1821.95', '3078.1', '1579.7', '2660.2', '568.85', '3479.05', '1190.5', '3027.65', '2509.95', '853.1', '436.2', '4903.15', '5785.65', '2427.1', '4872.45', '44.05', '184.05', '49.25', '6465', '923.85', '1861.1', '1086.75', '6029', '838.7', '655.5', '701.3', '1863.8', '428.7', '6083.1', '3472.05', '7362.9', '4285.8', '3043.7', '994.8', '2333.05', '6994.8', '2839.65', '1426.4', '8086.4', '4213.35', '1958.95', '4222.95', '4126.2', '1047.7', '4217.8', '151.3', '2443.3', '7962.2', '996.45', '6302.85', '272.35', '267.6', '4968', '425.9', '7262', '7422.1', '3409.1', '101.45', '6388.65', '242.05', '2606.35', '546.95', '101.1', '706.6', '7108.2', '412.5', '233.65', '512.25', '3902.45', '3541.1', '1013.35', '3952.65', '2471.6', '1046.2', '3958.85', '1203.9', '2820.65', '335.65', '565.75', '7966.9', '5124.6', '6383.35', '593.2', '1715.1', '157.55', '3204.4', '3972.25', '74.25', '384.25', '2062.15', '239.75', '4947.55', '49.75', '76', '198.1', '467.85', '5067.45', '46', '762.5', '3270.25', '1887', '2312.55', '2868.15', '5290.45', '2211.8', '990.85', '3901.25', '4179.1', '1144.6', '551.95', '1242.2', '35', '1652.4', '3058.15', '1587.55', '3861.45', '1993.8', '6827.5', '4977.2', '6435.25', '2404.15', '1564.4', '4036', '6293.2', '181.7', '4586.15', '2731', '1506.4', '5588.8', '4378.9', '4759.55', '1304.8', '4096.9', '1245.6', '484.05', '1414.45', '5737.6', '1066.9', '1188.2', '1544.05', '1621.35', '43.15', '4653.25', '1108.2', '3921.1', '375.25', '242.8', '586.05', '964.35', '3541.4', '5438.9', '1558.65', '1727.5', '4009.2', '208.25', '478.1', '7344.45', '6401.25', '21.1', '174.75', '453.75', '7111.3', '256.6', '426.35', '7049.75', '1554', '5832.65', '3435.6', '6172', '7053.35', '5655.45', '5885.4', '874.8', '7723.9', '4068', '2669.45', '161.95', '201', '1835.3', '1490.4', '180.25', '6056.9', '808.95', '433.95', '3097.2', '3678.3', '48.55', '921.3', '76.4', '334.65', '3363.8', '836.35', '90.1', '1653.85', '2369.3', '3888.65', '1406.9', '1931.75', '125.95', '6654.1', '5229.8', '926.25', '2467.75', '2597.6', '5611.75', '4849.1', '4917.75', '5025', '6252.9', '70.8', '1266.1', '4378.8', '1348.5', '329.75', '4730.6', '3457.9', '2168.9', '811.8', '235.1', '5283.95', '6470.1', '54.5', '5432.2', '1074.3', '799.65', '5980.75', '387.2', '1439.35', '1653.45', '1563.95', '1724.15', '1156.35', '5985.75', '5502.55', '805.1', '4284.65', '4335.2', '4869.35', '7472.15', '1278.8', '1462.6', '1992.85', '1101.85', '411.45', '116.85', '3549.25', '1389.2', '4680.05', '5189.75', '4854.3', '56', '1306.3', '3512.5', '5231.2', '6741.15', '6383.9', '708.2', '4265', '3751.15', '1021.8', '450.65', '8175.9', '3110.1', '611.65', '704.3', '225.55', '827.7', '869.9', '2522.4', '80', '1681.6', '56.35', '68.2', '1423.65', '385.9', '624.15', '336.7', '5817.7', '6510.45', '812.4', '1982.1', '5150.55', '2613.4', '1687.95', '3252', '1374.2', '337.9', '3721.9', '152.6', '973.35', '1253.9', '828.2', '7317.1', '1118.8', '3770', '2871.5', '4882.8', '170.85', '91.1', '1500.5', '531.55', '4576.3', '2546.85', '350.1', '854.9', '338.9', '2974.5', '214.4', '4354.45', '5682.25', '292.8', '433.75', '1209.25', '4421.95', '159.35', '94.5', '825.7', '2498.4', '4590.35', '6503.2', '1448.8', '2309.55', '1061.6', '2568.55', '4828.05', '2343.85', '1363.25', '75.75', '1588.25', '5608.4', '673.2', '5000.05', '5453.4', '5424.25', '1992.95', '731.3', '1525.35', '1025.15', '231.8', '1231.85', '249.95', '2435.15', '1809.35', '620.35', '5357.75', '1446.8', '97', '6067.4', '1348.95', '6914.95', '6747.35', '2664.3', '3358.65', '4991.5', '2838.7', '261.65', '3382.3', '1847.55', '4634.35', '961.4', '2467.1', '1367.75', '926', '53.5', '369.25', '2157.3', '4519.5', '804.25', '770.4', '1413', '7325.1', '8425.15', '2530.4', '1230.9', '5916.45', '371.4', '4749.15', '5222.3', '2917.65', '1326.25', '7467.55', '1961.6', '317.75', '91.4', '3330.1', '4594.95', '3845.45', '7508.55', '4391.45', '208', '5082.8', '610.2', '7432.05', '6951.15', '700.45', '304.6', '1345.85', '3425.35', '197.7', '135.2', '455.3', '18.9', '37.2', '6613.65', '1072', '3952.45', '1216.35', '861.85', '1740.7', '2566.5', '1871.85', '4346.4', '5206.55', '1783.75', '7470.1', '436.6', '754.65', '912', '2203.1', '176.2', '4016.3', '3603.45', '95.45', '552.7', '4985.9', '4307.1', '5703.25', '3754.6', '1583.5', '2689.35', '3122.4', '94.55', '1165.55', '1709.15', '109.6', '2076.05', '675.6', '272', '411.25', '1937.4', '5121.3', '309.1', '5377.8', '4765', '1238.65', '4322.85', '7849.85', '7291.75', '3985.35', '638.55', '593.05', '402.85', '857.2', '150.6', '7679.65', '131.05', '625.05', '2275.1', '4904.2', '7251.7', '481.1', '1818.9', '653.25', '44.95', '5509.3', '3342', '552.9', '324.2', '400.3', '5327.25', '617.15', '3373.4', '1938.05', '244.1', '5950.2', '4367.35', '6130.95', '4025.5', '2510.7', '475.1', '4527.45', '3834.4', '832.3', '5528.9', '79.5', '2515.3', '5420.65', '3775.85', '2324.7', '104.2', '5780.7', '4368.95', '1058.6', '382.8', '5986.45', '4226.7', '2537', '6029.9', '1501.75', '669.45', '1522.65', '8547.15', '4993.4', '1298.7', '1454.15', '477.05', '74.1', '1555.65', '2566.3', '7107', '1194.3', '3937.45', '146.65', '216.9', '4138.7', '1825.5', '820.5', '788.35', '368.1', '1067.15', '1245.05', '3088.25', '6581.9', '6843.15', '4663.4', '4904.85', '330.15', '2774.55', '414.1', '620.75', '6129.2', '524.5', '4504.9', '1081.45', '535.55', '5068.05', '1767.35', '1211.65', '2431.35', '2869.85', '5567.45', '2509.25', '3017.65', '1934.45', '4103.9', '3629.2', '299.7', '3958.2', '6590.8', '394.85', '255.35', '6431.05', '1013.2', '1171.5', '3970.4', '392.5', '462.8', '1287.85', '6588.95', '109.8', '896.75', '218.5', '5848.6', '2234.95', '1957.1', '5974.3', '679.3', '25.3', '7168.25', '5275.8', '5625.55', '259.4', '1509.9', '593.85', '1073.3', '2647.2', '4688.65', '3467', '1451.6', '6578.55', '422.3', '325.45', '3198.6', '193.05', '3058.65', '1288', '4060.9', '3822.45', '3348.1', '217.1', '122.7', '3314.15', '5398.6', '1292.2', '106.8', '8468.2', '706.85', '773.65', '7348.8', '3353.4', '546.85', '3734.25', '742.9', '1393.6', '7129.45', '1096.6', '6306.5', '5487', '5440.9', '5124.55', '3656.25', '799', '1927.3', '4860.35', '4747.85', '6314.35', '6844.5', '497.55', '5497.05', '5163', '114.7', '1108', '2181.75', '5746.15', '1474.35', '5873.75', '3371.75', '1153.25', '58.15', '224.05', '1036', '950.75', '908.15', '3126.85', '40.2', '559.2', '1005.7', '6912.7', '473.9', '558.8', '4451.85', '6075.9', '3370.2', '3442.8', '2287.25', '2745.7', '747.2', '1023.75', '7550.3', '3094.65', '4541.9', '571.75', '1415', '3626.35', '3581.6', '1303.5', '331.9', '2033.05', '734.35', '4370.75', '2536.55', '3339.05', '2911.3', '4480.7', '4299.95', '2423.4', '818.45', '1152.8', '5405.8', '795.65', '5769.75', '6697.2', '452.2', '6001.45', '4509.5', '1820.9', '5764.7', '683.75', '3219.75', '633.45', '5696.6', '7882.25', '681.4', '1077.5', '770.5', '4904.25', '196.75', '1841.2', '5639.05', '154.55', '3551.65', '4025.6', '971.3', '7985.9', '141.6', '7303.05', '543.8', '1505.05', '4048.95', '4539.6', '2198.9', '827.05', '428.45', '2044.95', '5566.4', '3465.7', '1423.05', '692.55', '1438.05', '1192.3', '2724.25', '2723.4', '255.5', '1600.25', '289.3', '273.75', '5360.75', '573.15', '61.7', '662.95', '868.5', '567.45', '274.7', '6766.95', '1198.8', '445.95', '80.3', '31.35', '3623.95', '1521.2', '1939.35', '1334.5', '1384.75', '48.95', '1500.25', '63', '4026.4', '420.2', '3320.6', '3021.45', '3600.65', '467.5', '2296.25', '1570.7', '3141.7', '786.3', '1390.6', '1051.9', '385', '4458.15', '7713.55', '3091.75', '3735.45', '2954.5', '1221.65', '1147.45', '47.5', '1797.1', '813.3', '42.45', '4479.2', '1406', '1875.55', '1041.8', '613.4', '1441.8', '970.4', '195.65', '4473.45', '80.95', '1509.8', '79.95', '1218.45', '4414.3', '2413.05', '4135', '3377.8', '2077.95', '2361.8', '31.2', '7878.3', '223.9', '1713.1', '214.55', '550.6', '330.25', '447.75', '20.8', '3306.85', '5812.6', '2209.75', '1364.75', '4577.75', '167.5', '3618.7', '2847.4', '7930.55', '4600.7', '1426.45', '6281.45', '54.3', '44.1', '2075.1', '4122.65', '41.2', '764.95', '1868.4', '1680.25', '2165.05', '426.65', '1940.85', '450.9', '2550.9', '2239.4', '284.35', '3457.45', '444.75', '2460.55', '632.2', '151.8', '6296.75', '696.8', '8289.2', '249.55', '1046.1', '1900.25', '4577.9', '5029.05', '221.35', '712.25', '187.75', '5265.1', '3540.65', '1849.95', '2983.8', '7634.8', '2096.1', '958.45', '107.1', '6428.4', '198.6', '3557.7', '1875.25', '5060.9', '685.55', '1322.85', '92.25', '140.95', '4089.45', '5135.15', '624.6', '6227.5', '267.4', '680.05', '69.15', '164.85', '3205.6', '1732.6', '3046.4', '68.35', '59.05', '74', '3597.5', '7943.45', '6479.4', '5567.55', '5629.15', '147.75', '1277.5', '2227.8', '1297.35', '486.05', '5437.1', '2149.05', '6312.9', '665.45', '658.1', '684.4', '1838.15', '1842.7', '1058.25', '4003.85', '109.25', '3634.8', '4713.4', '5714.25', '1400.3', '1363.45', '574.5', '5586.45', '2766.4', '3042.25', '4804.75', '2282.55', '471.55', '997.65', '467.7', '44.7', '3893.6', '1573.05', '70.75', '1596.6', '6081.4', '1309', '474.9', '1530.6', '2021.2', '2724.6', '1021.75', '2136.9', '2686.05', '1387', '4627.8', '4639.45', '1434.1', '715', '4620.4', '331.3', '583.45', '5552.5', '599.3', '201.1', '1867.7', '294.2', '638', '1747.2', '233.7', '2283.15', '1054.6', '5401.9', '2244.95', '5576.3', '4913.3', '1133.65', '188.1', '660.05', '992.7', '7854.9', '581.85', '168.2', '4953.25', '847.25', '1218.65', '7430.75', '2745.2', '346.45', '226.8', '321.4', '3766.2', '1872.2', '1042.65', '5731.4', '6725.3', '786.5', '6330.4', '2007.25', '2049.05', '368.85', '555.4', '2782.4', '1798.65', '196.15', '5680.9', '4641.1', '6941.2', '519.15', '2633.3', '2748.7', '1261.35', '71.25', '1614.7', '1776.55', '3190.25', '3092', '1493.75', '5025.85', '989.45', '418.4', '2356.75', '2540.1', '5311.85', '91.45', '2790.65', '2053.05', '6373.1', '779.25', '2642.05', '7047.5', '139.75', '8152.3', '223.6', '810.2', '1328.35', '7904.25', '81.05', '646.05', '3021.6', '1341.5', '5084.65', '5956.85', '7299.65', '278.4', '4631.7', '1149.65', '248.4', '6981.35', '141.7', '165.2', '2282.95', '1263.9', '181.6', '3217.55', '7030.65', '882.55', '5500.6', '7629.85', '901.25', '6418.9', '1388.75', '1639.3', '4070.95', '969.85', '1888.25', '1155.6', '4304.5', '4824.45', '68.95', '684.85', '461.3', '447.9', '7661.8', '81.25', '548.9', '1837.7', '2453.3', '367.55', '466.6', '6851.65', '4783.5', '468.35', '3974.7', '281', '169.45', '1633', '438.05', '73.05', '826.1', '8277.05', '5918.8', '358.5', '465.05', '6725.5', '6671.7', '2191.15', '3023.85', '1748.9', '77.6', '314.55', '2970.8', '1169.35', '68.5', '2106.05', '1779.95', '4819.75', '567.8', '1683.6', '5711.05', '688', '198.7', '4014', '401.95', '1445.3', '1899.65', '818.05', '803.3', '5483.9', '3326.2', '2979.2', '4145.9', '4664.5', '389.1', '3067.2', '2479.25', '1057', '1406.65', '2093.9', '223.75', '6347.55', '1510.5', '1424.4', '7856', '5471.75', '6423', '1261.7'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['8333.95', '2879.9', '2647.2', '2387.75', '6139.5', '1397.3', '795.65', '2178.6', '926', '759.35', '1090.1', '6068.65', '5031', '739.35', '2053.05', '692.1', '369.6', '422.6', '4539.6', '2448.5', '3078.1', '6161.9', '2423.4', '572.85', '1888.65', '1778.5', '109.3', '1380.4', '2871.5', '706.6', '1082.8', '533.6', '1990.5', '140.95', '44.05', '897.75', '3623.95', '2354.8', '6557.75', '5043.2', '2651.2', '2309.55', '676.7', '712.25', '2484', '3741.85', '2236.2', '1863.8', '4735.2', '1021.8', '1504.05', '3687.75', '168.9', '2139.1', '2566.5', '1001.5', '8192.6', '4368.95', '3483.45', '334.65', '1210.4', '150.6', '268.35', '6322.1', '1387', '1268.85', '1031.7', '3263.9', '880.05', '75.6', '130.5', '6707.15', '532.1', '1851.45', '2807.1', '109.2', '3950.85', '255.55', '5686.4', '3423.5', '5958.85', '5683.6', '755.5', '1899.65', '232.4', '5774.55', '6130.85', '6309.65', '1275.65', '3767.4', '945.7', '3420.5', '1444.65', '244.45', '505.9', '5036.3', '173', '679.85', '4513.65', '2078.95', '653.95', '1094.35', '668.4', '7288.4', '7149.35', '1177.95', '2524.45', '3541.35', '515.45', '2075.1', '1500.95', '2208.75', '1608.15', '723.3', '6860.6', '617.85', '1388', '868.5', '1973.75', '5746.75', '4869.35', '6449.15', '7028.5', '576.95', '741.5', '916', '2696.55', '2212.55', '2117.2', '7804.15', '646.85', '6137', '278.85', '7171.7', '174.8', '214.55', '8312.4', '825.1', '3687.85', '4520.15', '5681.1', '475.7', '20.8', '2001.5', '302.45', '1747.2', '174.2', '5776.45', '1166.7', '1359.7', '8126.65', '936.7', '27.55', '4741.45', '1509.9', '4913.3', '1021.55', '2276.1', '18.8', '6840.95', '4303.65', '732.5', '48.75', '3557.7', '1974.8', '3901.25', '3713.95', '102.45', '76.95', '1311.75', '7482.1', '1470.05', '6519.75', '5886.85', '4494.65', '433.5', '412.55', '3512.15', '6373.1', '7542.25', '2348.45', '4014.2', '170.9', '2656.3', '5193.2', '777.3', '6179.35', '3273.95', '2136.9', '294.9', '174.7', '6029.9', '1299.1', '693.3', '957.1', '2357.75', '2781.85', '3862.55', '3439', '7238.6', '847.25', '401.85', '2109.35', '6501.35', '3704.15', '104.2', '5720.35', '6588.95', '1328.15', '72', '994.55', '244.75', '6176.6', '184.15', '45.55', '5102.35', '1612.2', '4925.35', '21', '4526.85', '2839.45', '3139.8', '6770.5', '1566.75', '25.75', '939.8', '2716.3', '4461.85', '351.55', '78.45', '55.05', '1258.6', '385.55', '2003.6', '2896.55', '2034.25', '1901.05', '711.95', '194.2', '454.05', '3894.4', '377.85', '3638.25', '47.7', '7283.25', '4211.55', '1676.95', '6671.7', '19.05', '436.9', '163.55', '2603.1', '1297.35', '1776.45', '4631.7', '5264.25', '746.75', '3027.25', '4445.3', '669.45', '3236.35', '2193', '6109.65', '2684.85', '851.2', '7035.6', '4885.85', '1434.6', '982.95', '2333.05', '2511.3', '1129.35', '1004.5', '5084.65', '3004.15', '71.55', '7953.25', '2597.6', '3527.6', '2338.35', '5497.05', '4386.2', '2326.05', '497.6', '6110.75', '2874.45', '3301.05', '475.25', '583.45', '2341.5', '7227.45', '326.8', '682.1', '8003.8', '2209.75', '2755.35', '978', '6330.4', '49', '98.35', '7714.65', '1138.8', '71.25', '1303.5', '1017.35', '35.55', '2576.8', '99.75', '85.8', '6448.05', '1329.15', '296.1', '5386.5', '2727.8', '1653.45', '6078.75', '5301.1', '1379.8', '1357.1', '153.95', '2168.9', '5885.4', '1441.8', '1266.4', '1901', '641.25', '1623.4', '673.25', '707.5', '697.25', '678.2', '414.1', '7007.6', '6921.7', '1836.9', '1859.1', '4652.4', '1234.6', '1081.25', '5860.7', '96.05', '453.4', '521.8', '1247.75', '247.25', '186.3', '134.5', '451.1', '4428.45', '387.4', '6743.55', '137.95', '4029.95', '1006.9', '7845.8', '1326.25', '452.8', '1916', '1750.7', '219', '1156.55', '4122.9', '571.05', '245.2', '1679.4', '2790.65', '612.95', '5731.45', '929.3', '2361.8', '5448.6', '4653.25', '73', '2727.3', '6164.7', '6333.8', '193.8', '3887.85', '7711.45', '1937.4', '55.45', '3857.1', '1414.2', '1683.7', '2020.9', '1813.1', '3861.45', '1253.65', '1108', '7711.25', '3273.8', '298.35', '493.95', '705.45', '933.3', '30.5', '3865.45', '1537.85', '819.95', '4542.35', '3956.7', '2602.9', '8277.05', '714.15', '2447.45', '4759.55', '6758.45', '80.2', '4807.35', '267', '808.95', '1790.35', '4547.25', '2598.95', '1742.95', '2448.75', '931.75', '1442', '7181.25', '5071.05', '659.65', '3001.2', '6631.85', '2697.4', '89.3', '934.1', '1483.25', '1160.45', '7266.95', '6316.2', '930.05', '762.5', '7508.55', '2094.9', '757.1', '4266.4', '3632', '4527.45', '601.25', '2416.1', '3581.6', '5315.8', '864.2', '6713.2', '5811.8', '469.85', '5764.7', '419.7', '6747.35', '741', '2264.5', '1032', '250.8', '790.15', '784.45', '790.7', '289.1', '1734.5', '828.85', '1093.2', '389.6', '1233.15', '4398.15', '572.45', '51.6', '872.65', '191.35', '7110.75', '4442.75', '3838.75', '865.05', '223.75', '1704.95', '1127.35', '6194.1', '583', '5305.05', '313.45', '2398.4', '930.9', '81.95', '1011.8', '928.4', '116.95', '1875.55', '90.85', '7556.9', '6081.4', '1761.05', '125.5', '1519', '435.25', '438.25', '1901.65', '412.1', '829.55', '1331.05', '3775.85', '89.9', '7493.05', '5931', '1045.25', '2647.1', '5986.55', '1797.1', '139.4', '4754.3', '3563.8', '6710.5', '152.45', '3431.75', '92.5', '1779.95', '5121.3', '810.7', '3254.35', '341.35', '415.05', '1802.15', '1250.1', '3343.15', '78.9', '4922.4', '7475.85', '1432.55', '2165.05', '4549.45', '486.2', '1013.6', '4891.5', '1078.9', '567.45', '1111.2', '7904.25', '5025.8', '86.35', '877.35', '5025', '3432.9', '788.55', '24.2', '572.2', '4995.35', '185.2', '3263.6', '89.1', '327.45', '1174.8', '84.85', '3053', '2823', '4911.05', '6339.3', '2530.4', '7726.35', '946.95', '498.25', '1216.6', '2745.7', '1992.55', '1070.15', '1444.05', '814.75', '1929', '385', '6586.85', '217.1', '1790.65', '1625', '198.25', '1173.35', '3366.05', '1683.6', '781.4', '6428.4', '294.2', '162.3', '5720.95', '34.8', '5231.2', '1623.15', '1563.9', '60.15', '3953.15', '169.65', '8035.95', '6312.9', '4484.05', '5231.3', '5034.05', '5375.15', '200.2', '319.6', '1451.9', '754.5', '4707.85', '1442.6', '222.65', '7173.15', '1810.55', '252', '3886.85', '560.6', '330.6', '723.35', '1800.05', '7053.35', '6205.5', '6859.5', '4903.15', '2043.45', '3902.45', '7320.9', '1818.3', '3653.35', '2510.7', '7854.15', '4882.8', '89.25', '5762.95', '1267.05', '2275.1', '564.4', '46.35', '5614.45', '1061.6', '7840.6', '291.45', '5985', '4779.45', '543.8', '93.4', '74.25', '2345.2', '3365.4', '3580.3', '1374.2', '5029.05', '29.95', '1270.25', '5139.65', '3342.45', '799', '1317.95', '1652.4', '1059.55', '157.55', '3229.4', '7291.75', '6369.45', '1131.5', '949.85', '6292.7', '452.2', '4533.7', '842.25', '1961.6', '4508.65', '1054.6', '7279.35', '1633', '270.8', '4713.4', '1558.65', '1146.65', '4036.85', '1902', '587.4', '558.8', '1074.3', '109.6', '797.1', '399.45', '2747.2', '5016.65', '7774.05', '501', '5976.9', '3766.2', '31.35', '493.65', '248.4', '4993.4', '4991.5', '3627.3', '3954.1', '510.8', '829.3', '550.35', '1103.25', '3847.6', '3121.45', '461.7', '3753.2', '5676.65', '873.4', '2550.9', '959.9', '370.65', '313', '6066.55', '528.45', '536.4', '7285.7', '3762', '3330.1', '5757.2', '1654.75', '2264.05', '1212.1', '7470.1', '164.6', '1538.6', '7748.75', '5861.75', '941', '5645.8', '1952.8', '2688.45', '853', '6302.85', '713.1', '1641.8', '918.6', '2614.1', '257', '5743.05', '914', '1037.75', '756.4', '5980.75', '172.35', '658.1', '364.55', '832.05', '5536.5', '5817.45', '846.8', '2479.25', '521.3', '79.7', '111.65', '1364.3', '3036.75', '2796.35', '6733.15', '1545.4', '198.5', '435', '1244.5', '114.15', '4138.9', '7344.45', '1079.45', '6463.15', '52', '1194.3', '3902.6', '1090.6', '5822.3', '5376.4', '2375.2', '1820.9', '1271.8', '1049.6', '667.7', '4863.85', '4408.45', '2908.2', '1776', '1312.45', '8166.8', '950.2', '3119.9', '235.65', '446.8', '5509.3', '3969.35', '94.45', '786.5', '8071.05', '253', '3077', '8248.5', '44.1', '2320.8', '3126.45', '3014.65', '5610.25', '85.7', '522.35', '7082.5', '964.35', '2263.4', '6951.15', '339.9', '1261', '168.2', '1092.35', '436.2', '301.9', '348.15', '2653.65', '2723.4', '6885.75', '168.65', '2936.25', '1498.2', '773.65', '605.9', '95.6', '2985.25', '4116.9', '1893.95', '1837.9', '3520.75', '1070.5', '696.8', '533.9', '61.15', '6562.9', '75.1', '3895.35', '2054.4', '4310.35', '23.45', '2180.55', '4220.35', '396.1', '2835.9', '1924.1', '3166.9', '2351.8', '3454.6', '2624.25', '3238.4', '8496.7', '1785.65', '204.55', '2467.1', '2933.2', '964.9', '1743.9', '910.45', '4285.8', '764.55', '6393.65', '75.55', '704.3', '4378.9', '997.65', '2083.1', '2049.05', '802.35', '297.3', '413.25', '3474.45', '4348.65', '788.35', '577.15', '2867.75', '3562.5', '7690.9', '745.3', '5897.4', '5309.5', '5794.45', '4055.5', '587.7', '291.9', '3593.8', '635.6', '6812.95', '1021.75', '3899.05', '1536.75', '1992.95', '3650.35', '3795.45', '168.6', '1335.2', '81.05', '5224.35', '2937.65', '1794.8', '784.25', '373', '3389.25', '345.9', '5780.7', '4421.95', '776.25', '4946.05', '242.4', '2292.75', '309.4', '3092', '1014.25', '1790.15', '5812', '7932.5', '5135.15', '5166.2', '552.9', '3162.65', '1209.25', '1217.25', '6416.7', '5265.55', '2728.6', '3807.35', '1696.2', '8164.1', '1743.05', '524.5', '5744.35', '1510.3', '76.65', '119.75', '49.25', '3682.45', '5914.4', '5012.1', '3019.7', '74', '6725.5', '2852.4', '3045.75', '5810.9', '306.05', '2234.55', '5727.15', '3875.4', '2708.2', '5453.4', '5243.05', '2347.9', '973.55', '521.1', '3532', '161.65', '2217.15', '4764', '6503.2', '482.8', '1218.45', '294.5', '2193.65', '442.6', '993.15', '2119.5', '5388.15', '2000.2', '2409.9', '509.3', '475', '106.9', '1434.1', '70.8', '875.55', '233.55', '5459.2', '5588.8', '3551.65', '2335.3', '1826.7', '44.45', '225.75', '2201.75', '3009.5', '1067.65', '3482.85', '918.7', '5625.55', '1025.95', '6441.4', '651.4', '1414.65', '502.6', '1189.9', '7752.05', '552.7', '3512.5', '6383.35', '116.65', '1490.95', '429.55', '4267.15', '1423.05', '6869.7', '763.1', '3046.05', '1463.5', '185.6', '655.9', '673.2', '1151.55', '749.35', '472.25', '4946.7', '172.85', '780.2', '4415.75', '4616.05', '55.3', '163.6', '5405.8', '7156.2', '184.95', '320.45', '4555.2', '3990.6', '853.1', '104.3', '631.4', '4949.1', '3729.6', '5232.9', '1226.45', '4554.85', '6487.2', '1230.9', '762.25', '199.85', '1221.65', '208.45', '1975.85', '6129.2', '729.95', '84.4', '1074.65', '440.2', '3369.25', '4131.95', '4820.55', '199.45', '1348.9', '5969.85', '3686.05', '488.65', '606.55', '690.5', '5921.35', '865.8', '514', '1401.15', '791.75', '827.3', '7511.65', '611.45', '1299.8', '1971.15', '1169.35', '1013.35', '1327.4', '1907.85', '75.8', '4097.05', '3008.55', '1238.65', '6597.25', '139.25', '1958.45', '1871.85', '1825.5', '84.8', '1949.4', '463.6', '4307.1', '669.85', '6333.4', '8109.8', '5969.3', '6849.75', '4820.15', '5042.75', '6700.05', '999.8', '4671.7', '2076.05', '855.3', '2016.3', '4575.35', '7446.9', '7629.85', '1095.65', '1618.2', '552.1', '51.2', '8310.55', '1818.9', '5981.65', '2106.3', '1630.4', '477.05', '7303.05', '1281', '3273.55', '2628.6', '189.45', '4872.45', '469.25', '6441.85', '5607.75', '4889.3', '5753.25', '4676.7', '1621.35', '914.6', '970.85', '349.8', '923.5', '3105.55', '736.8', '1278.8', '7966.9', '824.85', '44.95', '8684.8', '3373.4', '5913.95', '573.3', '593.75', '1593.1', '249.4', '7806.5', '4059.35', '1597.25', '129.15', '53.15', '268.4', '4323.45', '4367.35', '3475.55', '1555.65', '1240.15', '1025.05', '3777.15', '5661.7', '418.8', '6185.15', '24.6', '226.8', '3815.4', '313.4', '417', '272.95', '1750.85', '7544.3', '6058.95', '5224.5', '2877.95', '4018.55', '2010.95', '2462.55', '5692.65', '527.5', '59.05', '2791.5', '6668.05', '54.7', '338.1', '3097', '5264.3', '38.25', '6976.75', '931.55', '168.5', '857.25', '1582.75', '5064.85', '1549.75', '94', '2139.2', '1395.05', '108.7', '937.5', '1356.7', '579.4', '5991.05', '3616.25', '7467.55', '3021.3', '1637.3', '7245.9', '4399.5', '3339.05', '163.2', '2433.5', '861.85', '2997.45', '2076.2', '6293.2', '2626.15', '442.45', '2111.3', '5581.05', '792.15', '6143.15', '3027.4', '3320.75', '818.45', '679', '1068.15', '7195.35', '7159.05', '295.55', '419.35', '5125.5', '6254.2', '6148.45', '124.4', '1559.25', '7719.5', '1115.6', '439.75', '144.15', '7111.3', '6511.8', '1651.95', '478.75', '6363.45', '1011.05', '6094.25', '5029.2', '1215.8', '1375.6', '272', '1932.75', '4671.65', '3409.1', '3944.5', '55.55', '5174.35', '1025.15', '1601.2', '35.45', '2939.8', '155.9', '1496.9', '159.45', '307', '5435', '79.9', '475.2', '536.35', '5515.8', '2215.25', '1494.5', '2766.4', '743.75', '1980.3', '979.05', '5953', '3043.7', '2619.15', '1566.9', '6890', '313.6', '6822.15', '7689.95', '1035.5', '411.15', '331.9', '7467.5', '5000.2', '161.95', '1011.5', '1748.55', '502.85', '311.6', '563.65', '6994.6', '79.65', '5083.55', '743.3', '727.85', '1228.65', '1064.65', '1442.65', '1859.2', '31.2', '167.2', '785.75', '424.5', '1215.1', '5555.3', '518.9', '3915.4', '1764.75', '4209.95', '3110.1', '58.3', '90.55', '1445.3', '8013.55', '8317.95', '2245.4', '4953.25', '948.9', '3751.15', '44.35', '6083.1', '2193.2', '2070.05', '1376.5', '335.4', '324.6', '8306.05', '632.2', '593.05', '1740.8', '1416.2', '25.3', '6328.7', '6460.55', '8405', '2042.05', '80.95', '79.95', '837.5', '1532.45', '5809.75', '2062.15', '765.15', '3912.9', '609.9', '160.75', '331.85', '4323.35', '7674.55', '777.35', '223.6', '342.4', '2774.55', '827.45', '4914.9', '4853.75', '2215', '1358.85', '600.15', '2122.45', '4896.35', '834.15', '2762.75', '4178.65', '295.65', '1373.05', '1489.3', '2169.4', '369.15', '4304', '7943.45', '50.8', '3708.4', '187.75', '2809.05', '134.6', '1914.9', '6004.85', '470', '7209', '239.05', '1007.9', '1346.9', '2033.85', '3184.25', '653.15', '2289.9', '639.7', '3888.65', '4326.8', '125.95', '1148.1', '2157.95', '695.85', '252.75', '3207.55', '7611.55', '2038.7', '4236.6', '5336.35', '1646.45', '1281.25', '2028.8', '6914.95', '5040.2', '2633.3', '821.6', '2515.3', '2421.6', '6506.15', '181.1', '3134.7', '1553.95', '2257.75', '7108.2', '5611.75', '422.4', '1712.9', '772.85', '1400.85', '1604.5', '267.4', '220.35', '5427.05', '121.25', '1652.1', '973.45', '5270.6', '838.5', '2511.55', '4615.25', '2250.65', '2274.35', '229.4', '120.25', '1208.15', '3141.7', '2149.05', '2745.2', '3035.35', '4298.45', '6000.1', '864.55', '1727.5', '3948.45', '4639.45', '860.85', '4641.1', '2603.95', '1029.35', '4904.25', '2135.5', '5121.75', '3913.3', '1940.85', '1341.5', '1760.25', '2568.15', '181.6', '7040.85', '300.8', '3043.6', '4308.25', '7895.15', '114.1', '1416.75', '552.95', '3255.35', '144', '3213.75', '6287.3', '5576.3', '3645.05', '6430.9', '6215.35', '357.75', '142.35', '806.95', '126.05', '7707.7', '742.95', '673.1', '107.05', '6028.95', '4627.65', '659.35', '294.95', '34.75', '5676', '856.35', '7432.05', '531.55', '1790.6', '7554.05', '2588.95', '443.9', '903.7', '154.55', '3199', '255.35', '5574.35', '923.1', '819.55', '4146.05', '2239.65', '528.35', '6392.85', '1553.2', '1332.4', '670.35', '1759.55', '1117.55', '3019.1', '547.65', '4830.25', '1244.8', '336.15', '2862.55', '1422.05', '3770', '3444.85', '8250', '221.7', '6585.35', '7984.15', '445.95', '4042.2', '4086.3', '4059.85', '943.1', '606.25', '2879.2', '2287.25', '7852.4', '6555.2', '239.75', '4453.3', '8477.7', '762.1', '1505.15', '466.6', '1742.45', '770.6', '1992.2', '5662.25', '6253', '633.4', '2296.25', '2882.25', '1790.8', '1625.65', '5438.9', '4816.7', '2092.9', '697.65', '3784', '7634.25', '2434.45', '7898.45', '237.7', '3801.3', '141.7', '614.45', '394.1', '1048.85', '1358.6', '470.95', '8240.85', '145.4', '360.35', '1445.95', '3168.75', '795.15', '1747.85', '5511.65', '3765.05', '1857.75', '4895.1', '3515.25'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['777.35', '319.6', '2839.95', '7806.6', '911.6', '1252.85', '527.35', '1270.55', '74', '371.65', '71.2', '5817.7', '8033.1', '4362.05', '400.3', '8152.3', '2184.85', '472.25', '439.2', '2029.05', '731.3', '357.15', '2288.7', '1358.6', '6463.15', '6707.15', '165.35', '5511.65', '3771.5', '498.1', '2588.95', '1414.45', '6869.7', '299.2', '4541.9', '6109.65', '1105.4', '1103.25', '575.45', '38.25', '1240.8', '265.35', '3109.9', '98.35', '465.7', '323.45', '6674.65', '1938.05', '8309.55', '882.55', '6735.05', '7843.55', '344.5', '394.1', '2275.1', '369.6', '6652.45', '1888.65', '1316.9', '470.95', '5991.05', '5435.6', '2763.35', '1212.85', '1210.4', '655.85', '1039.45', '253.9', '7397', '644.5', '5815.15', '3330.1', '1178.4', '653.15', '654.5', '2020.9', '539.85', '197.4', '146.9', '4985.9', '4793.8', '876.15', '5321.25', '5567.55', '472.65', '1597.4', '1242.25', '2462.6', '2686.05', '3165.6', '6129.65', '1852.85', '7061.65', '3457.9', '6993.65', '538.2', '1375.6', '342.3', '1017.35', '420.2', '5154.5', '60.15', '3886.05', '2660.2', '1233.4', '3460.95', '551.35', '5731.45', '1588.7', '357.7', '3418.2', '4370.75', '196.9', '2624.25', '1255.1', '4040.65', '6363.45', '2496.7', '6561.25', '1020.2', '212.4', '865.85', '865.8', '1917.1', '765.45', '669', '3066.45', '705.45', '7110.75', '1133.7', '4808.7', '2198.3', '2080.1', '3091.75', '162.3', '3772.5', '106.55', '97.5', '177.4', '644.35', '1958.45', '2879.9', '5948.7', '6588.95', '4684.3', '312.7', '1422.05', '49.25', '853', '5676', '297.3', '7895.15', '1559.15', '5290.45', '2540.1', '1411.65', '958.25', '2095', '118.3', '3342.45', '5655.45', '426.65', '185.6', '682.1', '447.9', '115.95', '2874.15', '1778.5', '2967.35', '2871.5', '44.2', '1671.6', '2789.7', '5886.85', '524.35', '839.65', '1651.95', '1517.5', '267.35', '180.3', '577.6', '6151.9', '876.75', '2438.6', '1625.65', '2627.35', '764.55', '504.05', '1640', '6471.85', '715', '4179.1', '2130.45', '1563.9', '576.7', '1231.85', '973.45', '313', '142.35', '3858.05', '579.4', '2169.75', '3403.4', '1004.35', '44.3', '818.05', '1338.15', '412.55', '224.05', '2070.6', '1664.3', '609.05', '1144.5', '673.1', '544.55', '3474.45', '772.4', '936.7', '1564.4', '426.35', '1074.65', '385', '78.95', '3579.15', '2347.85', '7344.45', '5360.75', '4888.2', '854.9', '790', '1776.45', '706.85', '684.85', '799', '2583.75', '2618.3', '36.55', '1205.05', '4903.15', '3877.65', '681.4', '1071.6', '303.7', '7129.45', '7082.85', '20.85', '688.65', '1336.65', '3092.65', '948.9', '492.55', '168.9', '286.8', '1724.15', '4107.3', '3320.75', '5731.4', '255.25', '1620.25', '4116.8', '452.7', '2157.5', '3019.1', '185.4', '4116.15', '740', '1790.15', '3145.15', '2292.75', '1414.8', '708.8', '6141.65', '93.85', '2248.05', '8100.55', '1626.05', '759.55', '1901', '2249.1', '3478.75', '341.45', '3541.1', '3895.35', '179.85', '4284.2', '2659.45', '1739.6', '381.3', '279.5', '2107.15', '3587.25', '583.3', '2878.75', '7413.55', '3082.1', '2234.55', '890.35', '3017.65', '350.35', '609.65', '35.85', '4391.45', '543.8', '523.5', '3565.65', '1021.75', '7156.2', '929.3', '371.6', '487.95', '6017.65', '4459.8', '3635.15', '3624.3', '194.55', '3128.8', '374.5', '150.6', '7880.25', '1900.25', '365.35', '6474.4', '1007.8', '7181.25', '78.25', '1849.95', '156.85', '189.95', '1592.35', '85.15', '6148.45', '4779.45', '7035.6', '3529.95', '1285.05', '8165.1', '765.15', '1011.8', '5831.2', '3365.4', '44.15', '5436.45', '4421.95', '973.35', '247', '2187.55', '7346.2', '702', '2635', '4965', '3958.85', '852.7', '279.2', '165.45', '1534.75', '8594.4', '5121.75', '1810.85', '239.05', '811.65', '871.4', '1459.35', '3605.6', '1173.35', '248.4', '2070.75', '7261.25', '6010.05', '4750.95', '2724.6', '3107.3', '740.55', '1611.65', '1442.6', '1164.3', '8672.45', '93.45', '1207', '469.85', '1621.35', '819.95', '653.95', '3437.5', '2303.35', '1083.7', '942.95', '143.35', '771.95', '7544.3', '3373.4', '6052.25', '341.35', '4045.65', '7007.6', '2065.15', '1555.65', '1296.8', '1126.35', '3944.5', '4995.35', '950.75', '3119.9', '1035.5', '3656.25', '1540.35', '438.9', '4526.85', '4438.2', '5986.45', '2919.85', '4805.65', '5377.8', '208.7', '2728.6', '4729.3', '440.2', '35.45', '1734.2', '6411.25', '58.85', '7372.65', '229.5', '134.7', '8166.8', '847.3', '1868.4', '6654.1', '3627.3', '3415.25', '169.65', '1363.45', '6895.5', '2135.5', '139.25', '3355.65', '917.15', '1033', '610.2', '2796.45', '2960.1', '3822.45', '33.2', '1714.95', '6603.8', '3965.05', '75.5', '6989.7', '1398.6', '2763', '666', '6239.05', '3725.5', '4908.25', '3219.75', '176.2', '2586', '2812.2', '2012.7', '2007.85', '217.45', '2473.95', '2497.35', '6325.25', '5483.9', '324.6', '418.8', '3902.6', '903.6', '422.6', '220.1', '362.2', '2964.05', '815.55', '1293.8', '1451.6', '91.45', '85.55', '3834.4', '2553.35', '1809.35', '2614.1', '1123.65', '55.8', '1826.7', '201', '1426.4', '5025', '408.5', '4040.2', '119.5', '1174.8', '795.15', '5673.7', '4524.05', '264.85', '446.05', '2848.45', '1696.2', '6425.65', '1037.75', '4237.5', '5574.35', '864.55', '1445.95', '2774.55', '3777.15', '89.75', '1905.7', '2847.4', '2001.5', '2936.25', '1087.45', '7611.85', '465.05', '301.9', '1054.75', '1515.1', '2283.3', '77.6', '58.3', '762.1', '2745.2', '345.9', '307', '1538.6', '6605.55', '1617.5', '1032.05', '4264.25', '109.8', '600', '6000.1', '1510.3', '1454.25', '5629.15', '1502.65', '6856.95', '829.3', '5420.65', '1028.75', '1687.95', '3321.35', '450.65', '1008.55', '600.25', '3370.2', '7383.7', '2723.4', '4549.45', '927.65', '163.55', '452.2', '244.85', '270.95', '994.55', '617.15', '1489.3', '826.1', '3990.6', '6014.85', '797.1', '7532.15', '4753.85', '48.45', '6555.2', '195.05', '355.9', '3741.85', '78.45', '3363.8', '1263.05', '2188.45', '298.35', '3509.4', '1463.5', '3470.8', '4459.15', '1258.3', '672.2', '5193.2', '237.3', '510.8', '250.8', '5542.55', '2572.95', '1221.55', '152.7', '1461.45', '3899.05', '1021.55', '6129.2', '938.65', '3829.75', '4297.95', '53.15', '5895.45', '1616.15', '521.1', '233.7', '74.2', '384.5', '901.25', '1901.65', '6480.9', '3264.45', '4300.8', '7176.55', '528.35', '6383.9', '6352.4', '180.25', '789.2', '5324.5', '866.45', '1728.2', '1267.95', '6912.7', '2854.95', '1342.15', '291.9', '4872.45', '749.35', '524.5', '4138.05', '4874.8', '261.65', '971.3', '2094.9', '597.9', '560.85', '1646.45', '2610.65', '1275.7', '558.8', '3199', '75.1', '5219.65', '659.35', '1886.25', '235.2', '2804.45', '6347.55', '2357.75', '5826.65', '1248.9', '1145.35', '3970.4', '231.45', '7213.75', '6841.3', '2239.4', '4616.1', '2283.15', '2511.95', '3708.4', '1160.45', '4036.85', '2603.95', '3649.6', '1740.7', '5706.2', '4494.65', '187.35', '53.05', '3255.35', '3432.9', '4959.6', '1387.45', '1045.25', '1740.8', '4921.2', '3439', '36.45', '244.65', '275.7', '3953.15', '268.4', '2979.2', '6792.45', '4916.4', '173.15', '1401.4', '999.8', '465.85', '886.4', '1430.05', '53.95', '608.8', '5471.75', '1465.75', '804.25', '2545.75', '2815.25', '365.55', '1593.1', '3089.1', '5969.95', '2424.05', '266.8', '302.75', '2807.65', '3678.3', '1856.4', '4535.85', '7470.1', '3808', '3021.6', '790.15', '5835.5', '101.9', '233.55', '653.25', '186.05', '5461.45', '786.5', '5264.25', '6339.3', '49', '1029.75', '6981.35', '170.9', '3618.7', '1206.05', '4692.55', '912', '1078.75', '2015.35', '875.35', '3673.6', '357', '217.5', '4310.35', '134.35', '2364', '1454.15', '5431.4', '7856', '95', '6562.9', '5817.45', '2716.3', '4126.2', '1212.1', '1622.45', '973.25', '6506.15', '79.95', '1350.15', '2964.8', '7114.25', '386.5', '3457.45', '2312.55', '89.05', '1124.2', '4264.6', '5139.65', '1382.9', '1291.35', '145', '2106.05', '756.4', '4149.45', '1218.65', '4911.05', '1373.05', '302.35', '1253.5', '3517.9', '6871.7', '633.4', '1614.05', '3131.8', '296.1', '6859.5', '5688.45', '6292.7', '429.55', '204.55', '3444.85', '3754.6', '5073.1', '1801.1', '340.25', '4783.5', '1916', '209.9', '331.9', '655.3', '6001.45', '3541.35', '273.4', '301.55', '2324.7', '7362.9', '2293.6', '1686.15', '1800.05', '1558.65', '5617.95', '2511.3', '1490.4', '3794.5', '6306.5', '521', '6126.15', '1531.4', '287.4', '6161.9', '2136.9', '370.5', '1837.9', '5614.45', '3706.95', '583', '79.8', '3778.85', '849.1', '59.55', '1011.05', '2443.3', '2076.05', '1520.9', '1258.35', '2238.5', '1992.85', '527.5', '853.1', '2198.9', '1208.15', '263.05', '1637.3', '2405.05', '2258.25', '3930.6', '94.45', '369.1', '1734.65', '184.65', '990.3', '545.15', '154.3', '941', '5468.45', '4805.3', '145.15', '3623.95', '260.7', '8297.5', '934.15', '191.05', '8086.4', '3759.05', '842.9', '415.95', '2970.3', '1245.6', '1191.2', '2387.75', '1252', '358.5', '406.05', '4018.55', '368.85', '7758.9', '4060.55', '221.7', '6871.9', '2877.05', '711.9', '2298.55', '5265.1', '762.45', '302.6', '3641.5', '7475.85', '215.2', '158.4', '1710.9', '5186', '257.6', '307.6', '5957.9', '2460.55', '4549.05', '7511.3', '1529.65', '73.05', '485.9', '548.9', '1700.9', '3994.45', '2361.8', '153.95', '1397.65', '7142.5', '3707.6', '5598', '6589.6', '94.5', '682.15', '5825.5', '1444.65', '4085.75', '1559.45', '391.7', '3673.15', '732.5', '4136.4', '4539.35', '2931', '1462.6', '3756.4', '505.95', '6018.65', '1323.7', '6118.95', '2193.65', '485.2', '1253.15', '1525.35', '395.6', '4811.6', '141.5', '6782.15', '1303.25', '3902.45', '90.1', '3756.45', '8317.95', '378.4', '1460.65', '2492.25', '81.1', '2006.1', '1424.6', '4824.45', '716.4', '587.45', '770.6', '4689.5', '56.25', '3442.8', '360.55', '1425.45', '6405', '207.4', '95.1', '959.9', '5860.7', '1692.6', '1399.35', '7051.95', '422.4', '639.65', '452.8', '1698.55', '4664.5', '4213.9', '546.95', '1233.25', '927.1', '315.3', '1028.9', '293.3', '2983.65', '6689', '7030.65', '369.15', '7922.75', '358.05', '797.25', '5264.3', '3966.3', '1406', '1275.85', '75.8', '1798.65', '338.1', '215.8', '4111.35', '1388.75', '773.65', '144.95', '993.15', '159.35', '7898.45', '4003', '1497.9', '2139.2', '3344.1', '5411.4', '104.3', '2092.9', '428.45', '7049.75', '857.25', '1301.7', '805.1', '5763.15', '4784.45', '7511.65', '412.1', '5037.55', '68.45', '45.55', '492.1', '759.35', '333.55', '272.2', '5315.8', '832.3', '900.5', '5067.45', '5481.25', '105.6', '390.4', '5538.8', '2122.45', '1990.5', '401.1', '4176.7', '939.7', '3420.5', '273', '321.9', '4671.65', '87.9', '4917.9', '251.25', '781.25', '3574.5', '8124.2', '476.8', '718.55', '1789.25', '958.15', '2134.3', '6951.15', '2549.1', '5265.5', '5846.65', '3121.1', '605.45', '5129.45', '3375.9', '3582.4', '1600.95', '1415.85', '645.8', '4504.9', '5610.7', '536.4', '1138.8', '2337.45', '153.05', '520', '5341.8', '6448.05', '706.6', '3766.2', '3021.45', '381.2', '54.75', '919.4', '4993.4', '45.35', '845.25', '1329.2', '1447.9', '24.05', '1756.2', '4914.9', '194.2', '34.7', '514.75', '1530.6', '7039.05', '2000.2', '3053', '3088.75', '3173.35', '493.95', '5215.25', '3532', '7882.5', '4186.3', '1982.6', '1233.15', '743.5', '595.05', '116.65', '252', '73.65', '4517.25', '611.65', '1752.45', '216.45', '1129.75', '1147.45', '6843.15', '689.35', '5791.1', '1816.2', '1290', '2896.4', '396.1', '256.75', '4615.25', '113.85', '2665', '3875.4', '139.75', '1178.75', '186.15', '3487.95', '146.65', '5776.45', '4354.45', '1863.8', '251.6', '348.8', '3213.75', '893.55', '604.7', '4641.1', '6841.4', '325.45', '695.75', '6430.9', '7111.3', '579', '641.35', '739.9', '7789.6', '6474.45', '5743.05', '2680.15', '4322.85', '492', '6520.8', '5305.05', '161.5', '1612.75', '4042.2', '270.6', '6470.1', '864.2', '1564.05', '2169.8', '2799', '5308.7', '422.5', '8337.45', '5069.65', '1914.5', '1319.95', '139.05', '20.7', '1802.55', '717.95', '1334.45', '1505.15', '388.6', '6710.5', '1097.15', '3252', '154.8', '2249.95', '79.5', '76.4', '6925.9', '51.15', '2847.2', '3019.5', '3465.7', '222.65', '4299.75', '6096.9', '1265.65', '541.9', '921.3', '893.2', '1403.1', '3791.6', '5293.2', '4068', '5135.35', '7262', '4786.1', '838.7', '1715.65', '4158.25', '2424.45', '7609.75', '237.2', '1170.5', '5215.1', '123.05', '2708.2', '6375.8', '4036', '601.25', '2341.55', '5607.75', '860.85', '102.75', '967.85', '5586.45', '178.85', '4872.35', '4025.6', '5411.65', '1760.25', '927.35', '18.9', '1362.85', '5460.2', '470', '4200.25', '4209.95', '149.55', '6889.8', '1250.1', '4671.7', '3581.6', '930.4', '7412.25', '5243.05', '6744.2', '1112.3', '4968', '89.55', '1767.35', '632.95', '1793.25', '4428.45', '180.7', '6263.8', '73.5', '1288.3', '6143.15', '2414.55', '1052.4', '1215.6', '82.85', '2401.05', '2122.05', '111.05', '7349.35', '72.1', '813.3', '900.9', '608', '5040.2', '1400.55', '6578.55', '3023.65', '6602.9', '1043.8', '846', '837.95', '595.5', '7251.9', '24.25', '293.85', '1195.95', '1294.6', '385.9', '7279.35', '6529.25', '289.1', '733.95', '6252.7', '29.9', '780.2', '5656.75', '79.1', '1067.05', '4408.45', '1083', '345.5', '1222.05', '223.75', '85.7', '235.1', '3462.1', '269.65', '820.5', '1845.9', '939.8', '1385.85', '3880.05', '220.8', '5798.3', '4947.55', '5244.45', '2684.35', '5163.3', '1208.35', '1761.45', '392.5', '1813.1', '2613.4', '1775.8', '3539.25', '5396.25', '2309.55', '330.15', '1260.7', '1871.15', '7990.05', '2541.25', '4154.8', '1939.35', '3912.9', '1055.9', '4932.5', '8175.9', '2723.75', '3808.2', '2265.25', '1654.7', '1426.75', '5064.45', '4317.35', '144', '1905.4', '4131.2', '1022.95', '31.9', '6441.85', '1689.45', '1151.05', '1178.25', '855.1', '80.35', '7365.3', '1763.55', '1983.15', '3096.9', '612.1', '4014', '8399.15', '4885.85', '6841.05', '4759.55', '2200.7', '5746.75', '331.3', '244.75', '5750', '1023.85', '1539.45', '3865.6', '855.3', '1859.1', '4915.15', '1216.6', '1672.15', '1439.35', '837.5', '8476.5', '5376.4', '696.35', '5913.95', '21', '5602.25', '94', '1119.35', '5848.6', '349.8', '1565.7', '1166.7', '4126.35', '5917.55', '1099.6', '4839.15', '1648.45', '1993.25', '1520.1', '51.6', '903.8', '224.5', '651.4', '2509.95', '1010', '40.25', '3398.9', '377.55', '7713.55', '4254.85', '4338.6', '945.7', '79.9', '679.55', '186.3', '114.15', '4872.2', '1337.5', '522.35', '3023.85', '6067.4', '918.75', '711.15', '414.95', '572.2', '970.45', '7939.25', '434.1', '295.65', '581.85', '47.7', '7210.85', '829.1', '6779.05', '684.4', '7446.9', '6055.55', '4914.8', '3181.8', '25.35', '707.5', '3692.85', '677.05', '629.55', '2033.85', '110.15', '6962.85', '396.3', '712.75', '1483.25', '2546.85', '4828.05', '3744.05', '5459.2', '3949.15', '3862.55', '2395.7', '404.35', '4653.85', '5621.85', '8312.75', '784.25', '2793.55', '7107', '2606.35', '1079.65', '7325.1', '6936.85', '68.95', '3870', '73.6', '317.75', '7467.5', '749.25', '541.5', '147.55', '3266', '389.6', '6812.95', '1784.9', '689', '8349.45', '59.25', '6819.45', '119.3', '909.25', '1123.15', '7919.8', '371.4', '684.05', '1343.4', '6376.55', '6393.65', '996.95', '798.2', '3316.1', '4220.35', '1888.25', '4273.45', '5898.6', '35', '1743.05', '1776.55', '4458.15', '2077.95', '442.6', '916.75', '3231.05', '832.05', '39.85', '1438.05', '3483.45', '7288.4', '6230.1', '789.55', '514.6', '3645.5', '5639.05', '78.8', '2656.7', '5084.65', '2555.05', '415.4', '5791.85', '581.7', '5163', '75.6', '324.25', '3190.65', '868.5', '7842.3', '246.6', '950.2', '808.95', '420.45', '999.45', '45.85', '818.45', '100.9', '1715.1', '1783.6', '8564.75', '5468.95', '3027.25', '2762.75', '4801.1', '3340.55', '53.55', '1864.2', '141.45', '7932.5', '3019.7', '1269.55', '85.8', '184.15', '709.5', '3038.55', '893', '195.3', '4973.4', '3605.2', '518.3', '4837.6', '201.7', '5958.85', '6223.3', '3845.45', '109.6', '2985.25', '76.2', '733.35', '1007.9', '8477.7', '5082.8', '6585.35', '685.55', '6503.2', '1003.05', '3687.85', '3670.5', '5301.1', '70.5', '3901.25', '1313.25', '693.3', '5309.5', '1302.65', '2838.55', '1306.3', '45.05', '81.7', '6401.25', '1441.8', '651.5', '573.05', '1772.25', '150.85', '55.45', '7521.95', '1523.4'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.028', 'fit_time_std': '0.001', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '3.390', 'fit_time_std': '0.059', 'test_score_mean': '0.764', 'test_score_std': '0.014'} {'model_name': 'rf-100', 'fit_time_mean': '7.481', 'fit_time_std': '0.009', 'test_score_mean': '0.824', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '66.219', 'fit_time_std': '0.255', 'test_score_mean': '0.825', 'test_score_std': '0.003'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '53.015', 'fit_time_std': '7.524', 'test_score_mean': '0.852', 'test_score_std': '0.004'} dataset = load_heart_data () result = benchmark_models ( 'heart' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ heart ------------------------------------------------------------------------------ {'dataset_name': 'heart'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.007', 'fit_time_std': '0.000', 'test_score_mean': '0.895', 'test_score_std': '0.030'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.007', 'fit_time_std': '0.000', 'test_score_mean': '0.895', 'test_score_std': '0.030'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.561', 'fit_time_std': '0.045', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '1.955', 'fit_time_std': '0.003', 'test_score_mean': '0.911', 'test_score_std': '0.015'} {'model_name': 'rf-100', 'fit_time_mean': '0.177', 'fit_time_std': '0.002', 'test_score_mean': '0.890', 'test_score_std': '0.008'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.239', 'fit_time_std': '0.044', 'test_score_mean': '0.851', 'test_score_std': '0.018'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '1.147', 'fit_time_std': '0.327', 'test_score_mean': '0.906', 'test_score_std': '0.011'} records = [ item for result in results for item in result ] record_df = pd . DataFrame . from_records ( records )[[ 'dataset_name' , 'model_name' , 'test_score_mean' , 'test_score_std' ]] record_df = record_df . sort_values ([ 'dataset_name' , 'test_score_mean' ], ascending = False ) print ( record_df [ record_df [ 'model_name' ] . isin ([ 'lr_ohe' , 'lr_ordinal' , 'rf-100' , 'skorecard' , 'xgb' ])] . drop ([ 'test_score_std' ], axis = 1 ) . to_markdown ( tablefmt = \"github\" , showindex = False )) | dataset_name | model_name | test_score_mean | |----------------|--------------|-------------------| | telco_churn | lr_ordinal | nan | | telco_churn | xgb | 0.825 | | telco_churn | rf-100 | 0.824 | | telco_churn | lr_ohe | 0.809 | | telco_churn | skorecard | 0.764 | | heart | skorecard | 0.911 | | heart | lr_ohe | 0.895 | | heart | lr_ordinal | 0.895 | | heart | rf-100 | 0.89 | | heart | xgb | 0.851 | | breast-cancer | skorecard | 0.996 | | breast-cancer | lr_ohe | 0.994 | | breast-cancer | lr_ordinal | 0.994 | | breast-cancer | rf-100 | 0.992 | | breast-cancer | xgb | 0.992 | | adult | xgb | 0.927 | | adult | lr_ohe | 0.906 | | adult | rf-100 | 0.903 | | adult | skorecard | 0.888 | | adult | lr_ordinal | 0.855 | | UCI-creditcard | skorecard | 0.627 | | UCI-creditcard | lr_ohe | 0.621 | | UCI-creditcard | lr_ordinal | 0.621 | | UCI-creditcard | xgb | 0.596 | | UCI-creditcard | rf-100 | 0.588 |","title":"benchmark with EBM"},{"location":"discussion/benchmark_with_EBM/#ebm-benchmark-with-skorecard","text":"This benchmark was adjusted from https://raw.githubusercontent.com/interpretml/interpret/master/benchmarks/EBM%20Classification%20Comparison.ipynb. # To run benchmark script, you will need to install XGBoost # (pip install XGBoost) import numpy as np import pandas as pd from sklearn.datasets import load_breast_cancer import warnings warnings . filterwarnings ( \"ignore\" ) def load_breast_data (): breast = load_breast_cancer () feature_names = list ( breast . feature_names ) X , y = pd . DataFrame ( breast . data , columns = feature_names ), breast . target dataset = { 'problem' : 'classification' , 'full' : { 'X' : X , 'y' : y , }, } return dataset def load_adult_data (): df = pd . read_csv ( \"https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data\" , header = None ) df . columns = [ \"Age\" , \"WorkClass\" , \"fnlwgt\" , \"Education\" , \"EducationNum\" , \"MaritalStatus\" , \"Occupation\" , \"Relationship\" , \"Race\" , \"Gender\" , \"CapitalGain\" , \"CapitalLoss\" , \"HoursPerWeek\" , \"NativeCountry\" , \"Income\" ] train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_heart_data (): # https://www.kaggle.com/ronitf/heart-disease-uci df = pd . read_csv ( r 'heart.csv' ) train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_credit_data (): # https://www.kaggle.com/mlg-ulb/creditcardfraud df = pd . read_csv ( r 'creditcard.csv' ) train_cols = df . columns [ 0 : - 1 ] label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset def load_telco_churn_data (): # https://www.kaggle.com/blastchar/telco-customer-churn df = pd . read_csv ( r 'WA_Fn-UseC_-Telco-Customer-Churn.csv' ) train_cols = df . columns [ 1 : - 1 ] # First column is an ID label = df . columns [ - 1 ] X_df = df [ train_cols ] y_df = df [ label ] # 'Yes, No' dataset = { 'problem' : 'classification' , 'full' : { 'X' : X_df , 'y' : y_df , }, } return dataset from sklearn.preprocessing import OneHotEncoder , FunctionTransformer , StandardScaler from sklearn.compose import ColumnTransformer from sklearn.pipeline import Pipeline from sklearn.model_selection import StratifiedShuffleSplit , cross_validate from sklearn.ensemble import RandomForestClassifier from sklearn.preprocessing import OrdinalEncoder from xgboost import XGBClassifier from sklearn.linear_model import LogisticRegression from interpret.glassbox import ExplainableBoostingClassifier from skorecard import Skorecard from optbinning import BinningProcess from optbinning import Scorecard def format_n ( x ): return \" {0:.3f} \" . format ( x ) def process_model ( clf , name , X , y , n_splits = 3 ): # Evaluate model ss = StratifiedShuffleSplit ( n_splits = n_splits , test_size = 0.25 , random_state = 1337 ) scores = cross_validate ( clf , X , y , scoring = 'roc_auc' , cv = ss , n_jobs =- 1 , return_estimator = True ) record = dict () record [ 'model_name' ] = name record [ 'fit_time_mean' ] = format_n ( np . mean ( scores [ 'fit_time' ])) record [ 'fit_time_std' ] = format_n ( np . std ( scores [ 'fit_time' ])) record [ 'test_score_mean' ] = format_n ( np . mean ( scores [ 'test_score' ])) record [ 'test_score_std' ] = format_n ( np . std ( scores [ 'test_score' ])) return record def benchmark_models ( dataset_name , X , y , ct = None , n_splits = 3 , random_state = 1337 ): if ct is None : is_cat = np . array ([ dt . kind == 'O' for dt in X . dtypes ]) cat_cols = X . columns . values [ is_cat ] num_cols = X . columns . values [ ~ is_cat ] cat_ohe_step = ( 'ohe' , OneHotEncoder ( sparse = False , handle_unknown = 'ignore' )) cat_pipe = Pipeline ([ cat_ohe_step ]) num_pipe = Pipeline ([( 'identity' , FunctionTransformer ())]) transformers = [ ( 'cat' , cat_pipe , cat_cols ), ( 'num' , num_pipe , num_cols ) ] ct = ColumnTransformer ( transformers = transformers ) cat_ord_step = ( 'ord_enc' , OrdinalEncoder ()) cat_pipe = Pipeline ([ cat_ord_step ]) transformers = [ ( 'cat' , cat_pipe , cat_cols ), ( 'num' , num_pipe , num_cols ) ] ot = ColumnTransformer ( transformers = transformers ) records = [] summary_record = {} summary_record [ 'dataset_name' ] = dataset_name print () print ( '-' * 78 ) print ( dataset_name ) print ( '-' * 78 ) print ( summary_record ) print () pipe = Pipeline ([ ( 'ct' , ct ), ( 'std' , StandardScaler ()), ( 'lr' , LogisticRegression ( random_state = random_state )), ]) record = process_model ( pipe , 'lr_ohe' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ot' , ot ), ( 'std' , StandardScaler ()), ( 'lr' , LogisticRegression ( max_iter = 7000 , random_state = random_state )), ]) record = process_model ( pipe , 'lr_ordinal' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # Scorecard num_features = list ( X . _get_numeric_data () . columns ) cat_features = [ f for f in X . columns if f not in num_features ] scorecard = Scorecard ( binning_process = BinningProcess ( variable_names = num_features + cat_features , categorical_variables = cat_features , selection_criteria = { \"iv\" : { \"min\" : 0.02 , \"max\" : 1 }, \"quality_score\" : { \"min\" : 0.01 }}), estimator = LogisticRegression ( solver = \"lbfgs\" ), scaling_method = \"min_max\" , scaling_method_params = { \"min\" : 300 , \"max\" : 850 } ) record = process_model ( scorecard , 'optbinning.scorecard' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # Skorecard skorecard = Skorecard () record = process_model ( skorecard , 'skorecard' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ct' , ct ), # n_estimators updated from 10 to 100 due to sci-kit defaults changing in future versions ( 'rf-100' , RandomForestClassifier ( n_estimators = 100 , n_jobs =- 1 , random_state = random_state )), ]) record = process_model ( pipe , 'rf-100' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) pipe = Pipeline ([ ( 'ct' , ct ), ( 'xgb' , XGBClassifier ( random_state = random_state , eval_metric = 'logloss' )), ]) record = process_model ( pipe , 'xgb' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) # No pipeline needed due to EBM handling string datatypes ebm_inter = ExplainableBoostingClassifier ( n_jobs =- 1 , random_state = random_state ) record = process_model ( ebm_inter , 'ebm' , X , y , n_splits = n_splits ) print ( record ) record . update ( summary_record ) records . append ( record ) return records results = [] n_splits = 3 from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) result = benchmark_models ( 'UCI-creditcard' , X , y , n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ UCI-creditcard ------------------------------------------------------------------------------ {'dataset_name': 'UCI-creditcard'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.009', 'fit_time_std': '0.001', 'test_score_mean': '0.621', 'test_score_std': '0.023'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.008', 'fit_time_std': '0.000', 'test_score_mean': '0.621', 'test_score_std': '0.023'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.265', 'fit_time_std': '0.007', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '1.042', 'fit_time_std': '0.235', 'test_score_mean': '0.627', 'test_score_std': '0.018'} {'model_name': 'rf-100', 'fit_time_mean': '0.344', 'fit_time_std': '0.005', 'test_score_mean': '0.588', 'test_score_std': '0.013'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.588', 'fit_time_std': '0.002', 'test_score_mean': '0.596', 'test_score_std': '0.005'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '1.141', 'fit_time_std': '0.094', 'test_score_mean': '0.644', 'test_score_std': '0.012'} dataset = load_breast_data () result = benchmark_models ( 'breast-cancer' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ breast-cancer ------------------------------------------------------------------------------ {'dataset_name': 'breast-cancer'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.012', 'fit_time_std': '0.001', 'test_score_mean': '0.994', 'test_score_std': '0.006'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.011', 'fit_time_std': '0.000', 'test_score_mean': '0.994', 'test_score_std': '0.006'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '2.184', 'fit_time_std': '0.027', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '9.318', 'fit_time_std': '0.915', 'test_score_mean': '0.996', 'test_score_std': '0.004'} {'model_name': 'rf-100', 'fit_time_mean': '0.159', 'fit_time_std': '0.001', 'test_score_mean': '0.992', 'test_score_std': '0.009'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.185', 'fit_time_std': '0.026', 'test_score_mean': '0.992', 'test_score_std': '0.010'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '3.863', 'fit_time_std': '1.145', 'test_score_mean': '0.995', 'test_score_std': '0.006'} dataset = load_adult_data () result = benchmark_models ( 'adult' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) # 0.888 ------------------------------------------------------------------------------ adult ------------------------------------------------------------------------------ {'dataset_name': 'adult'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.909', 'fit_time_std': '0.030', 'test_score_mean': '0.906', 'test_score_std': '0.003'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.136', 'fit_time_std': '0.000', 'test_score_mean': '0.855', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.184', 'fit_time_std': '0.003', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '2.831', 'fit_time_std': '0.026', 'test_score_mean': '0.888', 'test_score_std': '0.004'} {'model_name': 'rf-100', 'fit_time_mean': '2.224', 'fit_time_std': '0.013', 'test_score_mean': '0.903', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '7.538', 'fit_time_std': '0.089', 'test_score_mean': '0.927', 'test_score_std': '0.001'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '49.284', 'fit_time_std': '2.831', 'test_score_mean': '0.928', 'test_score_std': '0.002'} dataset = load_telco_churn_data () result = benchmark_models ( 'telco_churn' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ telco_churn ------------------------------------------------------------------------------ {'dataset_name': 'telco_churn'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:763: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( {'model_name': 'lr_ohe', 'fit_time_mean': '9.855', 'fit_time_std': '0.033', 'test_score_mean': '0.809', 'test_score_std': '0.014'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.078', 'fit_time_std': '0.001', 'test_score_mean': 'nan', 'test_score_std': 'nan'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['4186.3', '2653.65', '764.55', '5186', '3625.2', '7220.35', '1369.8', '3460.95', '6526.65', '2424.45', '89.5', '300.7', '144.95', '4689.15', '8564.75', '187.45', '2852.4', '1498.35', '1269.6', '5069.65', '313.6', '1342.15', '2510.2', '6287.25', '2888.7', '446.8', '1718.95', '1884.65', '1105.4', '539.85', '1647', '3152.5', '231.45', '4965.1', '254.5', '3389.25', '1852.85', '2624.25', '100.2', '4464.8', '5968.4', '953.65', '2265', '5817.45', '4495.65', '2201.75', '3121.45', '1800.05', '1905.7', '1160.45', '6710.5', '1601.2', '5568.35', '1097.15', '851.75', '4698.05', '1534.05', '2310.2', '6886.25', '8035.95', '2272.8', '2877.05', '4510.8', '74.5', '903.8', '1618.2', '1029.8', '1682.05', '6126.1', '670.35', '5749.8', '5376.4', '329.8', '5125.75', '967.9', '1147', '342.4', '315.3', '1035.7', '3608', '832.05', '2614.1', '2679.7', '6521.9', '1083', '874.2', '3825.85', '5746.75', '314.45', '1233.65', '7159.7', '488.65', '5720.35', '6218.45', '363.15', '1841.9', '1559.15', '2813.05', '617.85', '2627.35', '5073.1', '2007.85', '4972.1', '1433.8', '3437.45', '283.95', '846.8', '2263.4', '716.4', '7159.05', '7553.6', '1743.5', '3351.55', '46.3', '3097', '321.05', '343.95', '1873.7', '1263.85', '68.65', '3440.25', '2587.7', '2076.2', '4097.05', '6333.4', '292.4', '5717.85', '5560', '1423.15', '2936.25', '237.25', '6841.45', '1259.35', '29.95', '3471.1', '746.75', '396.3', '8477.7', '6871.7', '4965', '2117.25', '5931', '266.6', '2401.05', '7283.25', '1146.05', '393.15', '498.25', '469.25', '188.7', '1818.3', '1789.25', '677.05', '387.4', '1513.6', '3094.05', '163.7', '4447.55', '702.05', '7491.75', '2937.65', '70.15', '49.7', '3474.05', '950.2', '78.05', '7726.35', '951.55', '1028.75', '2048.8', '1078.9', '134.5', '1677.85', '3265.95', '21.05', '3983.6', '4599.15', '1451.9', '4145.25', '1321.3', '767.9', '1215.45', '6716.45', '1238.45', '2072.75', '4615.25', '141.1', '1274.05', '571.05', '408.5', '890.5', '1336.15', '72.1', '7213.75', '1843.05', '1399.35', '2666.75', '121.25', '2415.95', '564.4', '1671.6', '146.05', '4378.35', '3004.15', '1686.85', '4131.2', '746.5', '3379.25', '4146.05', '4630.2', '3460.3', '456.85', '320.45', '6224.8', '446.1', '3029.1', '4566.5', '1494.5', '1133.9', '3313.4', '3121.4', '2088.75', '7987.6', '1031.7', '3019.7', '1623.4', '129.6', '3168.75', '229.6', '1359.45', '1374.35', '1294.6', '2217.15', '1952.25', '2257.75', '151.65', '4674.4', '2768.35', '8404.9', '2513.5', '1790.65', '1313.55', '435.25', '1734.65', '1414.65', '1573.7', '5753.25', '263.65', '3990.6', '89.05', '3416.85', '1558.7', '2193.2', '7746.7', '6474.4', '75.7', '3645.75', '78.8', '1242.45', '1593.1', '1442.2', '118.5', '1258.3', '6283.3', '3160.55', '1850.65', '2429.1', '7919.8', '2586', '3488.15', '2966.95', '6506.15', '5443.65', '2365.15', '198', '3231.05', '5409.75', '6019.35', '6341.45', '50.65', '5894.5', '4685.55', '95.05', '152.7', '7222.75', '358.05', '3807.35', '966.55', '2799', '62.9', '930.05', '1801.9', '212.3', '93.45', '889.9', '886.7', '3771.5', '2753.8', '1622.45', '3082.1', '4523.25', '4862.5', '4746.05', '723.4', '2960.1', '171.45', '4400.75', '5706.3', '3562.5', '582.5', '5794.45', '688.5', '2094.65', '1698.55', '928.4', '4309.55', '4871.05', '3254.35', '168.6', '1510.3', '888.75', '788.05', '1140.05', '323.15', '3969.35', '6127.6', '6293.45', '105.5', '78.3', '1174.8', '68.8', '31.9', '865.85', '609.05', '2291.2', '184.95', '3865.6', '927.65', '356.1', '770.6', '1729.35', '347.4', '6567.9', '3023.55', '518.9', '524.35', '543', '228', '3249.4', '46.35', '688.65', '1411.35', '3767.4', '7767.25', '7475.85', '3019.1', '959.9', '68.45', '566.1', '365.8', '788.55', '746.05', '1054.75', '6841.3', '3846.75', '3089.6', '2236.2', '7455.45', '213.35', '2516.2', '4816.7', '8127.6', '279.5', '1380.4', '1388', '3145.15', '679', '3624.35', '110.05', '3320.75', '1268.85', '2019.8', '3186.7', '2444.25', '1177.95', '2011.4', '521.35', '7446.9', '118.4', '4748.7', '2303.35', '287.85', '1332.4', '6126.15', '4916.95', '221.1', '690.5', '2215.25', '5791.85', '3264.5', '331.35', '1394.55', '92.5', '4692.95', '3210.35', '5224.35', '4478.85', '541.15', '2082.95', '154.85', '7061.65', '839.65', '1329.15', '330.6', '321.65', '579', '418.25', '4133.95', '132.2', '140.1', '7323.15', '5270.6', '1489.3', '876.75', '2823', '4600.95', '1581.95', '150.75', '1389.6', '70.4', '606.55', '727.85', '7544', '2762.75', '990.3', '512.45', '8456.75', '93.85', '6603', '36.55', '688.2', '4433.3', '505.9', '3444.85', '152.3', '4018.35', '2308.6', '1178.25', '3165.6', '2301.15', '399.45', '655.3', '672.7', '2832.75', '5515.45', '2018.1', '4614.55', '615.35', '87.9', '123.8', '1663.5', '1821.95', '3078.1', '1579.7', '2660.2', '568.85', '3479.05', '1190.5', '3027.65', '2509.95', '853.1', '436.2', '4903.15', '5785.65', '2427.1', '4872.45', '44.05', '184.05', '49.25', '6465', '923.85', '1861.1', '1086.75', '6029', '838.7', '655.5', '701.3', '1863.8', '428.7', '6083.1', '3472.05', '7362.9', '4285.8', '3043.7', '994.8', '2333.05', '6994.8', '2839.65', '1426.4', '8086.4', '4213.35', '1958.95', '4222.95', '4126.2', '1047.7', '4217.8', '151.3', '2443.3', '7962.2', '996.45', '6302.85', '272.35', '267.6', '4968', '425.9', '7262', '7422.1', '3409.1', '101.45', '6388.65', '242.05', '2606.35', '546.95', '101.1', '706.6', '7108.2', '412.5', '233.65', '512.25', '3902.45', '3541.1', '1013.35', '3952.65', '2471.6', '1046.2', '3958.85', '1203.9', '2820.65', '335.65', '565.75', '7966.9', '5124.6', '6383.35', '593.2', '1715.1', '157.55', '3204.4', '3972.25', '74.25', '384.25', '2062.15', '239.75', '4947.55', '49.75', '76', '198.1', '467.85', '5067.45', '46', '762.5', '3270.25', '1887', '2312.55', '2868.15', '5290.45', '2211.8', '990.85', '3901.25', '4179.1', '1144.6', '551.95', '1242.2', '35', '1652.4', '3058.15', '1587.55', '3861.45', '1993.8', '6827.5', '4977.2', '6435.25', '2404.15', '1564.4', '4036', '6293.2', '181.7', '4586.15', '2731', '1506.4', '5588.8', '4378.9', '4759.55', '1304.8', '4096.9', '1245.6', '484.05', '1414.45', '5737.6', '1066.9', '1188.2', '1544.05', '1621.35', '43.15', '4653.25', '1108.2', '3921.1', '375.25', '242.8', '586.05', '964.35', '3541.4', '5438.9', '1558.65', '1727.5', '4009.2', '208.25', '478.1', '7344.45', '6401.25', '21.1', '174.75', '453.75', '7111.3', '256.6', '426.35', '7049.75', '1554', '5832.65', '3435.6', '6172', '7053.35', '5655.45', '5885.4', '874.8', '7723.9', '4068', '2669.45', '161.95', '201', '1835.3', '1490.4', '180.25', '6056.9', '808.95', '433.95', '3097.2', '3678.3', '48.55', '921.3', '76.4', '334.65', '3363.8', '836.35', '90.1', '1653.85', '2369.3', '3888.65', '1406.9', '1931.75', '125.95', '6654.1', '5229.8', '926.25', '2467.75', '2597.6', '5611.75', '4849.1', '4917.75', '5025', '6252.9', '70.8', '1266.1', '4378.8', '1348.5', '329.75', '4730.6', '3457.9', '2168.9', '811.8', '235.1', '5283.95', '6470.1', '54.5', '5432.2', '1074.3', '799.65', '5980.75', '387.2', '1439.35', '1653.45', '1563.95', '1724.15', '1156.35', '5985.75', '5502.55', '805.1', '4284.65', '4335.2', '4869.35', '7472.15', '1278.8', '1462.6', '1992.85', '1101.85', '411.45', '116.85', '3549.25', '1389.2', '4680.05', '5189.75', '4854.3', '56', '1306.3', '3512.5', '5231.2', '6741.15', '6383.9', '708.2', '4265', '3751.15', '1021.8', '450.65', '8175.9', '3110.1', '611.65', '704.3', '225.55', '827.7', '869.9', '2522.4', '80', '1681.6', '56.35', '68.2', '1423.65', '385.9', '624.15', '336.7', '5817.7', '6510.45', '812.4', '1982.1', '5150.55', '2613.4', '1687.95', '3252', '1374.2', '337.9', '3721.9', '152.6', '973.35', '1253.9', '828.2', '7317.1', '1118.8', '3770', '2871.5', '4882.8', '170.85', '91.1', '1500.5', '531.55', '4576.3', '2546.85', '350.1', '854.9', '338.9', '2974.5', '214.4', '4354.45', '5682.25', '292.8', '433.75', '1209.25', '4421.95', '159.35', '94.5', '825.7', '2498.4', '4590.35', '6503.2', '1448.8', '2309.55', '1061.6', '2568.55', '4828.05', '2343.85', '1363.25', '75.75', '1588.25', '5608.4', '673.2', '5000.05', '5453.4', '5424.25', '1992.95', '731.3', '1525.35', '1025.15', '231.8', '1231.85', '249.95', '2435.15', '1809.35', '620.35', '5357.75', '1446.8', '97', '6067.4', '1348.95', '6914.95', '6747.35', '2664.3', '3358.65', '4991.5', '2838.7', '261.65', '3382.3', '1847.55', '4634.35', '961.4', '2467.1', '1367.75', '926', '53.5', '369.25', '2157.3', '4519.5', '804.25', '770.4', '1413', '7325.1', '8425.15', '2530.4', '1230.9', '5916.45', '371.4', '4749.15', '5222.3', '2917.65', '1326.25', '7467.55', '1961.6', '317.75', '91.4', '3330.1', '4594.95', '3845.45', '7508.55', '4391.45', '208', '5082.8', '610.2', '7432.05', '6951.15', '700.45', '304.6', '1345.85', '3425.35', '197.7', '135.2', '455.3', '18.9', '37.2', '6613.65', '1072', '3952.45', '1216.35', '861.85', '1740.7', '2566.5', '1871.85', '4346.4', '5206.55', '1783.75', '7470.1', '436.6', '754.65', '912', '2203.1', '176.2', '4016.3', '3603.45', '95.45', '552.7', '4985.9', '4307.1', '5703.25', '3754.6', '1583.5', '2689.35', '3122.4', '94.55', '1165.55', '1709.15', '109.6', '2076.05', '675.6', '272', '411.25', '1937.4', '5121.3', '309.1', '5377.8', '4765', '1238.65', '4322.85', '7849.85', '7291.75', '3985.35', '638.55', '593.05', '402.85', '857.2', '150.6', '7679.65', '131.05', '625.05', '2275.1', '4904.2', '7251.7', '481.1', '1818.9', '653.25', '44.95', '5509.3', '3342', '552.9', '324.2', '400.3', '5327.25', '617.15', '3373.4', '1938.05', '244.1', '5950.2', '4367.35', '6130.95', '4025.5', '2510.7', '475.1', '4527.45', '3834.4', '832.3', '5528.9', '79.5', '2515.3', '5420.65', '3775.85', '2324.7', '104.2', '5780.7', '4368.95', '1058.6', '382.8', '5986.45', '4226.7', '2537', '6029.9', '1501.75', '669.45', '1522.65', '8547.15', '4993.4', '1298.7', '1454.15', '477.05', '74.1', '1555.65', '2566.3', '7107', '1194.3', '3937.45', '146.65', '216.9', '4138.7', '1825.5', '820.5', '788.35', '368.1', '1067.15', '1245.05', '3088.25', '6581.9', '6843.15', '4663.4', '4904.85', '330.15', '2774.55', '414.1', '620.75', '6129.2', '524.5', '4504.9', '1081.45', '535.55', '5068.05', '1767.35', '1211.65', '2431.35', '2869.85', '5567.45', '2509.25', '3017.65', '1934.45', '4103.9', '3629.2', '299.7', '3958.2', '6590.8', '394.85', '255.35', '6431.05', '1013.2', '1171.5', '3970.4', '392.5', '462.8', '1287.85', '6588.95', '109.8', '896.75', '218.5', '5848.6', '2234.95', '1957.1', '5974.3', '679.3', '25.3', '7168.25', '5275.8', '5625.55', '259.4', '1509.9', '593.85', '1073.3', '2647.2', '4688.65', '3467', '1451.6', '6578.55', '422.3', '325.45', '3198.6', '193.05', '3058.65', '1288', '4060.9', '3822.45', '3348.1', '217.1', '122.7', '3314.15', '5398.6', '1292.2', '106.8', '8468.2', '706.85', '773.65', '7348.8', '3353.4', '546.85', '3734.25', '742.9', '1393.6', '7129.45', '1096.6', '6306.5', '5487', '5440.9', '5124.55', '3656.25', '799', '1927.3', '4860.35', '4747.85', '6314.35', '6844.5', '497.55', '5497.05', '5163', '114.7', '1108', '2181.75', '5746.15', '1474.35', '5873.75', '3371.75', '1153.25', '58.15', '224.05', '1036', '950.75', '908.15', '3126.85', '40.2', '559.2', '1005.7', '6912.7', '473.9', '558.8', '4451.85', '6075.9', '3370.2', '3442.8', '2287.25', '2745.7', '747.2', '1023.75', '7550.3', '3094.65', '4541.9', '571.75', '1415', '3626.35', '3581.6', '1303.5', '331.9', '2033.05', '734.35', '4370.75', '2536.55', '3339.05', '2911.3', '4480.7', '4299.95', '2423.4', '818.45', '1152.8', '5405.8', '795.65', '5769.75', '6697.2', '452.2', '6001.45', '4509.5', '1820.9', '5764.7', '683.75', '3219.75', '633.45', '5696.6', '7882.25', '681.4', '1077.5', '770.5', '4904.25', '196.75', '1841.2', '5639.05', '154.55', '3551.65', '4025.6', '971.3', '7985.9', '141.6', '7303.05', '543.8', '1505.05', '4048.95', '4539.6', '2198.9', '827.05', '428.45', '2044.95', '5566.4', '3465.7', '1423.05', '692.55', '1438.05', '1192.3', '2724.25', '2723.4', '255.5', '1600.25', '289.3', '273.75', '5360.75', '573.15', '61.7', '662.95', '868.5', '567.45', '274.7', '6766.95', '1198.8', '445.95', '80.3', '31.35', '3623.95', '1521.2', '1939.35', '1334.5', '1384.75', '48.95', '1500.25', '63', '4026.4', '420.2', '3320.6', '3021.45', '3600.65', '467.5', '2296.25', '1570.7', '3141.7', '786.3', '1390.6', '1051.9', '385', '4458.15', '7713.55', '3091.75', '3735.45', '2954.5', '1221.65', '1147.45', '47.5', '1797.1', '813.3', '42.45', '4479.2', '1406', '1875.55', '1041.8', '613.4', '1441.8', '970.4', '195.65', '4473.45', '80.95', '1509.8', '79.95', '1218.45', '4414.3', '2413.05', '4135', '3377.8', '2077.95', '2361.8', '31.2', '7878.3', '223.9', '1713.1', '214.55', '550.6', '330.25', '447.75', '20.8', '3306.85', '5812.6', '2209.75', '1364.75', '4577.75', '167.5', '3618.7', '2847.4', '7930.55', '4600.7', '1426.45', '6281.45', '54.3', '44.1', '2075.1', '4122.65', '41.2', '764.95', '1868.4', '1680.25', '2165.05', '426.65', '1940.85', '450.9', '2550.9', '2239.4', '284.35', '3457.45', '444.75', '2460.55', '632.2', '151.8', '6296.75', '696.8', '8289.2', '249.55', '1046.1', '1900.25', '4577.9', '5029.05', '221.35', '712.25', '187.75', '5265.1', '3540.65', '1849.95', '2983.8', '7634.8', '2096.1', '958.45', '107.1', '6428.4', '198.6', '3557.7', '1875.25', '5060.9', '685.55', '1322.85', '92.25', '140.95', '4089.45', '5135.15', '624.6', '6227.5', '267.4', '680.05', '69.15', '164.85', '3205.6', '1732.6', '3046.4', '68.35', '59.05', '74', '3597.5', '7943.45', '6479.4', '5567.55', '5629.15', '147.75', '1277.5', '2227.8', '1297.35', '486.05', '5437.1', '2149.05', '6312.9', '665.45', '658.1', '684.4', '1838.15', '1842.7', '1058.25', '4003.85', '109.25', '3634.8', '4713.4', '5714.25', '1400.3', '1363.45', '574.5', '5586.45', '2766.4', '3042.25', '4804.75', '2282.55', '471.55', '997.65', '467.7', '44.7', '3893.6', '1573.05', '70.75', '1596.6', '6081.4', '1309', '474.9', '1530.6', '2021.2', '2724.6', '1021.75', '2136.9', '2686.05', '1387', '4627.8', '4639.45', '1434.1', '715', '4620.4', '331.3', '583.45', '5552.5', '599.3', '201.1', '1867.7', '294.2', '638', '1747.2', '233.7', '2283.15', '1054.6', '5401.9', '2244.95', '5576.3', '4913.3', '1133.65', '188.1', '660.05', '992.7', '7854.9', '581.85', '168.2', '4953.25', '847.25', '1218.65', '7430.75', '2745.2', '346.45', '226.8', '321.4', '3766.2', '1872.2', '1042.65', '5731.4', '6725.3', '786.5', '6330.4', '2007.25', '2049.05', '368.85', '555.4', '2782.4', '1798.65', '196.15', '5680.9', '4641.1', '6941.2', '519.15', '2633.3', '2748.7', '1261.35', '71.25', '1614.7', '1776.55', '3190.25', '3092', '1493.75', '5025.85', '989.45', '418.4', '2356.75', '2540.1', '5311.85', '91.45', '2790.65', '2053.05', '6373.1', '779.25', '2642.05', '7047.5', '139.75', '8152.3', '223.6', '810.2', '1328.35', '7904.25', '81.05', '646.05', '3021.6', '1341.5', '5084.65', '5956.85', '7299.65', '278.4', '4631.7', '1149.65', '248.4', '6981.35', '141.7', '165.2', '2282.95', '1263.9', '181.6', '3217.55', '7030.65', '882.55', '5500.6', '7629.85', '901.25', '6418.9', '1388.75', '1639.3', '4070.95', '969.85', '1888.25', '1155.6', '4304.5', '4824.45', '68.95', '684.85', '461.3', '447.9', '7661.8', '81.25', '548.9', '1837.7', '2453.3', '367.55', '466.6', '6851.65', '4783.5', '468.35', '3974.7', '281', '169.45', '1633', '438.05', '73.05', '826.1', '8277.05', '5918.8', '358.5', '465.05', '6725.5', '6671.7', '2191.15', '3023.85', '1748.9', '77.6', '314.55', '2970.8', '1169.35', '68.5', '2106.05', '1779.95', '4819.75', '567.8', '1683.6', '5711.05', '688', '198.7', '4014', '401.95', '1445.3', '1899.65', '818.05', '803.3', '5483.9', '3326.2', '2979.2', '4145.9', '4664.5', '389.1', '3067.2', '2479.25', '1057', '1406.65', '2093.9', '223.75', '6347.55', '1510.5', '1424.4', '7856', '5471.75', '6423', '1261.7'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['8333.95', '2879.9', '2647.2', '2387.75', '6139.5', '1397.3', '795.65', '2178.6', '926', '759.35', '1090.1', '6068.65', '5031', '739.35', '2053.05', '692.1', '369.6', '422.6', '4539.6', '2448.5', '3078.1', '6161.9', '2423.4', '572.85', '1888.65', '1778.5', '109.3', '1380.4', '2871.5', '706.6', '1082.8', '533.6', '1990.5', '140.95', '44.05', '897.75', '3623.95', '2354.8', '6557.75', '5043.2', '2651.2', '2309.55', '676.7', '712.25', '2484', '3741.85', '2236.2', '1863.8', '4735.2', '1021.8', '1504.05', '3687.75', '168.9', '2139.1', '2566.5', '1001.5', '8192.6', '4368.95', '3483.45', '334.65', '1210.4', '150.6', '268.35', '6322.1', '1387', '1268.85', '1031.7', '3263.9', '880.05', '75.6', '130.5', '6707.15', '532.1', '1851.45', '2807.1', '109.2', '3950.85', '255.55', '5686.4', '3423.5', '5958.85', '5683.6', '755.5', '1899.65', '232.4', '5774.55', '6130.85', '6309.65', '1275.65', '3767.4', '945.7', '3420.5', '1444.65', '244.45', '505.9', '5036.3', '173', '679.85', '4513.65', '2078.95', '653.95', '1094.35', '668.4', '7288.4', '7149.35', '1177.95', '2524.45', '3541.35', '515.45', '2075.1', '1500.95', '2208.75', '1608.15', '723.3', '6860.6', '617.85', '1388', '868.5', '1973.75', '5746.75', '4869.35', '6449.15', '7028.5', '576.95', '741.5', '916', '2696.55', '2212.55', '2117.2', '7804.15', '646.85', '6137', '278.85', '7171.7', '174.8', '214.55', '8312.4', '825.1', '3687.85', '4520.15', '5681.1', '475.7', '20.8', '2001.5', '302.45', '1747.2', '174.2', '5776.45', '1166.7', '1359.7', '8126.65', '936.7', '27.55', '4741.45', '1509.9', '4913.3', '1021.55', '2276.1', '18.8', '6840.95', '4303.65', '732.5', '48.75', '3557.7', '1974.8', '3901.25', '3713.95', '102.45', '76.95', '1311.75', '7482.1', '1470.05', '6519.75', '5886.85', '4494.65', '433.5', '412.55', '3512.15', '6373.1', '7542.25', '2348.45', '4014.2', '170.9', '2656.3', '5193.2', '777.3', '6179.35', '3273.95', '2136.9', '294.9', '174.7', '6029.9', '1299.1', '693.3', '957.1', '2357.75', '2781.85', '3862.55', '3439', '7238.6', '847.25', '401.85', '2109.35', '6501.35', '3704.15', '104.2', '5720.35', '6588.95', '1328.15', '72', '994.55', '244.75', '6176.6', '184.15', '45.55', '5102.35', '1612.2', '4925.35', '21', '4526.85', '2839.45', '3139.8', '6770.5', '1566.75', '25.75', '939.8', '2716.3', '4461.85', '351.55', '78.45', '55.05', '1258.6', '385.55', '2003.6', '2896.55', '2034.25', '1901.05', '711.95', '194.2', '454.05', '3894.4', '377.85', '3638.25', '47.7', '7283.25', '4211.55', '1676.95', '6671.7', '19.05', '436.9', '163.55', '2603.1', '1297.35', '1776.45', '4631.7', '5264.25', '746.75', '3027.25', '4445.3', '669.45', '3236.35', '2193', '6109.65', '2684.85', '851.2', '7035.6', '4885.85', '1434.6', '982.95', '2333.05', '2511.3', '1129.35', '1004.5', '5084.65', '3004.15', '71.55', '7953.25', '2597.6', '3527.6', '2338.35', '5497.05', '4386.2', '2326.05', '497.6', '6110.75', '2874.45', '3301.05', '475.25', '583.45', '2341.5', '7227.45', '326.8', '682.1', '8003.8', '2209.75', '2755.35', '978', '6330.4', '49', '98.35', '7714.65', '1138.8', '71.25', '1303.5', '1017.35', '35.55', '2576.8', '99.75', '85.8', '6448.05', '1329.15', '296.1', '5386.5', '2727.8', '1653.45', '6078.75', '5301.1', '1379.8', '1357.1', '153.95', '2168.9', '5885.4', '1441.8', '1266.4', '1901', '641.25', '1623.4', '673.25', '707.5', '697.25', '678.2', '414.1', '7007.6', '6921.7', '1836.9', '1859.1', '4652.4', '1234.6', '1081.25', '5860.7', '96.05', '453.4', '521.8', '1247.75', '247.25', '186.3', '134.5', '451.1', '4428.45', '387.4', '6743.55', '137.95', '4029.95', '1006.9', '7845.8', '1326.25', '452.8', '1916', '1750.7', '219', '1156.55', '4122.9', '571.05', '245.2', '1679.4', '2790.65', '612.95', '5731.45', '929.3', '2361.8', '5448.6', '4653.25', '73', '2727.3', '6164.7', '6333.8', '193.8', '3887.85', '7711.45', '1937.4', '55.45', '3857.1', '1414.2', '1683.7', '2020.9', '1813.1', '3861.45', '1253.65', '1108', '7711.25', '3273.8', '298.35', '493.95', '705.45', '933.3', '30.5', '3865.45', '1537.85', '819.95', '4542.35', '3956.7', '2602.9', '8277.05', '714.15', '2447.45', '4759.55', '6758.45', '80.2', '4807.35', '267', '808.95', '1790.35', '4547.25', '2598.95', '1742.95', '2448.75', '931.75', '1442', '7181.25', '5071.05', '659.65', '3001.2', '6631.85', '2697.4', '89.3', '934.1', '1483.25', '1160.45', '7266.95', '6316.2', '930.05', '762.5', '7508.55', '2094.9', '757.1', '4266.4', '3632', '4527.45', '601.25', '2416.1', '3581.6', '5315.8', '864.2', '6713.2', '5811.8', '469.85', '5764.7', '419.7', '6747.35', '741', '2264.5', '1032', '250.8', '790.15', '784.45', '790.7', '289.1', '1734.5', '828.85', '1093.2', '389.6', '1233.15', '4398.15', '572.45', '51.6', '872.65', '191.35', '7110.75', '4442.75', '3838.75', '865.05', '223.75', '1704.95', '1127.35', '6194.1', '583', '5305.05', '313.45', '2398.4', '930.9', '81.95', '1011.8', '928.4', '116.95', '1875.55', '90.85', '7556.9', '6081.4', '1761.05', '125.5', '1519', '435.25', '438.25', '1901.65', '412.1', '829.55', '1331.05', '3775.85', '89.9', '7493.05', '5931', '1045.25', '2647.1', '5986.55', '1797.1', '139.4', '4754.3', '3563.8', '6710.5', '152.45', '3431.75', '92.5', '1779.95', '5121.3', '810.7', '3254.35', '341.35', '415.05', '1802.15', '1250.1', '3343.15', '78.9', '4922.4', '7475.85', '1432.55', '2165.05', '4549.45', '486.2', '1013.6', '4891.5', '1078.9', '567.45', '1111.2', '7904.25', '5025.8', '86.35', '877.35', '5025', '3432.9', '788.55', '24.2', '572.2', '4995.35', '185.2', '3263.6', '89.1', '327.45', '1174.8', '84.85', '3053', '2823', '4911.05', '6339.3', '2530.4', '7726.35', '946.95', '498.25', '1216.6', '2745.7', '1992.55', '1070.15', '1444.05', '814.75', '1929', '385', '6586.85', '217.1', '1790.65', '1625', '198.25', '1173.35', '3366.05', '1683.6', '781.4', '6428.4', '294.2', '162.3', '5720.95', '34.8', '5231.2', '1623.15', '1563.9', '60.15', '3953.15', '169.65', '8035.95', '6312.9', '4484.05', '5231.3', '5034.05', '5375.15', '200.2', '319.6', '1451.9', '754.5', '4707.85', '1442.6', '222.65', '7173.15', '1810.55', '252', '3886.85', '560.6', '330.6', '723.35', '1800.05', '7053.35', '6205.5', '6859.5', '4903.15', '2043.45', '3902.45', '7320.9', '1818.3', '3653.35', '2510.7', '7854.15', '4882.8', '89.25', '5762.95', '1267.05', '2275.1', '564.4', '46.35', '5614.45', '1061.6', '7840.6', '291.45', '5985', '4779.45', '543.8', '93.4', '74.25', '2345.2', '3365.4', '3580.3', '1374.2', '5029.05', '29.95', '1270.25', '5139.65', '3342.45', '799', '1317.95', '1652.4', '1059.55', '157.55', '3229.4', '7291.75', '6369.45', '1131.5', '949.85', '6292.7', '452.2', '4533.7', '842.25', '1961.6', '4508.65', '1054.6', '7279.35', '1633', '270.8', '4713.4', '1558.65', '1146.65', '4036.85', '1902', '587.4', '558.8', '1074.3', '109.6', '797.1', '399.45', '2747.2', '5016.65', '7774.05', '501', '5976.9', '3766.2', '31.35', '493.65', '248.4', '4993.4', '4991.5', '3627.3', '3954.1', '510.8', '829.3', '550.35', '1103.25', '3847.6', '3121.45', '461.7', '3753.2', '5676.65', '873.4', '2550.9', '959.9', '370.65', '313', '6066.55', '528.45', '536.4', '7285.7', '3762', '3330.1', '5757.2', '1654.75', '2264.05', '1212.1', '7470.1', '164.6', '1538.6', '7748.75', '5861.75', '941', '5645.8', '1952.8', '2688.45', '853', '6302.85', '713.1', '1641.8', '918.6', '2614.1', '257', '5743.05', '914', '1037.75', '756.4', '5980.75', '172.35', '658.1', '364.55', '832.05', '5536.5', '5817.45', '846.8', '2479.25', '521.3', '79.7', '111.65', '1364.3', '3036.75', '2796.35', '6733.15', '1545.4', '198.5', '435', '1244.5', '114.15', '4138.9', '7344.45', '1079.45', '6463.15', '52', '1194.3', '3902.6', '1090.6', '5822.3', '5376.4', '2375.2', '1820.9', '1271.8', '1049.6', '667.7', '4863.85', '4408.45', '2908.2', '1776', '1312.45', '8166.8', '950.2', '3119.9', '235.65', '446.8', '5509.3', '3969.35', '94.45', '786.5', '8071.05', '253', '3077', '8248.5', '44.1', '2320.8', '3126.45', '3014.65', '5610.25', '85.7', '522.35', '7082.5', '964.35', '2263.4', '6951.15', '339.9', '1261', '168.2', '1092.35', '436.2', '301.9', '348.15', '2653.65', '2723.4', '6885.75', '168.65', '2936.25', '1498.2', '773.65', '605.9', '95.6', '2985.25', '4116.9', '1893.95', '1837.9', '3520.75', '1070.5', '696.8', '533.9', '61.15', '6562.9', '75.1', '3895.35', '2054.4', '4310.35', '23.45', '2180.55', '4220.35', '396.1', '2835.9', '1924.1', '3166.9', '2351.8', '3454.6', '2624.25', '3238.4', '8496.7', '1785.65', '204.55', '2467.1', '2933.2', '964.9', '1743.9', '910.45', '4285.8', '764.55', '6393.65', '75.55', '704.3', '4378.9', '997.65', '2083.1', '2049.05', '802.35', '297.3', '413.25', '3474.45', '4348.65', '788.35', '577.15', '2867.75', '3562.5', '7690.9', '745.3', '5897.4', '5309.5', '5794.45', '4055.5', '587.7', '291.9', '3593.8', '635.6', '6812.95', '1021.75', '3899.05', '1536.75', '1992.95', '3650.35', '3795.45', '168.6', '1335.2', '81.05', '5224.35', '2937.65', '1794.8', '784.25', '373', '3389.25', '345.9', '5780.7', '4421.95', '776.25', '4946.05', '242.4', '2292.75', '309.4', '3092', '1014.25', '1790.15', '5812', '7932.5', '5135.15', '5166.2', '552.9', '3162.65', '1209.25', '1217.25', '6416.7', '5265.55', '2728.6', '3807.35', '1696.2', '8164.1', '1743.05', '524.5', '5744.35', '1510.3', '76.65', '119.75', '49.25', '3682.45', '5914.4', '5012.1', '3019.7', '74', '6725.5', '2852.4', '3045.75', '5810.9', '306.05', '2234.55', '5727.15', '3875.4', '2708.2', '5453.4', '5243.05', '2347.9', '973.55', '521.1', '3532', '161.65', '2217.15', '4764', '6503.2', '482.8', '1218.45', '294.5', '2193.65', '442.6', '993.15', '2119.5', '5388.15', '2000.2', '2409.9', '509.3', '475', '106.9', '1434.1', '70.8', '875.55', '233.55', '5459.2', '5588.8', '3551.65', '2335.3', '1826.7', '44.45', '225.75', '2201.75', '3009.5', '1067.65', '3482.85', '918.7', '5625.55', '1025.95', '6441.4', '651.4', '1414.65', '502.6', '1189.9', '7752.05', '552.7', '3512.5', '6383.35', '116.65', '1490.95', '429.55', '4267.15', '1423.05', '6869.7', '763.1', '3046.05', '1463.5', '185.6', '655.9', '673.2', '1151.55', '749.35', '472.25', '4946.7', '172.85', '780.2', '4415.75', '4616.05', '55.3', '163.6', '5405.8', '7156.2', '184.95', '320.45', '4555.2', '3990.6', '853.1', '104.3', '631.4', '4949.1', '3729.6', '5232.9', '1226.45', '4554.85', '6487.2', '1230.9', '762.25', '199.85', '1221.65', '208.45', '1975.85', '6129.2', '729.95', '84.4', '1074.65', '440.2', '3369.25', '4131.95', '4820.55', '199.45', '1348.9', '5969.85', '3686.05', '488.65', '606.55', '690.5', '5921.35', '865.8', '514', '1401.15', '791.75', '827.3', '7511.65', '611.45', '1299.8', '1971.15', '1169.35', '1013.35', '1327.4', '1907.85', '75.8', '4097.05', '3008.55', '1238.65', '6597.25', '139.25', '1958.45', '1871.85', '1825.5', '84.8', '1949.4', '463.6', '4307.1', '669.85', '6333.4', '8109.8', '5969.3', '6849.75', '4820.15', '5042.75', '6700.05', '999.8', '4671.7', '2076.05', '855.3', '2016.3', '4575.35', '7446.9', '7629.85', '1095.65', '1618.2', '552.1', '51.2', '8310.55', '1818.9', '5981.65', '2106.3', '1630.4', '477.05', '7303.05', '1281', '3273.55', '2628.6', '189.45', '4872.45', '469.25', '6441.85', '5607.75', '4889.3', '5753.25', '4676.7', '1621.35', '914.6', '970.85', '349.8', '923.5', '3105.55', '736.8', '1278.8', '7966.9', '824.85', '44.95', '8684.8', '3373.4', '5913.95', '573.3', '593.75', '1593.1', '249.4', '7806.5', '4059.35', '1597.25', '129.15', '53.15', '268.4', '4323.45', '4367.35', '3475.55', '1555.65', '1240.15', '1025.05', '3777.15', '5661.7', '418.8', '6185.15', '24.6', '226.8', '3815.4', '313.4', '417', '272.95', '1750.85', '7544.3', '6058.95', '5224.5', '2877.95', '4018.55', '2010.95', '2462.55', '5692.65', '527.5', '59.05', '2791.5', '6668.05', '54.7', '338.1', '3097', '5264.3', '38.25', '6976.75', '931.55', '168.5', '857.25', '1582.75', '5064.85', '1549.75', '94', '2139.2', '1395.05', '108.7', '937.5', '1356.7', '579.4', '5991.05', '3616.25', '7467.55', '3021.3', '1637.3', '7245.9', '4399.5', '3339.05', '163.2', '2433.5', '861.85', '2997.45', '2076.2', '6293.2', '2626.15', '442.45', '2111.3', '5581.05', '792.15', '6143.15', '3027.4', '3320.75', '818.45', '679', '1068.15', '7195.35', '7159.05', '295.55', '419.35', '5125.5', '6254.2', '6148.45', '124.4', '1559.25', '7719.5', '1115.6', '439.75', '144.15', '7111.3', '6511.8', '1651.95', '478.75', '6363.45', '1011.05', '6094.25', '5029.2', '1215.8', '1375.6', '272', '1932.75', '4671.65', '3409.1', '3944.5', '55.55', '5174.35', '1025.15', '1601.2', '35.45', '2939.8', '155.9', '1496.9', '159.45', '307', '5435', '79.9', '475.2', '536.35', '5515.8', '2215.25', '1494.5', '2766.4', '743.75', '1980.3', '979.05', '5953', '3043.7', '2619.15', '1566.9', '6890', '313.6', '6822.15', '7689.95', '1035.5', '411.15', '331.9', '7467.5', '5000.2', '161.95', '1011.5', '1748.55', '502.85', '311.6', '563.65', '6994.6', '79.65', '5083.55', '743.3', '727.85', '1228.65', '1064.65', '1442.65', '1859.2', '31.2', '167.2', '785.75', '424.5', '1215.1', '5555.3', '518.9', '3915.4', '1764.75', '4209.95', '3110.1', '58.3', '90.55', '1445.3', '8013.55', '8317.95', '2245.4', '4953.25', '948.9', '3751.15', '44.35', '6083.1', '2193.2', '2070.05', '1376.5', '335.4', '324.6', '8306.05', '632.2', '593.05', '1740.8', '1416.2', '25.3', '6328.7', '6460.55', '8405', '2042.05', '80.95', '79.95', '837.5', '1532.45', '5809.75', '2062.15', '765.15', '3912.9', '609.9', '160.75', '331.85', '4323.35', '7674.55', '777.35', '223.6', '342.4', '2774.55', '827.45', '4914.9', '4853.75', '2215', '1358.85', '600.15', '2122.45', '4896.35', '834.15', '2762.75', '4178.65', '295.65', '1373.05', '1489.3', '2169.4', '369.15', '4304', '7943.45', '50.8', '3708.4', '187.75', '2809.05', '134.6', '1914.9', '6004.85', '470', '7209', '239.05', '1007.9', '1346.9', '2033.85', '3184.25', '653.15', '2289.9', '639.7', '3888.65', '4326.8', '125.95', '1148.1', '2157.95', '695.85', '252.75', '3207.55', '7611.55', '2038.7', '4236.6', '5336.35', '1646.45', '1281.25', '2028.8', '6914.95', '5040.2', '2633.3', '821.6', '2515.3', '2421.6', '6506.15', '181.1', '3134.7', '1553.95', '2257.75', '7108.2', '5611.75', '422.4', '1712.9', '772.85', '1400.85', '1604.5', '267.4', '220.35', '5427.05', '121.25', '1652.1', '973.45', '5270.6', '838.5', '2511.55', '4615.25', '2250.65', '2274.35', '229.4', '120.25', '1208.15', '3141.7', '2149.05', '2745.2', '3035.35', '4298.45', '6000.1', '864.55', '1727.5', '3948.45', '4639.45', '860.85', '4641.1', '2603.95', '1029.35', '4904.25', '2135.5', '5121.75', '3913.3', '1940.85', '1341.5', '1760.25', '2568.15', '181.6', '7040.85', '300.8', '3043.6', '4308.25', '7895.15', '114.1', '1416.75', '552.95', '3255.35', '144', '3213.75', '6287.3', '5576.3', '3645.05', '6430.9', '6215.35', '357.75', '142.35', '806.95', '126.05', '7707.7', '742.95', '673.1', '107.05', '6028.95', '4627.65', '659.35', '294.95', '34.75', '5676', '856.35', '7432.05', '531.55', '1790.6', '7554.05', '2588.95', '443.9', '903.7', '154.55', '3199', '255.35', '5574.35', '923.1', '819.55', '4146.05', '2239.65', '528.35', '6392.85', '1553.2', '1332.4', '670.35', '1759.55', '1117.55', '3019.1', '547.65', '4830.25', '1244.8', '336.15', '2862.55', '1422.05', '3770', '3444.85', '8250', '221.7', '6585.35', '7984.15', '445.95', '4042.2', '4086.3', '4059.85', '943.1', '606.25', '2879.2', '2287.25', '7852.4', '6555.2', '239.75', '4453.3', '8477.7', '762.1', '1505.15', '466.6', '1742.45', '770.6', '1992.2', '5662.25', '6253', '633.4', '2296.25', '2882.25', '1790.8', '1625.65', '5438.9', '4816.7', '2092.9', '697.65', '3784', '7634.25', '2434.45', '7898.45', '237.7', '3801.3', '141.7', '614.45', '394.1', '1048.85', '1358.6', '470.95', '8240.85', '145.4', '360.35', '1445.95', '3168.75', '795.15', '1747.85', '5511.65', '3765.05', '1857.75', '4895.1', '3515.25'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/metaestimators.py\", line 120, in <lambda> out = lambda *args, **kwargs: self.fn(obj, *args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 493, in decision_function Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 565, in transform Xs = self._fit_transform(X, None, _transform_one, fitted=True) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/compose/_column_transformer.py\", line 435, in _fit_transform return Parallel(n_jobs=self.n_jobs)( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 1041, in __call__ if self.dispatch_one_batch(iterator): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 859, in dispatch_one_batch self._dispatch(tasks) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 777, in _dispatch job = self._backend.apply_async(batch, callback=cb) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 208, in apply_async result = ImmediateResult(func) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/_parallel_backends.py\", line 572, in __init__ self.results = batch() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in __call__ return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py\", line 262, in <listcomp> return [func(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/utils/fixes.py\", line 222, in __call__ return self.function(*args, **kwargs) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 733, in _transform_one res = transformer.transform(X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/pipeline.py\", line 560, in _transform Xt = transform.transform(Xt) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 787, in transform X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/preprocessing/_encoders.py\", line 136, in _transform raise ValueError(msg) ValueError: Found unknown categories ['777.35', '319.6', '2839.95', '7806.6', '911.6', '1252.85', '527.35', '1270.55', '74', '371.65', '71.2', '5817.7', '8033.1', '4362.05', '400.3', '8152.3', '2184.85', '472.25', '439.2', '2029.05', '731.3', '357.15', '2288.7', '1358.6', '6463.15', '6707.15', '165.35', '5511.65', '3771.5', '498.1', '2588.95', '1414.45', '6869.7', '299.2', '4541.9', '6109.65', '1105.4', '1103.25', '575.45', '38.25', '1240.8', '265.35', '3109.9', '98.35', '465.7', '323.45', '6674.65', '1938.05', '8309.55', '882.55', '6735.05', '7843.55', '344.5', '394.1', '2275.1', '369.6', '6652.45', '1888.65', '1316.9', '470.95', '5991.05', '5435.6', '2763.35', '1212.85', '1210.4', '655.85', '1039.45', '253.9', '7397', '644.5', '5815.15', '3330.1', '1178.4', '653.15', '654.5', '2020.9', '539.85', '197.4', '146.9', '4985.9', '4793.8', '876.15', '5321.25', '5567.55', '472.65', '1597.4', '1242.25', '2462.6', '2686.05', '3165.6', '6129.65', '1852.85', '7061.65', '3457.9', '6993.65', '538.2', '1375.6', '342.3', '1017.35', '420.2', '5154.5', '60.15', '3886.05', '2660.2', '1233.4', '3460.95', '551.35', '5731.45', '1588.7', '357.7', '3418.2', '4370.75', '196.9', '2624.25', '1255.1', '4040.65', '6363.45', '2496.7', '6561.25', '1020.2', '212.4', '865.85', '865.8', '1917.1', '765.45', '669', '3066.45', '705.45', '7110.75', '1133.7', '4808.7', '2198.3', '2080.1', '3091.75', '162.3', '3772.5', '106.55', '97.5', '177.4', '644.35', '1958.45', '2879.9', '5948.7', '6588.95', '4684.3', '312.7', '1422.05', '49.25', '853', '5676', '297.3', '7895.15', '1559.15', '5290.45', '2540.1', '1411.65', '958.25', '2095', '118.3', '3342.45', '5655.45', '426.65', '185.6', '682.1', '447.9', '115.95', '2874.15', '1778.5', '2967.35', '2871.5', '44.2', '1671.6', '2789.7', '5886.85', '524.35', '839.65', '1651.95', '1517.5', '267.35', '180.3', '577.6', '6151.9', '876.75', '2438.6', '1625.65', '2627.35', '764.55', '504.05', '1640', '6471.85', '715', '4179.1', '2130.45', '1563.9', '576.7', '1231.85', '973.45', '313', '142.35', '3858.05', '579.4', '2169.75', '3403.4', '1004.35', '44.3', '818.05', '1338.15', '412.55', '224.05', '2070.6', '1664.3', '609.05', '1144.5', '673.1', '544.55', '3474.45', '772.4', '936.7', '1564.4', '426.35', '1074.65', '385', '78.95', '3579.15', '2347.85', '7344.45', '5360.75', '4888.2', '854.9', '790', '1776.45', '706.85', '684.85', '799', '2583.75', '2618.3', '36.55', '1205.05', '4903.15', '3877.65', '681.4', '1071.6', '303.7', '7129.45', '7082.85', '20.85', '688.65', '1336.65', '3092.65', '948.9', '492.55', '168.9', '286.8', '1724.15', '4107.3', '3320.75', '5731.4', '255.25', '1620.25', '4116.8', '452.7', '2157.5', '3019.1', '185.4', '4116.15', '740', '1790.15', '3145.15', '2292.75', '1414.8', '708.8', '6141.65', '93.85', '2248.05', '8100.55', '1626.05', '759.55', '1901', '2249.1', '3478.75', '341.45', '3541.1', '3895.35', '179.85', '4284.2', '2659.45', '1739.6', '381.3', '279.5', '2107.15', '3587.25', '583.3', '2878.75', '7413.55', '3082.1', '2234.55', '890.35', '3017.65', '350.35', '609.65', '35.85', '4391.45', '543.8', '523.5', '3565.65', '1021.75', '7156.2', '929.3', '371.6', '487.95', '6017.65', '4459.8', '3635.15', '3624.3', '194.55', '3128.8', '374.5', '150.6', '7880.25', '1900.25', '365.35', '6474.4', '1007.8', '7181.25', '78.25', '1849.95', '156.85', '189.95', '1592.35', '85.15', '6148.45', '4779.45', '7035.6', '3529.95', '1285.05', '8165.1', '765.15', '1011.8', '5831.2', '3365.4', '44.15', '5436.45', '4421.95', '973.35', '247', '2187.55', '7346.2', '702', '2635', '4965', '3958.85', '852.7', '279.2', '165.45', '1534.75', '8594.4', '5121.75', '1810.85', '239.05', '811.65', '871.4', '1459.35', '3605.6', '1173.35', '248.4', '2070.75', '7261.25', '6010.05', '4750.95', '2724.6', '3107.3', '740.55', '1611.65', '1442.6', '1164.3', '8672.45', '93.45', '1207', '469.85', '1621.35', '819.95', '653.95', '3437.5', '2303.35', '1083.7', '942.95', '143.35', '771.95', '7544.3', '3373.4', '6052.25', '341.35', '4045.65', '7007.6', '2065.15', '1555.65', '1296.8', '1126.35', '3944.5', '4995.35', '950.75', '3119.9', '1035.5', '3656.25', '1540.35', '438.9', '4526.85', '4438.2', '5986.45', '2919.85', '4805.65', '5377.8', '208.7', '2728.6', '4729.3', '440.2', '35.45', '1734.2', '6411.25', '58.85', '7372.65', '229.5', '134.7', '8166.8', '847.3', '1868.4', '6654.1', '3627.3', '3415.25', '169.65', '1363.45', '6895.5', '2135.5', '139.25', '3355.65', '917.15', '1033', '610.2', '2796.45', '2960.1', '3822.45', '33.2', '1714.95', '6603.8', '3965.05', '75.5', '6989.7', '1398.6', '2763', '666', '6239.05', '3725.5', '4908.25', '3219.75', '176.2', '2586', '2812.2', '2012.7', '2007.85', '217.45', '2473.95', '2497.35', '6325.25', '5483.9', '324.6', '418.8', '3902.6', '903.6', '422.6', '220.1', '362.2', '2964.05', '815.55', '1293.8', '1451.6', '91.45', '85.55', '3834.4', '2553.35', '1809.35', '2614.1', '1123.65', '55.8', '1826.7', '201', '1426.4', '5025', '408.5', '4040.2', '119.5', '1174.8', '795.15', '5673.7', '4524.05', '264.85', '446.05', '2848.45', '1696.2', '6425.65', '1037.75', '4237.5', '5574.35', '864.55', '1445.95', '2774.55', '3777.15', '89.75', '1905.7', '2847.4', '2001.5', '2936.25', '1087.45', '7611.85', '465.05', '301.9', '1054.75', '1515.1', '2283.3', '77.6', '58.3', '762.1', '2745.2', '345.9', '307', '1538.6', '6605.55', '1617.5', '1032.05', '4264.25', '109.8', '600', '6000.1', '1510.3', '1454.25', '5629.15', '1502.65', '6856.95', '829.3', '5420.65', '1028.75', '1687.95', '3321.35', '450.65', '1008.55', '600.25', '3370.2', '7383.7', '2723.4', '4549.45', '927.65', '163.55', '452.2', '244.85', '270.95', '994.55', '617.15', '1489.3', '826.1', '3990.6', '6014.85', '797.1', '7532.15', '4753.85', '48.45', '6555.2', '195.05', '355.9', '3741.85', '78.45', '3363.8', '1263.05', '2188.45', '298.35', '3509.4', '1463.5', '3470.8', '4459.15', '1258.3', '672.2', '5193.2', '237.3', '510.8', '250.8', '5542.55', '2572.95', '1221.55', '152.7', '1461.45', '3899.05', '1021.55', '6129.2', '938.65', '3829.75', '4297.95', '53.15', '5895.45', '1616.15', '521.1', '233.7', '74.2', '384.5', '901.25', '1901.65', '6480.9', '3264.45', '4300.8', '7176.55', '528.35', '6383.9', '6352.4', '180.25', '789.2', '5324.5', '866.45', '1728.2', '1267.95', '6912.7', '2854.95', '1342.15', '291.9', '4872.45', '749.35', '524.5', '4138.05', '4874.8', '261.65', '971.3', '2094.9', '597.9', '560.85', '1646.45', '2610.65', '1275.7', '558.8', '3199', '75.1', '5219.65', '659.35', '1886.25', '235.2', '2804.45', '6347.55', '2357.75', '5826.65', '1248.9', '1145.35', '3970.4', '231.45', '7213.75', '6841.3', '2239.4', '4616.1', '2283.15', '2511.95', '3708.4', '1160.45', '4036.85', '2603.95', '3649.6', '1740.7', '5706.2', '4494.65', '187.35', '53.05', '3255.35', '3432.9', '4959.6', '1387.45', '1045.25', '1740.8', '4921.2', '3439', '36.45', '244.65', '275.7', '3953.15', '268.4', '2979.2', '6792.45', '4916.4', '173.15', '1401.4', '999.8', '465.85', '886.4', '1430.05', '53.95', '608.8', '5471.75', '1465.75', '804.25', '2545.75', '2815.25', '365.55', '1593.1', '3089.1', '5969.95', '2424.05', '266.8', '302.75', '2807.65', '3678.3', '1856.4', '4535.85', '7470.1', '3808', '3021.6', '790.15', '5835.5', '101.9', '233.55', '653.25', '186.05', '5461.45', '786.5', '5264.25', '6339.3', '49', '1029.75', '6981.35', '170.9', '3618.7', '1206.05', '4692.55', '912', '1078.75', '2015.35', '875.35', '3673.6', '357', '217.5', '4310.35', '134.35', '2364', '1454.15', '5431.4', '7856', '95', '6562.9', '5817.45', '2716.3', '4126.2', '1212.1', '1622.45', '973.25', '6506.15', '79.95', '1350.15', '2964.8', '7114.25', '386.5', '3457.45', '2312.55', '89.05', '1124.2', '4264.6', '5139.65', '1382.9', '1291.35', '145', '2106.05', '756.4', '4149.45', '1218.65', '4911.05', '1373.05', '302.35', '1253.5', '3517.9', '6871.7', '633.4', '1614.05', '3131.8', '296.1', '6859.5', '5688.45', '6292.7', '429.55', '204.55', '3444.85', '3754.6', '5073.1', '1801.1', '340.25', '4783.5', '1916', '209.9', '331.9', '655.3', '6001.45', '3541.35', '273.4', '301.55', '2324.7', '7362.9', '2293.6', '1686.15', '1800.05', '1558.65', '5617.95', '2511.3', '1490.4', '3794.5', '6306.5', '521', '6126.15', '1531.4', '287.4', '6161.9', '2136.9', '370.5', '1837.9', '5614.45', '3706.95', '583', '79.8', '3778.85', '849.1', '59.55', '1011.05', '2443.3', '2076.05', '1520.9', '1258.35', '2238.5', '1992.85', '527.5', '853.1', '2198.9', '1208.15', '263.05', '1637.3', '2405.05', '2258.25', '3930.6', '94.45', '369.1', '1734.65', '184.65', '990.3', '545.15', '154.3', '941', '5468.45', '4805.3', '145.15', '3623.95', '260.7', '8297.5', '934.15', '191.05', '8086.4', '3759.05', '842.9', '415.95', '2970.3', '1245.6', '1191.2', '2387.75', '1252', '358.5', '406.05', '4018.55', '368.85', '7758.9', '4060.55', '221.7', '6871.9', '2877.05', '711.9', '2298.55', '5265.1', '762.45', '302.6', '3641.5', '7475.85', '215.2', '158.4', '1710.9', '5186', '257.6', '307.6', '5957.9', '2460.55', '4549.05', '7511.3', '1529.65', '73.05', '485.9', '548.9', '1700.9', '3994.45', '2361.8', '153.95', '1397.65', '7142.5', '3707.6', '5598', '6589.6', '94.5', '682.15', '5825.5', '1444.65', '4085.75', '1559.45', '391.7', '3673.15', '732.5', '4136.4', '4539.35', '2931', '1462.6', '3756.4', '505.95', '6018.65', '1323.7', '6118.95', '2193.65', '485.2', '1253.15', '1525.35', '395.6', '4811.6', '141.5', '6782.15', '1303.25', '3902.45', '90.1', '3756.45', '8317.95', '378.4', '1460.65', '2492.25', '81.1', '2006.1', '1424.6', '4824.45', '716.4', '587.45', '770.6', '4689.5', '56.25', '3442.8', '360.55', '1425.45', '6405', '207.4', '95.1', '959.9', '5860.7', '1692.6', '1399.35', '7051.95', '422.4', '639.65', '452.8', '1698.55', '4664.5', '4213.9', '546.95', '1233.25', '927.1', '315.3', '1028.9', '293.3', '2983.65', '6689', '7030.65', '369.15', '7922.75', '358.05', '797.25', '5264.3', '3966.3', '1406', '1275.85', '75.8', '1798.65', '338.1', '215.8', '4111.35', '1388.75', '773.65', '144.95', '993.15', '159.35', '7898.45', '4003', '1497.9', '2139.2', '3344.1', '5411.4', '104.3', '2092.9', '428.45', '7049.75', '857.25', '1301.7', '805.1', '5763.15', '4784.45', '7511.65', '412.1', '5037.55', '68.45', '45.55', '492.1', '759.35', '333.55', '272.2', '5315.8', '832.3', '900.5', '5067.45', '5481.25', '105.6', '390.4', '5538.8', '2122.45', '1990.5', '401.1', '4176.7', '939.7', '3420.5', '273', '321.9', '4671.65', '87.9', '4917.9', '251.25', '781.25', '3574.5', '8124.2', '476.8', '718.55', '1789.25', '958.15', '2134.3', '6951.15', '2549.1', '5265.5', '5846.65', '3121.1', '605.45', '5129.45', '3375.9', '3582.4', '1600.95', '1415.85', '645.8', '4504.9', '5610.7', '536.4', '1138.8', '2337.45', '153.05', '520', '5341.8', '6448.05', '706.6', '3766.2', '3021.45', '381.2', '54.75', '919.4', '4993.4', '45.35', '845.25', '1329.2', '1447.9', '24.05', '1756.2', '4914.9', '194.2', '34.7', '514.75', '1530.6', '7039.05', '2000.2', '3053', '3088.75', '3173.35', '493.95', '5215.25', '3532', '7882.5', '4186.3', '1982.6', '1233.15', '743.5', '595.05', '116.65', '252', '73.65', '4517.25', '611.65', '1752.45', '216.45', '1129.75', '1147.45', '6843.15', '689.35', '5791.1', '1816.2', '1290', '2896.4', '396.1', '256.75', '4615.25', '113.85', '2665', '3875.4', '139.75', '1178.75', '186.15', '3487.95', '146.65', '5776.45', '4354.45', '1863.8', '251.6', '348.8', '3213.75', '893.55', '604.7', '4641.1', '6841.4', '325.45', '695.75', '6430.9', '7111.3', '579', '641.35', '739.9', '7789.6', '6474.45', '5743.05', '2680.15', '4322.85', '492', '6520.8', '5305.05', '161.5', '1612.75', '4042.2', '270.6', '6470.1', '864.2', '1564.05', '2169.8', '2799', '5308.7', '422.5', '8337.45', '5069.65', '1914.5', '1319.95', '139.05', '20.7', '1802.55', '717.95', '1334.45', '1505.15', '388.6', '6710.5', '1097.15', '3252', '154.8', '2249.95', '79.5', '76.4', '6925.9', '51.15', '2847.2', '3019.5', '3465.7', '222.65', '4299.75', '6096.9', '1265.65', '541.9', '921.3', '893.2', '1403.1', '3791.6', '5293.2', '4068', '5135.35', '7262', '4786.1', '838.7', '1715.65', '4158.25', '2424.45', '7609.75', '237.2', '1170.5', '5215.1', '123.05', '2708.2', '6375.8', '4036', '601.25', '2341.55', '5607.75', '860.85', '102.75', '967.85', '5586.45', '178.85', '4872.35', '4025.6', '5411.65', '1760.25', '927.35', '18.9', '1362.85', '5460.2', '470', '4200.25', '4209.95', '149.55', '6889.8', '1250.1', '4671.7', '3581.6', '930.4', '7412.25', '5243.05', '6744.2', '1112.3', '4968', '89.55', '1767.35', '632.95', '1793.25', '4428.45', '180.7', '6263.8', '73.5', '1288.3', '6143.15', '2414.55', '1052.4', '1215.6', '82.85', '2401.05', '2122.05', '111.05', '7349.35', '72.1', '813.3', '900.9', '608', '5040.2', '1400.55', '6578.55', '3023.65', '6602.9', '1043.8', '846', '837.95', '595.5', '7251.9', '24.25', '293.85', '1195.95', '1294.6', '385.9', '7279.35', '6529.25', '289.1', '733.95', '6252.7', '29.9', '780.2', '5656.75', '79.1', '1067.05', '4408.45', '1083', '345.5', '1222.05', '223.75', '85.7', '235.1', '3462.1', '269.65', '820.5', '1845.9', '939.8', '1385.85', '3880.05', '220.8', '5798.3', '4947.55', '5244.45', '2684.35', '5163.3', '1208.35', '1761.45', '392.5', '1813.1', '2613.4', '1775.8', '3539.25', '5396.25', '2309.55', '330.15', '1260.7', '1871.15', '7990.05', '2541.25', '4154.8', '1939.35', '3912.9', '1055.9', '4932.5', '8175.9', '2723.75', '3808.2', '2265.25', '1654.7', '1426.75', '5064.45', '4317.35', '144', '1905.4', '4131.2', '1022.95', '31.9', '6441.85', '1689.45', '1151.05', '1178.25', '855.1', '80.35', '7365.3', '1763.55', '1983.15', '3096.9', '612.1', '4014', '8399.15', '4885.85', '6841.05', '4759.55', '2200.7', '5746.75', '331.3', '244.75', '5750', '1023.85', '1539.45', '3865.6', '855.3', '1859.1', '4915.15', '1216.6', '1672.15', '1439.35', '837.5', '8476.5', '5376.4', '696.35', '5913.95', '21', '5602.25', '94', '1119.35', '5848.6', '349.8', '1565.7', '1166.7', '4126.35', '5917.55', '1099.6', '4839.15', '1648.45', '1993.25', '1520.1', '51.6', '903.8', '224.5', '651.4', '2509.95', '1010', '40.25', '3398.9', '377.55', '7713.55', '4254.85', '4338.6', '945.7', '79.9', '679.55', '186.3', '114.15', '4872.2', '1337.5', '522.35', '3023.85', '6067.4', '918.75', '711.15', '414.95', '572.2', '970.45', '7939.25', '434.1', '295.65', '581.85', '47.7', '7210.85', '829.1', '6779.05', '684.4', '7446.9', '6055.55', '4914.8', '3181.8', '25.35', '707.5', '3692.85', '677.05', '629.55', '2033.85', '110.15', '6962.85', '396.3', '712.75', '1483.25', '2546.85', '4828.05', '3744.05', '5459.2', '3949.15', '3862.55', '2395.7', '404.35', '4653.85', '5621.85', '8312.75', '784.25', '2793.55', '7107', '2606.35', '1079.65', '7325.1', '6936.85', '68.95', '3870', '73.6', '317.75', '7467.5', '749.25', '541.5', '147.55', '3266', '389.6', '6812.95', '1784.9', '689', '8349.45', '59.25', '6819.45', '119.3', '909.25', '1123.15', '7919.8', '371.4', '684.05', '1343.4', '6376.55', '6393.65', '996.95', '798.2', '3316.1', '4220.35', '1888.25', '4273.45', '5898.6', '35', '1743.05', '1776.55', '4458.15', '2077.95', '442.6', '916.75', '3231.05', '832.05', '39.85', '1438.05', '3483.45', '7288.4', '6230.1', '789.55', '514.6', '3645.5', '5639.05', '78.8', '2656.7', '5084.65', '2555.05', '415.4', '5791.85', '581.7', '5163', '75.6', '324.25', '3190.65', '868.5', '7842.3', '246.6', '950.2', '808.95', '420.45', '999.45', '45.85', '818.45', '100.9', '1715.1', '1783.6', '8564.75', '5468.95', '3027.25', '2762.75', '4801.1', '3340.55', '53.55', '1864.2', '141.45', '7932.5', '3019.7', '1269.55', '85.8', '184.15', '709.5', '3038.55', '893', '195.3', '4973.4', '3605.2', '518.3', '4837.6', '201.7', '5958.85', '6223.3', '3845.45', '109.6', '2985.25', '76.2', '733.35', '1007.9', '8477.7', '5082.8', '6585.35', '685.55', '6503.2', '1003.05', '3687.85', '3670.5', '5301.1', '70.5', '3901.25', '1313.25', '693.3', '5309.5', '1302.65', '2838.55', '1306.3', '45.05', '81.7', '6401.25', '1441.8', '651.5', '573.05', '1772.25', '150.85', '55.45', '7521.95', '1523.4'] in column 15 during transform warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:610: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 593, in _fit_and_score estimator.fit(X_train, y_train, **fit_params) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 284, in fit return self._fit(X, y, metric_special, metric_missing, show_digits, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/scorecard/scorecard.py\", line 503, in _fit X_t = self.binning_process_.fit_transform( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 676, in fit_transform return self.fit(X, y, check_input).transform(X, metric, metric_special, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 589, in fit return self._fit(X, y, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 1067, in _fit dtype, optb = _fit_variable( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning_process.py\", line 116, in _fit_variable optb.fit(x, y) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 529, in fit return self._fit(x, y, sample_weight, check_input) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/binning.py\", line 693, in _fit sw_special, sw_others] = split_data( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 258, in split_data categories, x_clean = categorical_transform(x_clean, y_clean) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/optbinning/binning/preprocessing.py\", line 24, in categorical_transform event_rate = pd.Series(y).groupby(x).mean() File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1496, in mean return self._cython_agg_general( File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/pandas/core/groupby/groupby.py\", line 1081, in _cython_agg_general raise DataError(\"No numeric types to aggregate\") pandas.core.base.DataError: No numeric types to aggregate warnings.warn(\"Estimator fit failed. The score on this train-test\" {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.028', 'fit_time_std': '0.001', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '3.390', 'fit_time_std': '0.059', 'test_score_mean': '0.764', 'test_score_std': '0.014'} {'model_name': 'rf-100', 'fit_time_mean': '7.481', 'fit_time_std': '0.009', 'test_score_mean': '0.824', 'test_score_std': '0.002'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '66.219', 'fit_time_std': '0.255', 'test_score_mean': '0.825', 'test_score_std': '0.003'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '53.015', 'fit_time_std': '7.524', 'test_score_mean': '0.852', 'test_score_std': '0.004'} dataset = load_heart_data () result = benchmark_models ( 'heart' , dataset [ 'full' ][ 'X' ], dataset [ 'full' ][ 'y' ], n_splits = n_splits ) results . append ( result ) ------------------------------------------------------------------------------ heart ------------------------------------------------------------------------------ {'dataset_name': 'heart'} {'model_name': 'lr_ohe', 'fit_time_mean': '0.007', 'fit_time_std': '0.000', 'test_score_mean': '0.895', 'test_score_std': '0.030'} {'model_name': 'lr_ordinal', 'fit_time_mean': '0.007', 'fit_time_std': '0.000', 'test_score_mean': '0.895', 'test_score_std': '0.030'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:683: UserWarning: Scoring failed. The score on this train-test partition for these parameters will be set to nan. Details: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 334, in _score y_pred = method_caller(clf, \"decision_function\", X) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 53, in _cached_call return getattr(estimator, method)(*args, **kwargs) AttributeError: 'Scorecard' object has no attribute 'decision_function' During handling of the above exception, another exception occurred: Traceback (most recent call last): File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 674, in _score scores = scorer(estimator, X_test, y_test) File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 199, in __call__ return self._score(partial(_cached_call, None), estimator, X, y_true, File \"/Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/sklearn/metrics/_scorer.py\", line 353, in _score y_pred = self._select_proba_binary(y_pred, clf.classes_) AttributeError: 'Scorecard' object has no attribute 'classes_' warnings.warn( {'model_name': 'optbinning.scorecard', 'fit_time_mean': '0.561', 'fit_time_std': '0.045', 'test_score_mean': 'nan', 'test_score_std': 'nan'} {'model_name': 'skorecard', 'fit_time_mean': '1.955', 'fit_time_std': '0.003', 'test_score_mean': '0.911', 'test_score_std': '0.015'} {'model_name': 'rf-100', 'fit_time_mean': '0.177', 'fit_time_std': '0.002', 'test_score_mean': '0.890', 'test_score_std': '0.008'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/xgboost/sklearn.py:1146: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1]. warnings.warn(label_encoder_deprecation_msg, UserWarning) {'model_name': 'xgb', 'fit_time_mean': '0.239', 'fit_time_std': '0.044', 'test_score_mean': '0.851', 'test_score_std': '0.018'} /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, /Users/ue86yw/Developer/miniconda3/envs/py38/lib/python3.8/site-packages/joblib/parallel.py:733: UserWarning: Multiprocessing-backed parallel loops cannot be nested, below loky, setting n_jobs=1 n_jobs = self._backend.configure(n_jobs=self.n_jobs, parallel=self, {'model_name': 'ebm', 'fit_time_mean': '1.147', 'fit_time_std': '0.327', 'test_score_mean': '0.906', 'test_score_std': '0.011'} records = [ item for result in results for item in result ] record_df = pd . DataFrame . from_records ( records )[[ 'dataset_name' , 'model_name' , 'test_score_mean' , 'test_score_std' ]] record_df = record_df . sort_values ([ 'dataset_name' , 'test_score_mean' ], ascending = False ) print ( record_df [ record_df [ 'model_name' ] . isin ([ 'lr_ohe' , 'lr_ordinal' , 'rf-100' , 'skorecard' , 'xgb' ])] . drop ([ 'test_score_std' ], axis = 1 ) . to_markdown ( tablefmt = \"github\" , showindex = False )) | dataset_name | model_name | test_score_mean | |----------------|--------------|-------------------| | telco_churn | lr_ordinal | nan | | telco_churn | xgb | 0.825 | | telco_churn | rf-100 | 0.824 | | telco_churn | lr_ohe | 0.809 | | telco_churn | skorecard | 0.764 | | heart | skorecard | 0.911 | | heart | lr_ohe | 0.895 | | heart | lr_ordinal | 0.895 | | heart | rf-100 | 0.89 | | heart | xgb | 0.851 | | breast-cancer | skorecard | 0.996 | | breast-cancer | lr_ohe | 0.994 | | breast-cancer | lr_ordinal | 0.994 | | breast-cancer | rf-100 | 0.992 | | breast-cancer | xgb | 0.992 | | adult | xgb | 0.927 | | adult | lr_ohe | 0.906 | | adult | rf-100 | 0.903 | | adult | skorecard | 0.888 | | adult | lr_ordinal | 0.855 | | UCI-creditcard | skorecard | 0.627 | | UCI-creditcard | lr_ohe | 0.621 | | UCI-creditcard | lr_ordinal | 0.621 | | UCI-creditcard | xgb | 0.596 | | UCI-creditcard | rf-100 | 0.588 |","title":"EBM benchmark with skorecard"},{"location":"discussion/benchmarks/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Benchmarks \u00b6 Against some alternatives. Data \u00b6 UCI Credit card dataset with 30k rows and 23 features. import pandas as pd from skorecard.datasets import load_credit_card from sklearn.model_selection import train_test_split data = load_credit_card ( as_frame = True ) print ( f \"data shape: { data . shape } \" ) X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) data shape: (30000, 24) Experiment setup \u00b6 from sklearn.metrics import roc_auc_score def report_auc ( clf , X_train , y_train , X_test , y_test ): proba_train = clf . predict_proba ( X_train )[:, 1 ] proba_test = clf . predict_proba ( X_test )[:, 1 ] auc_train = round ( roc_auc_score ( y_train , proba_train ), 4 ) auc_test = round ( roc_auc_score ( y_test , proba_test ), 4 ) return auc_train , auc_test from memo import memlist , time_taken data = [] @memlist ( data = data ) @time_taken () def fit_eval_record ( clf , name ): clf . fit ( X_train , y_train ) auc_train , auc_test = report_auc ( clf , X_train , y_train , X_test , y_test ) return { 'auc_train' : auc_train , 'auc_test' : auc_test } Baseline \u00b6 from skorecard import Skorecard scorecard = Skorecard () fit_eval_record ( scorecard , name = \"skorecard.Scorecard\" ) {'auc_train': 0.7727, 'auc_test': 0.766, 'time_taken': 7.23} # from sklearn.pipeline import make_pipeline # from sklearn.linear_model import LogisticRegression # from skorecard.preprocessing import WoeEncoder # from skorecard.bucketers import DecisionTreeBucketer, OptimalBucketer # from category_encoders.woe import WOEEncoder # pipe = make_pipeline( # DecisionTreeBucketer(), # OptimalBucketer(), # #WoeEncoder(), # WOEEncoder(cols=X_train.columns), # LogisticRegression(solver=\"lbfgs\", max_iter=400) # ) # fit_eval_record(pipe, name=\"pipeline\") # # .7166 with skorecard woe in 3.7s # # 0.758 with no WOE in 3.9s # # 0.7661 with WOE on all cols. Optbinning \u00b6 http://gnpalencia.org/optbinning/ from optbinning import BinningProcess from optbinning import Scorecard from sklearn.linear_model import LogisticRegression import pandas as pd selection_criteria = { \"iv\" : { \"min\" : 0.02 , \"max\" : 1 }, \"quality_score\" : { \"min\" : 0.01 } } binning_process = BinningProcess ( variable_names = list ( X_train . columns ), selection_criteria = selection_criteria ) estimator = LogisticRegression ( solver = \"lbfgs\" ) opt_scorecard = Scorecard ( binning_process = binning_process , estimator = estimator , scaling_method = \"min_max\" , scaling_method_params = { \"min\" : 300 , \"max\" : 850 }) fit_eval_record ( opt_scorecard , name = \"optbinning.Scorecard\" ) {'auc_train': 0.7719, 'auc_test': 0.7628, 'time_taken': 1.81} Basic LR \u00b6 from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.pipeline import make_pipeline pipe = make_pipeline ( StandardScaler (), LogisticRegression ( random_state = 42 , solver = \"lbfgs\" ) ) fit_eval_record ( pipe , name = \"sklearn.LogisticRegression\" ) {'auc_train': 0.724, 'auc_test': 0.7232, 'time_taken': 0.14} LightGBM model \u00b6 https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMClassifier.html from lightgbm import LGBMClassifier clf = LGBMClassifier ( random_state = 42 , max_depth = 10 , learning_rate = 0.01 ) fit_eval_record ( clf , name = \"LightGBM\" ) {'auc_train': 0.8038, 'auc_test': 0.7778, 'time_taken': 0.28} Results \u00b6 pd . DataFrame ( data ) . sort_values ( 'auc_test' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name auc_train auc_test time_taken 3 LightGBM 0.8038 0.7778 0.28 0 skorecard.Scorecard 0.7727 0.7660 7.23 1 optbinning.Scorecard 0.7719 0.7628 1.81 2 sklearn.LogisticRegression 0.7240 0.7232 0.14","title":"Benchmarks"},{"location":"discussion/benchmarks/#benchmarks","text":"Against some alternatives.","title":"Benchmarks"},{"location":"discussion/benchmarks/#data","text":"UCI Credit card dataset with 30k rows and 23 features. import pandas as pd from skorecard.datasets import load_credit_card from sklearn.model_selection import train_test_split data = load_credit_card ( as_frame = True ) print ( f \"data shape: { data . shape } \" ) X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) data shape: (30000, 24)","title":"Data"},{"location":"discussion/benchmarks/#experiment-setup","text":"from sklearn.metrics import roc_auc_score def report_auc ( clf , X_train , y_train , X_test , y_test ): proba_train = clf . predict_proba ( X_train )[:, 1 ] proba_test = clf . predict_proba ( X_test )[:, 1 ] auc_train = round ( roc_auc_score ( y_train , proba_train ), 4 ) auc_test = round ( roc_auc_score ( y_test , proba_test ), 4 ) return auc_train , auc_test from memo import memlist , time_taken data = [] @memlist ( data = data ) @time_taken () def fit_eval_record ( clf , name ): clf . fit ( X_train , y_train ) auc_train , auc_test = report_auc ( clf , X_train , y_train , X_test , y_test ) return { 'auc_train' : auc_train , 'auc_test' : auc_test }","title":"Experiment setup"},{"location":"discussion/benchmarks/#baseline","text":"from skorecard import Skorecard scorecard = Skorecard () fit_eval_record ( scorecard , name = \"skorecard.Scorecard\" ) {'auc_train': 0.7727, 'auc_test': 0.766, 'time_taken': 7.23} # from sklearn.pipeline import make_pipeline # from sklearn.linear_model import LogisticRegression # from skorecard.preprocessing import WoeEncoder # from skorecard.bucketers import DecisionTreeBucketer, OptimalBucketer # from category_encoders.woe import WOEEncoder # pipe = make_pipeline( # DecisionTreeBucketer(), # OptimalBucketer(), # #WoeEncoder(), # WOEEncoder(cols=X_train.columns), # LogisticRegression(solver=\"lbfgs\", max_iter=400) # ) # fit_eval_record(pipe, name=\"pipeline\") # # .7166 with skorecard woe in 3.7s # # 0.758 with no WOE in 3.9s # # 0.7661 with WOE on all cols.","title":"Baseline"},{"location":"discussion/benchmarks/#optbinning","text":"http://gnpalencia.org/optbinning/ from optbinning import BinningProcess from optbinning import Scorecard from sklearn.linear_model import LogisticRegression import pandas as pd selection_criteria = { \"iv\" : { \"min\" : 0.02 , \"max\" : 1 }, \"quality_score\" : { \"min\" : 0.01 } } binning_process = BinningProcess ( variable_names = list ( X_train . columns ), selection_criteria = selection_criteria ) estimator = LogisticRegression ( solver = \"lbfgs\" ) opt_scorecard = Scorecard ( binning_process = binning_process , estimator = estimator , scaling_method = \"min_max\" , scaling_method_params = { \"min\" : 300 , \"max\" : 850 }) fit_eval_record ( opt_scorecard , name = \"optbinning.Scorecard\" ) {'auc_train': 0.7719, 'auc_test': 0.7628, 'time_taken': 1.81}","title":"Optbinning"},{"location":"discussion/benchmarks/#basic-lr","text":"from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.pipeline import make_pipeline pipe = make_pipeline ( StandardScaler (), LogisticRegression ( random_state = 42 , solver = \"lbfgs\" ) ) fit_eval_record ( pipe , name = \"sklearn.LogisticRegression\" ) {'auc_train': 0.724, 'auc_test': 0.7232, 'time_taken': 0.14}","title":"Basic LR"},{"location":"discussion/benchmarks/#lightgbm-model","text":"https://lightgbm.readthedocs.io/en/latest/pythonapi/lightgbm.LGBMClassifier.html from lightgbm import LGBMClassifier clf = LGBMClassifier ( random_state = 42 , max_depth = 10 , learning_rate = 0.01 ) fit_eval_record ( clf , name = \"LightGBM\" ) {'auc_train': 0.8038, 'auc_test': 0.7778, 'time_taken': 0.28}","title":"LightGBM model"},{"location":"discussion/benchmarks/#results","text":"pd . DataFrame ( data ) . sort_values ( 'auc_test' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name auc_train auc_test time_taken 3 LightGBM 0.8038 0.7778 0.28 0 skorecard.Scorecard 0.7727 0.7660 7.23 1 optbinning.Scorecard 0.7719 0.7628 1.81 2 sklearn.LogisticRegression 0.7240 0.7232 0.14","title":"Results"},{"location":"howto/Optimizations/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Optimizing the bucketing process \u00b6 import pandas as pd from skorecard.datasets import load_credit_card df = load_credit_card ( as_frame = True ) # Show display ( df . head ( 4 )) num_feats = [ 'x1' , 'x15' , 'x16' ] X = df [ num_feats ] y = df [ 'y' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x15 x16 x17 x18 x19 x20 x21 x22 x23 y 0 20000.0 2.0 2.0 1.0 24.0 2.0 2.0 -1.0 -1.0 -2.0 ... 0.0 0.0 0.0 0.0 689.0 0.0 0.0 0.0 0.0 1 1 120000.0 2.0 2.0 2.0 26.0 -1.0 2.0 0.0 0.0 0.0 ... 3272.0 3455.0 3261.0 0.0 1000.0 1000.0 1000.0 0.0 2000.0 1 2 90000.0 2.0 2.0 2.0 34.0 0.0 0.0 0.0 0.0 0.0 ... 14331.0 14948.0 15549.0 1518.0 1500.0 1000.0 1000.0 1000.0 5000.0 0 3 50000.0 2.0 2.0 1.0 37.0 0.0 0.0 0.0 0.0 0.0 ... 28314.0 28959.0 29547.0 2000.0 2019.0 1200.0 1100.0 1069.0 1000.0 0 4 rows \u00d7 24 columns Finding the best bucketing \u00b6 The art of building a good scorecard model lies in finding the best bucketing strategy. Good buckets improve the predicitve power of the model, as well as guarantee stability of the predictions. This is normally a very manual, labour intensive process (and for a good reason). A good buckets follow the following principles: - maximize the Information Value, defined as \\[IV = \\sum_{i}(\\%G_{i}-\\%B_{i})\\dot\\log(\\frac{\\%G_{i}}{\\%B_{i}})\\] avoid buckets that contain a very large or very small fraction of the population wherever the business sense requires it, The skorecard package provides some tooling to automate part of the process, namely: Grid search the hyper-parameters of the bucketers in order to maximise the information value Run the optimal bucketer within the bucketing process Grid search the bucketers to maximise the information value \u00b6 skorecard implements an IV_scorer , that can be used as a custom scoring function for grid searching. The following snippets of code show how to integrate it in the grid search. The DecisionTreeBucketer applied on numerical features is the best use case, as there are some hyper-parameters that influence the bucketing quality. from skorecard.metrics import IV_scorer from skorecard.bucketers import DecisionTreeBucketer from sklearn.model_selection import GridSearchCV The DecisionTreeBucketer has two main hyperparameters to grid-search: - max_n_bins , maximum number of bins allowed for the bucketing - min_bin_size minimum fraction of data in the buckets gs_params = { \"max_n_bins\" : [ 3 , 4 , 5 , 6 ], \"min_bin_size\" : [ 0.05 , 0.06 , 0.07 , 0.08 ], #, 0.12] } The optimization has to be done for every feature indipendently, therefore we need a loop, and all the parameters are best stored in a data collector, like a dictionary # Define the specials best_params = dict () max_iv = dict () cv_results = dict () # Add a special for demo purposes specials = { 'x1' :{ 'special 0' :[ '50000.0' ]}} for feat in num_feats : #This snippet illustrates what to do with special values if feat in specials . keys (): # This construct is needed to remap the specials, because skorecard validates that the key # of the dictionary is present in the variables special = { feat : specials [ feat ]} else : special = {} bucketer = DecisionTreeBucketer ( variables = [ feat ], specials = special ) gs = GridSearchCV ( bucketer , gs_params , scoring = IV_scorer , cv = 3 , return_train_score = True ) gs . fit ( X [[ feat ]], y ) best_params [ feat ] = gs . best_params_ max_iv [ feat ] = gs . best_score_ cv_results [ feat ] = gs . cv_results_ Checking the best parameters per feature best_params {'x1': {'max_n_bins': 6, 'min_bin_size': 0.05}, 'x15': {'max_n_bins': 6, 'min_bin_size': 0.08}, 'x16': {'max_n_bins': 6, 'min_bin_size': 0.05}} Because of its additive nature, IV is likely to be maximal for the highest max_n_bins . Therefore it is worth looking analysing the CV results! cv_results [ 'x1' ] {'mean_fit_time': array([0.09358168, 0.08749469, 0.08900897, 0.08818277, 0.08763576, 0.08831199, 0.08456341, 0.08533502, 0.08416621, 0.09112167, 0.0896643 , 0.0931441 , 0.09968567, 0.09904973, 0.10114026, 0.09465035]), 'std_fit_time': array([0.00568708, 0.00219181, 0.00041746, 0.00208567, 0.00033371, 0.00090009, 0.00135716, 0.00064736, 0.0008165 , 0.00254417, 0.00449863, 0.00616635, 0.00619145, 0.0090274 , 0.00619416, 0.00552724]), 'mean_score_time': array([0.01997574, 0.02116672, 0.02150178, 0.02093689, 0.02005355, 0.02037962, 0.0198973 , 0.02062575, 0.0202628 , 0.02284137, 0.02007596, 0.02183072, 0.02206667, 0.02308766, 0.02521006, 0.02146808]), 'std_score_time': array([9.91640421e-05, 1.01564924e-03, 6.02460712e-04, 7.13789293e-04, 4.51718100e-04, 1.02443455e-03, 1.56720318e-04, 1.20877918e-03, 5.39789960e-04, 2.44794052e-03, 1.77551404e-04, 1.70836073e-03, 1.53440960e-03, 1.20257386e-03, 2.92116954e-03, 1.22074709e-03]), 'param_max_n_bins': masked_array(data=[3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6], mask=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], fill_value='?', dtype=object), 'param_min_bin_size': masked_array(data=[0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08], mask=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], fill_value='?', dtype=object), 'params': [{'max_n_bins': 3, 'min_bin_size': 0.05}, {'max_n_bins': 3, 'min_bin_size': 0.06}, {'max_n_bins': 3, 'min_bin_size': 0.07}, {'max_n_bins': 3, 'min_bin_size': 0.08}, {'max_n_bins': 4, 'min_bin_size': 0.05}, {'max_n_bins': 4, 'min_bin_size': 0.06}, {'max_n_bins': 4, 'min_bin_size': 0.07}, {'max_n_bins': 4, 'min_bin_size': 0.08}, {'max_n_bins': 5, 'min_bin_size': 0.05}, {'max_n_bins': 5, 'min_bin_size': 0.06}, {'max_n_bins': 5, 'min_bin_size': 0.07}, {'max_n_bins': 5, 'min_bin_size': 0.08}, {'max_n_bins': 6, 'min_bin_size': 0.05}, {'max_n_bins': 6, 'min_bin_size': 0.06}, {'max_n_bins': 6, 'min_bin_size': 0.07}, {'max_n_bins': 6, 'min_bin_size': 0.08}], 'split0_test_score': array([0.079, 0.079, 0.079, 0.079, 0.097, 0.097, 0.097, 0.097, 0.106, 0.106, 0.106, 0.106, 0.107, 0.107, 0.107, 0.107]), 'split1_test_score': array([0.16 , 0.16 , 0.16 , 0.16 , 0.21 , 0.21 , 0.21 , 0.21 , 0.213, 0.213, 0.213, 0.213, 0.216, 0.216, 0.216, 0.216]), 'split2_test_score': array([0.146, 0.146, 0.146, 0.146, 0.167, 0.167, 0.167, 0.167, 0.191, 0.191, 0.191, 0.191, 0.206, 0.206, 0.206, 0.206]), 'mean_test_score': array([0.12833333, 0.12833333, 0.12833333, 0.12833333, 0.158 , 0.158 , 0.158 , 0.158 , 0.17 , 0.17 , 0.17 , 0.17 , 0.17633333, 0.17633333, 0.17633333, 0.17633333]), 'std_test_score': array([0.03534905, 0.03534905, 0.03534905, 0.03534905, 0.04656895, 0.04656895, 0.04656895, 0.04656895, 0.04613748, 0.04613748, 0.04613748, 0.04613748, 0.04919575, 0.04919575, 0.04919575, 0.04919575]), 'rank_test_score': array([13, 13, 13, 13, 9, 9, 9, 9, 5, 5, 5, 5, 1, 1, 1, 1], dtype=int32), 'split0_train_score': array([0.168, 0.168, 0.168, 0.168, 0.2 , 0.2 , 0.2 , 0.2 , 0.213, 0.213, 0.213, 0.213, 0.215, 0.215, 0.215, 0.215]), 'split1_train_score': array([0.123, 0.123, 0.123, 0.123, 0.146, 0.146, 0.146, 0.146, 0.158, 0.158, 0.158, 0.158, 0.161, 0.161, 0.161, 0.161]), 'split2_train_score': array([0.119, 0.119, 0.119, 0.119, 0.144, 0.144, 0.144, 0.144, 0.156, 0.156, 0.156, 0.156, 0.159, 0.159, 0.159, 0.159]), 'mean_train_score': array([0.13666667, 0.13666667, 0.13666667, 0.13666667, 0.16333333, 0.16333333, 0.16333333, 0.16333333, 0.17566667, 0.17566667, 0.17566667, 0.17566667, 0.17833333, 0.17833333, 0.17833333, 0.17833333]), 'std_train_score': array([0.02221611, 0.02221611, 0.02221611, 0.02221611, 0.0259401 , 0.0259401 , 0.0259401 , 0.0259401 , 0.02641128, 0.02641128, 0.02641128, 0.02641128, 0.0259401 , 0.0259401 , 0.0259401 , 0.0259401 ])} RandomizedSearchCV to maximise AUC \u00b6 As Skorecard is scikit-learn compatibile we can use scikit-learn methods such as RandomizedSearchCV to maximise the AUC of our model. Shown below is one such example from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer from skorecard.pipeline import BucketingProcess from skorecard.linear_model import LogisticRegression from skorecard.preprocessing import WoeEncoder from sklearn.model_selection import RandomizedSearchCV from sklearn.pipeline import make_pipeline from scipy.stats import uniform def get_pipeline (): bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( max_n_bins = 100 , min_bin_size = 0.05 ), ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( max_n_bins = 10 , min_bin_size = 0.04 ), ), ) return make_pipeline ( bucketing_process , WoeEncoder (), LogisticRegression ( solver = \"liblinear\" , C = 1.7 , max_iter = 150 , random_state = 0 ) ) pipe = get_pipeline () param_grid = [ { 'logisticregression__C' : uniform ( loc = 0 , scale = 4 ), 'logisticregression__solver' : [ 'liblinear' ] }, ] search_cv = RandomizedSearchCV ( pipe , param_distributions = param_grid , cv = 5 , verbose = True , scoring = 'roc_auc' , n_jobs =- 1 , random_state = 0 , refit = True ) search_cv . fit ( X , y ) Fitting 5 folds for each of 10 candidates, totalling 50 fits RandomizedSearchCV(cv=5, estimator=Pipeline(steps=[('bucketingprocess', BucketingProcess(bucketing_pipeline=Pipeline(steps=[('optimalbucketer', OptimalBucketer(min_bin_size=0.04))]), prebucketing_pipeline=Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer())]))), ('woeencoder', WoeEncoder()), ('logisticregression', LogisticRegression(C=1.7, max_iter=150, random_state=0, solver='liblinear'))]), n_jobs=-1, param_distributions=[{'logisticregression__C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fa5d007ded0>, 'logisticregression__solver': ['liblinear']}], random_state=0, scoring='roc_auc', verbose=True) search_cv . best_params_ , search_cv . best_score_ ({'logisticregression__C': 1.5337660753031108, 'logisticregression__solver': 'liblinear'}, 0.6108804186848948)","title":"Optimizations in the bucketing process"},{"location":"howto/Optimizations/#optimizing-the-bucketing-process","text":"import pandas as pd from skorecard.datasets import load_credit_card df = load_credit_card ( as_frame = True ) # Show display ( df . head ( 4 )) num_feats = [ 'x1' , 'x15' , 'x16' ] X = df [ num_feats ] y = df [ 'y' ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x15 x16 x17 x18 x19 x20 x21 x22 x23 y 0 20000.0 2.0 2.0 1.0 24.0 2.0 2.0 -1.0 -1.0 -2.0 ... 0.0 0.0 0.0 0.0 689.0 0.0 0.0 0.0 0.0 1 1 120000.0 2.0 2.0 2.0 26.0 -1.0 2.0 0.0 0.0 0.0 ... 3272.0 3455.0 3261.0 0.0 1000.0 1000.0 1000.0 0.0 2000.0 1 2 90000.0 2.0 2.0 2.0 34.0 0.0 0.0 0.0 0.0 0.0 ... 14331.0 14948.0 15549.0 1518.0 1500.0 1000.0 1000.0 1000.0 5000.0 0 3 50000.0 2.0 2.0 1.0 37.0 0.0 0.0 0.0 0.0 0.0 ... 28314.0 28959.0 29547.0 2000.0 2019.0 1200.0 1100.0 1069.0 1000.0 0 4 rows \u00d7 24 columns","title":"Optimizing the bucketing process"},{"location":"howto/Optimizations/#finding-the-best-bucketing","text":"The art of building a good scorecard model lies in finding the best bucketing strategy. Good buckets improve the predicitve power of the model, as well as guarantee stability of the predictions. This is normally a very manual, labour intensive process (and for a good reason). A good buckets follow the following principles: - maximize the Information Value, defined as \\[IV = \\sum_{i}(\\%G_{i}-\\%B_{i})\\dot\\log(\\frac{\\%G_{i}}{\\%B_{i}})\\] avoid buckets that contain a very large or very small fraction of the population wherever the business sense requires it, The skorecard package provides some tooling to automate part of the process, namely: Grid search the hyper-parameters of the bucketers in order to maximise the information value Run the optimal bucketer within the bucketing process","title":"Finding the best bucketing"},{"location":"howto/Optimizations/#grid-search-the-bucketers-to-maximise-the-information-value","text":"skorecard implements an IV_scorer , that can be used as a custom scoring function for grid searching. The following snippets of code show how to integrate it in the grid search. The DecisionTreeBucketer applied on numerical features is the best use case, as there are some hyper-parameters that influence the bucketing quality. from skorecard.metrics import IV_scorer from skorecard.bucketers import DecisionTreeBucketer from sklearn.model_selection import GridSearchCV The DecisionTreeBucketer has two main hyperparameters to grid-search: - max_n_bins , maximum number of bins allowed for the bucketing - min_bin_size minimum fraction of data in the buckets gs_params = { \"max_n_bins\" : [ 3 , 4 , 5 , 6 ], \"min_bin_size\" : [ 0.05 , 0.06 , 0.07 , 0.08 ], #, 0.12] } The optimization has to be done for every feature indipendently, therefore we need a loop, and all the parameters are best stored in a data collector, like a dictionary # Define the specials best_params = dict () max_iv = dict () cv_results = dict () # Add a special for demo purposes specials = { 'x1' :{ 'special 0' :[ '50000.0' ]}} for feat in num_feats : #This snippet illustrates what to do with special values if feat in specials . keys (): # This construct is needed to remap the specials, because skorecard validates that the key # of the dictionary is present in the variables special = { feat : specials [ feat ]} else : special = {} bucketer = DecisionTreeBucketer ( variables = [ feat ], specials = special ) gs = GridSearchCV ( bucketer , gs_params , scoring = IV_scorer , cv = 3 , return_train_score = True ) gs . fit ( X [[ feat ]], y ) best_params [ feat ] = gs . best_params_ max_iv [ feat ] = gs . best_score_ cv_results [ feat ] = gs . cv_results_ Checking the best parameters per feature best_params {'x1': {'max_n_bins': 6, 'min_bin_size': 0.05}, 'x15': {'max_n_bins': 6, 'min_bin_size': 0.08}, 'x16': {'max_n_bins': 6, 'min_bin_size': 0.05}} Because of its additive nature, IV is likely to be maximal for the highest max_n_bins . Therefore it is worth looking analysing the CV results! cv_results [ 'x1' ] {'mean_fit_time': array([0.09358168, 0.08749469, 0.08900897, 0.08818277, 0.08763576, 0.08831199, 0.08456341, 0.08533502, 0.08416621, 0.09112167, 0.0896643 , 0.0931441 , 0.09968567, 0.09904973, 0.10114026, 0.09465035]), 'std_fit_time': array([0.00568708, 0.00219181, 0.00041746, 0.00208567, 0.00033371, 0.00090009, 0.00135716, 0.00064736, 0.0008165 , 0.00254417, 0.00449863, 0.00616635, 0.00619145, 0.0090274 , 0.00619416, 0.00552724]), 'mean_score_time': array([0.01997574, 0.02116672, 0.02150178, 0.02093689, 0.02005355, 0.02037962, 0.0198973 , 0.02062575, 0.0202628 , 0.02284137, 0.02007596, 0.02183072, 0.02206667, 0.02308766, 0.02521006, 0.02146808]), 'std_score_time': array([9.91640421e-05, 1.01564924e-03, 6.02460712e-04, 7.13789293e-04, 4.51718100e-04, 1.02443455e-03, 1.56720318e-04, 1.20877918e-03, 5.39789960e-04, 2.44794052e-03, 1.77551404e-04, 1.70836073e-03, 1.53440960e-03, 1.20257386e-03, 2.92116954e-03, 1.22074709e-03]), 'param_max_n_bins': masked_array(data=[3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6], mask=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], fill_value='?', dtype=object), 'param_min_bin_size': masked_array(data=[0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08, 0.05, 0.06, 0.07, 0.08], mask=[False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False], fill_value='?', dtype=object), 'params': [{'max_n_bins': 3, 'min_bin_size': 0.05}, {'max_n_bins': 3, 'min_bin_size': 0.06}, {'max_n_bins': 3, 'min_bin_size': 0.07}, {'max_n_bins': 3, 'min_bin_size': 0.08}, {'max_n_bins': 4, 'min_bin_size': 0.05}, {'max_n_bins': 4, 'min_bin_size': 0.06}, {'max_n_bins': 4, 'min_bin_size': 0.07}, {'max_n_bins': 4, 'min_bin_size': 0.08}, {'max_n_bins': 5, 'min_bin_size': 0.05}, {'max_n_bins': 5, 'min_bin_size': 0.06}, {'max_n_bins': 5, 'min_bin_size': 0.07}, {'max_n_bins': 5, 'min_bin_size': 0.08}, {'max_n_bins': 6, 'min_bin_size': 0.05}, {'max_n_bins': 6, 'min_bin_size': 0.06}, {'max_n_bins': 6, 'min_bin_size': 0.07}, {'max_n_bins': 6, 'min_bin_size': 0.08}], 'split0_test_score': array([0.079, 0.079, 0.079, 0.079, 0.097, 0.097, 0.097, 0.097, 0.106, 0.106, 0.106, 0.106, 0.107, 0.107, 0.107, 0.107]), 'split1_test_score': array([0.16 , 0.16 , 0.16 , 0.16 , 0.21 , 0.21 , 0.21 , 0.21 , 0.213, 0.213, 0.213, 0.213, 0.216, 0.216, 0.216, 0.216]), 'split2_test_score': array([0.146, 0.146, 0.146, 0.146, 0.167, 0.167, 0.167, 0.167, 0.191, 0.191, 0.191, 0.191, 0.206, 0.206, 0.206, 0.206]), 'mean_test_score': array([0.12833333, 0.12833333, 0.12833333, 0.12833333, 0.158 , 0.158 , 0.158 , 0.158 , 0.17 , 0.17 , 0.17 , 0.17 , 0.17633333, 0.17633333, 0.17633333, 0.17633333]), 'std_test_score': array([0.03534905, 0.03534905, 0.03534905, 0.03534905, 0.04656895, 0.04656895, 0.04656895, 0.04656895, 0.04613748, 0.04613748, 0.04613748, 0.04613748, 0.04919575, 0.04919575, 0.04919575, 0.04919575]), 'rank_test_score': array([13, 13, 13, 13, 9, 9, 9, 9, 5, 5, 5, 5, 1, 1, 1, 1], dtype=int32), 'split0_train_score': array([0.168, 0.168, 0.168, 0.168, 0.2 , 0.2 , 0.2 , 0.2 , 0.213, 0.213, 0.213, 0.213, 0.215, 0.215, 0.215, 0.215]), 'split1_train_score': array([0.123, 0.123, 0.123, 0.123, 0.146, 0.146, 0.146, 0.146, 0.158, 0.158, 0.158, 0.158, 0.161, 0.161, 0.161, 0.161]), 'split2_train_score': array([0.119, 0.119, 0.119, 0.119, 0.144, 0.144, 0.144, 0.144, 0.156, 0.156, 0.156, 0.156, 0.159, 0.159, 0.159, 0.159]), 'mean_train_score': array([0.13666667, 0.13666667, 0.13666667, 0.13666667, 0.16333333, 0.16333333, 0.16333333, 0.16333333, 0.17566667, 0.17566667, 0.17566667, 0.17566667, 0.17833333, 0.17833333, 0.17833333, 0.17833333]), 'std_train_score': array([0.02221611, 0.02221611, 0.02221611, 0.02221611, 0.0259401 , 0.0259401 , 0.0259401 , 0.0259401 , 0.02641128, 0.02641128, 0.02641128, 0.02641128, 0.0259401 , 0.0259401 , 0.0259401 , 0.0259401 ])}","title":"Grid search the bucketers to maximise the information value"},{"location":"howto/Optimizations/#randomizedsearchcv-to-maximise-auc","text":"As Skorecard is scikit-learn compatibile we can use scikit-learn methods such as RandomizedSearchCV to maximise the AUC of our model. Shown below is one such example from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer from skorecard.pipeline import BucketingProcess from skorecard.linear_model import LogisticRegression from skorecard.preprocessing import WoeEncoder from sklearn.model_selection import RandomizedSearchCV from sklearn.pipeline import make_pipeline from scipy.stats import uniform def get_pipeline (): bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( max_n_bins = 100 , min_bin_size = 0.05 ), ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( max_n_bins = 10 , min_bin_size = 0.04 ), ), ) return make_pipeline ( bucketing_process , WoeEncoder (), LogisticRegression ( solver = \"liblinear\" , C = 1.7 , max_iter = 150 , random_state = 0 ) ) pipe = get_pipeline () param_grid = [ { 'logisticregression__C' : uniform ( loc = 0 , scale = 4 ), 'logisticregression__solver' : [ 'liblinear' ] }, ] search_cv = RandomizedSearchCV ( pipe , param_distributions = param_grid , cv = 5 , verbose = True , scoring = 'roc_auc' , n_jobs =- 1 , random_state = 0 , refit = True ) search_cv . fit ( X , y ) Fitting 5 folds for each of 10 candidates, totalling 50 fits RandomizedSearchCV(cv=5, estimator=Pipeline(steps=[('bucketingprocess', BucketingProcess(bucketing_pipeline=Pipeline(steps=[('optimalbucketer', OptimalBucketer(min_bin_size=0.04))]), prebucketing_pipeline=Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer())]))), ('woeencoder', WoeEncoder()), ('logisticregression', LogisticRegression(C=1.7, max_iter=150, random_state=0, solver='liblinear'))]), n_jobs=-1, param_distributions=[{'logisticregression__C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fa5d007ded0>, 'logisticregression__solver': ['liblinear']}], random_state=0, scoring='roc_auc', verbose=True) search_cv . best_params_ , search_cv . best_score_ ({'logisticregression__C': 1.5337660753031108, 'logisticregression__solver': 'liblinear'}, 0.6108804186848948)","title":"RandomizedSearchCV to maximise AUC"},{"location":"howto/mix_with_other_packages/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Mixed usage with other packages \u00b6 There are quite some excellent packages out there offering functionality around bucketing/binning/discretizing numerical variables and encoding categorical variables. Chances are you'd like to combine them in your skorecard pipelines. Here are some packages are are compatible with pandas dataframes: category_encoders from scikit-learn-contrib feature-engine categorical variable encoders feature-engine variable discretisation %% capture ! pip install category_encoders %% capture from sklearn.pipeline import make_pipeline from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import OrdinalCategoricalBucketer X , y = load_uci_credit_card ( return_X_y = True ) from category_encoders import TargetEncoder pipe = make_pipeline ( TargetEncoder ( cols = [ \"EDUCATION\" ]), # category_encoders.TargetEncoder passes through other columns OrdinalCategoricalBucketer ( variables = [ \"MARRIAGE\" ]) ) pipe . fit ( X , y ) pipe . transform ( X ) . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0.0 2.0 400000.0 201800.0 1 1.0 2.0 80000.0 80610.0 2 0.0 2.0 500000.0 499452.0 3 0.0 1.0 140000.0 450.0 4 1.0 1.0 420000.0 56107.0 Some packages do not return pandas DataFrames, like: sklearn.preprocessing.KBinsDiscretizer You can wrap the class in skorecard.pipeline.KeepPandas to use these transformers in a pipeline: from sklearn.preprocessing import KBinsDiscretizer from skorecard.pipeline import KeepPandas from sklearn.compose import ColumnTransformer ct = ColumnTransformer ( [ ( \"binner\" , KBinsDiscretizer ( n_bins = 3 , encode = 'ordinal' , strategy = 'uniform' ), [ 'EDUCATION' ]) ], remainder = \"passthrough\" ) pipe = make_pipeline ( KeepPandas ( ct ), OrdinalCategoricalBucketer ( variables = [ \"MARRIAGE\" ]) ) pipe . fit_transform ( X , y ) . head ( 5 ) WARNING:root:sklearn.compose.ColumnTransformer can change the order of columns, be very careful when using with KeepPandas() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0.0 2.0 400000.0 201800.0 1 1.0 2.0 80000.0 80610.0 2 0.0 2.0 500000.0 499452.0 3 0.0 1.0 140000.0 450.0 4 1.0 1.0 420000.0 56107.0","title":"Mixed usage with other packages"},{"location":"howto/mix_with_other_packages/#mixed-usage-with-other-packages","text":"There are quite some excellent packages out there offering functionality around bucketing/binning/discretizing numerical variables and encoding categorical variables. Chances are you'd like to combine them in your skorecard pipelines. Here are some packages are are compatible with pandas dataframes: category_encoders from scikit-learn-contrib feature-engine categorical variable encoders feature-engine variable discretisation %% capture ! pip install category_encoders %% capture from sklearn.pipeline import make_pipeline from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import OrdinalCategoricalBucketer X , y = load_uci_credit_card ( return_X_y = True ) from category_encoders import TargetEncoder pipe = make_pipeline ( TargetEncoder ( cols = [ \"EDUCATION\" ]), # category_encoders.TargetEncoder passes through other columns OrdinalCategoricalBucketer ( variables = [ \"MARRIAGE\" ]) ) pipe . fit ( X , y ) pipe . transform ( X ) . head ( 5 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0.0 2.0 400000.0 201800.0 1 1.0 2.0 80000.0 80610.0 2 0.0 2.0 500000.0 499452.0 3 0.0 1.0 140000.0 450.0 4 1.0 1.0 420000.0 56107.0 Some packages do not return pandas DataFrames, like: sklearn.preprocessing.KBinsDiscretizer You can wrap the class in skorecard.pipeline.KeepPandas to use these transformers in a pipeline: from sklearn.preprocessing import KBinsDiscretizer from skorecard.pipeline import KeepPandas from sklearn.compose import ColumnTransformer ct = ColumnTransformer ( [ ( \"binner\" , KBinsDiscretizer ( n_bins = 3 , encode = 'ordinal' , strategy = 'uniform' ), [ 'EDUCATION' ]) ], remainder = \"passthrough\" ) pipe = make_pipeline ( KeepPandas ( ct ), OrdinalCategoricalBucketer ( variables = [ \"MARRIAGE\" ]) ) pipe . fit_transform ( X , y ) . head ( 5 ) WARNING:root:sklearn.compose.ColumnTransformer can change the order of columns, be very careful when using with KeepPandas() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0.0 2.0 400000.0 201800.0 1 1.0 2.0 80000.0 80610.0 2 0.0 2.0 500000.0 499452.0 3 0.0 1.0 140000.0 450.0 4 1.0 1.0 420000.0 56107.0","title":"Mixed usage with other packages"},{"location":"howto/psi_and_iv/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Measuring bucketed distribution shifts. \u00b6 Population staibility index - PSI \u00b6 The PSI (population stability index), is a common measure to evaluate how similar two univariate distributions are. It's given by the following formula \\[PSI=\\sum_{i}^{N_{bins}} (\\%x_{i}^{actual} - \\%x_{i}^{expected}) log\\frac{\\%x_{i}^{actual}}{\\%x_{i}^{expected}}\\] where the sum runs over all the buckets of the feature x . skorecard implements a simple functionality to calculate the PSI between two datasets. As two datasets are needed, we split the X and y into a train and test set. from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.25 , random_state = 42 ) By definition, the PSI acts on bucketed features. Failing to bucket the features would still yield a value of the PSI. However, in this case the PSI will be computed over all the unique values. For numerical features, this will return artifically high and meaningless values. dbt = DecisionTreeBucketer () X_train_bins = dbt . fit_transform ( X_train , y_train ) X_test_bins = dbt . transform ( X_test ) Calculating the PSI from skorecard.reporting import psi psi_dict = psi ( X_train_bins , X_test_bins ) psi_dict {'EDUCATION': 0.0005202506508081382, 'MARRIAGE': 0.0003497580712116056, 'LIMIT_BAL': 0.013577676978376134, 'BILL_AMT1': 0.017027519474734677} Univariate predictive power \u00b6 Information value (IV) \u00b6 The information value is nothing else than the PSI, but it's computed between the features set defined by the target y=0 and y=1. In other words, it can be summarized by the formula. \\[IV=\\sum_{i}^{N_{bins}} (\\%x_{i}^{y=0} - \\%x_{i}^{y=1}) log\\frac{\\%x_{i}^{y=0}}{\\%x_{i}^{y=1}}\\] dbt = DecisionTreeBucketer () X_bins = dbt . fit_transform ( X , y ) To compute the iv, skorecard implements a handy function. The function consumes the (binned) feature set X, and the target y from skorecard.reporting import iv iv = iv ( X_bins , y ) iv {'EDUCATION': 0.036451028950383324, 'MARRIAGE': 0.009494315565036299, 'LIMIT_BAL': 0.17922043483265943, 'BILL_AMT1': 0.05239237644085838}","title":"Assessing bucket quality"},{"location":"howto/psi_and_iv/#measuring-bucketed-distribution-shifts","text":"","title":"Measuring bucketed distribution shifts."},{"location":"howto/psi_and_iv/#population-staibility-index-psi","text":"The PSI (population stability index), is a common measure to evaluate how similar two univariate distributions are. It's given by the following formula \\[PSI=\\sum_{i}^{N_{bins}} (\\%x_{i}^{actual} - \\%x_{i}^{expected}) log\\frac{\\%x_{i}^{actual}}{\\%x_{i}^{expected}}\\] where the sum runs over all the buckets of the feature x . skorecard implements a simple functionality to calculate the PSI between two datasets. As two datasets are needed, we split the X and y into a train and test set. from skorecard import datasets from sklearn.model_selection import train_test_split from skorecard.bucketers import DecisionTreeBucketer X , y = datasets . load_uci_credit_card ( return_X_y = True ) X_train , X_test , y_train , y_test = train_test_split ( X , y , test_size = 0.25 , random_state = 42 ) By definition, the PSI acts on bucketed features. Failing to bucket the features would still yield a value of the PSI. However, in this case the PSI will be computed over all the unique values. For numerical features, this will return artifically high and meaningless values. dbt = DecisionTreeBucketer () X_train_bins = dbt . fit_transform ( X_train , y_train ) X_test_bins = dbt . transform ( X_test ) Calculating the PSI from skorecard.reporting import psi psi_dict = psi ( X_train_bins , X_test_bins ) psi_dict {'EDUCATION': 0.0005202506508081382, 'MARRIAGE': 0.0003497580712116056, 'LIMIT_BAL': 0.013577676978376134, 'BILL_AMT1': 0.017027519474734677}","title":"Population staibility index - PSI"},{"location":"howto/psi_and_iv/#univariate-predictive-power","text":"","title":"Univariate predictive power"},{"location":"howto/psi_and_iv/#information-value-iv","text":"The information value is nothing else than the PSI, but it's computed between the features set defined by the target y=0 and y=1. In other words, it can be summarized by the formula. \\[IV=\\sum_{i}^{N_{bins}} (\\%x_{i}^{y=0} - \\%x_{i}^{y=1}) log\\frac{\\%x_{i}^{y=0}}{\\%x_{i}^{y=1}}\\] dbt = DecisionTreeBucketer () X_bins = dbt . fit_transform ( X , y ) To compute the iv, skorecard implements a handy function. The function consumes the (binned) feature set X, and the target y from skorecard.reporting import iv iv = iv ( X_bins , y ) iv {'EDUCATION': 0.036451028950383324, 'MARRIAGE': 0.009494315565036299, 'LIMIT_BAL': 0.17922043483265943, 'BILL_AMT1': 0.05239237644085838}","title":"Information value (IV)"},{"location":"howto/save_buckets_to_file/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Saving bucket information to a file \u00b6 If you have a specific set of bucketing boundaries you are satisfied with, it's useful to save them to a file. You might want to save the bucketing information as configuration files along with your code. All skorecard bucketers, the BucketingProcess and Skorecard model support saving to yaml files with save_yml() . The special UserInputBucketer can read in these configuration files and can be used in the final model pipeline. Example with a bucketer \u00b6 from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer , UserInputBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) bucketer = bucketer . fit ( X , y ) bucketer . save_yml ( \"bucketer.yml\" ) uib = UserInputBucketer ( \"bucketer.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0 Example with a BucketingProcess \u00b6 A bucketing process works in exactly the same way. Because there is a prebucketing pipeline and a bucketing pipeline, skorecard makes sure that the buckets are the transformation from raw data to final bucket. from skorecard.pipeline import BucketingProcess from skorecard.bucketers import EqualFrequencyBucketer , OptimalBucketer , AsIsCategoricalBucketer from sklearn.pipeline import make_pipeline num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ) ) bucketing_process . fit ( X , y ) bucketing_process . save_yml ( \"bucket_process.yml\" ) uib = UserInputBucketer ( \"bucket_process.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 0 8 5 1 2 0 3 4 2 0 0 8 5 3 0 1 4 0 Example with ScorecardPipelines \u00b6 skorecard supports converting scikit-learn pipelines to a SkorecardPipelin using to_skorecard_pipeline . This will add support for .save_yml() : from sklearn.pipeline import make_pipeline from skorecard.bucketers import EqualFrequencyBucketer from skorecard.pipeline.pipeline import to_skorecard_pipeline pipe = make_pipeline ( EqualFrequencyBucketer ( n_bins = 10 , variables = [ \"BILL_AMT1\" ]), DecisionTreeBucketer ( max_n_bins = 5 , variables = [ \"LIMIT_BAL\" ]) ) pipe . fit ( X , y ) sk_pipe = to_skorecard_pipeline ( pipe ) sk_pipe . save_yml ( \"pipe.yml\" ) uib = UserInputBucketer ( \"pipe.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 4 9 1 2 2 2 7 2 1 2 4 9 3 1 1 3 1","title":"Read/write buckets to file"},{"location":"howto/save_buckets_to_file/#saving-bucket-information-to-a-file","text":"If you have a specific set of bucketing boundaries you are satisfied with, it's useful to save them to a file. You might want to save the bucketing information as configuration files along with your code. All skorecard bucketers, the BucketingProcess and Skorecard model support saving to yaml files with save_yml() . The special UserInputBucketer can read in these configuration files and can be used in the final model pipeline.","title":"Saving bucket information to a file"},{"location":"howto/save_buckets_to_file/#example-with-a-bucketer","text":"from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer , UserInputBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) bucketer = bucketer . fit ( X , y ) bucketer . save_yml ( \"bucketer.yml\" ) uib = UserInputBucketer ( \"bucketer.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0","title":"Example with a bucketer"},{"location":"howto/save_buckets_to_file/#example-with-a-bucketingprocess","text":"A bucketing process works in exactly the same way. Because there is a prebucketing pipeline and a bucketing pipeline, skorecard makes sure that the buckets are the transformation from raw data to final bucket. from skorecard.pipeline import BucketingProcess from skorecard.bucketers import EqualFrequencyBucketer , OptimalBucketer , AsIsCategoricalBucketer from sklearn.pipeline import make_pipeline num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ) ) bucketing_process . fit ( X , y ) bucketing_process . save_yml ( \"bucket_process.yml\" ) uib = UserInputBucketer ( \"bucket_process.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 0 8 5 1 2 0 3 4 2 0 0 8 5 3 0 1 4 0","title":"Example with a BucketingProcess"},{"location":"howto/save_buckets_to_file/#example-with-scorecardpipelines","text":"skorecard supports converting scikit-learn pipelines to a SkorecardPipelin using to_skorecard_pipeline . This will add support for .save_yml() : from sklearn.pipeline import make_pipeline from skorecard.bucketers import EqualFrequencyBucketer from skorecard.pipeline.pipeline import to_skorecard_pipeline pipe = make_pipeline ( EqualFrequencyBucketer ( n_bins = 10 , variables = [ \"BILL_AMT1\" ]), DecisionTreeBucketer ( max_n_bins = 5 , variables = [ \"LIMIT_BAL\" ]) ) pipe . fit ( X , y ) sk_pipe = to_skorecard_pipeline ( pipe ) sk_pipe . save_yml ( \"pipe.yml\" ) uib = UserInputBucketer ( \"pipe.yml\" ) uib . transform ( X ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 4 9 1 2 2 2 7 2 1 2 4 9 3 1 1 3 1","title":"Example with ScorecardPipelines"},{"location":"howto/using_manually_defined_buckets/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Working with manually defined buckets \u00b6 Often bucketing is tweaked manually to incorporate domain expertise. Skorecard offers good support for manually defining buckets. From a bucketer \u00b6 If you've used .fit_interactive() (see interactive bucketing ), you can choose to explicitly use the updated bucket mapping in a UserInputBucketer : from skorecard.datasets import load_uci_credit_card , load_credit_card from skorecard.bucketers import DecisionTreeBucketer , UserInputBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( variables = [ 'EDUCATION' ]) bucketer . fit ( X , y ) # can also be .fit_interactive() bucketer . features_bucket_mapping_ FeaturesBucketMapping([BucketMapping(feature_name='EDUCATION', type='numerical', missing_bucket=None, other_bucket=None, map=[1.5, 2.5], right=False, specials={})]) uib = UserInputBucketer ( bucketer . features_bucket_mapping_ ) uib . transform ( X ) . head ( 1 ) # note uib does not require a .fit() step .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 2 400000.0 201800.0 From a dictionary \u00b6 You can manually define the buckets in a python dictionary. For every feature, the following keys must be present. feature_name (mandatory): must match the column name in the dataframe type (mandatory): type of feature (categorical or numerical) map (mandatory): contains the actual mapping for the bins. categorical features: expect a dictionary {value:bin_index} numerical features: expect a list of boundaries [value, value] right (optional, defaults to True ): flag that indicates if to include the upper bound (True) or lower bound (False) in the bucket definition. Applicable only to numerical bucketers specials (optional, defaults to {} ): dictionary of special values that will be put in their own bucket. Here's an example: bucket_maps = { 'EDUCATION' :{ \"feature_name\" : 'EDUCATION' , \"type\" : 'categorical' , \"map\" : { 2 : 0 , 1 : 1 , 3 : 2 }, \"right\" : True , \"specials\" : {} }, 'LIMIT_BAL' :{ \"feature_name\" : 'LIMIT_BAL' , \"type\" : 'numerical' , \"map\" : [ 25000. , 55000. , 105000. , 225000. , 275000. , 325000. ], \"right\" : True , \"specials\" : {} }, 'BILL_AMT1' :{ \"feature_name\" : 'BILL_AMT1' , \"type\" : 'numerical' , \"map\" : [ 800. , 12500 , 50000 , 77800 , 195000. ], \"right\" : True , \"specials\" : {} } } You can create a bucketer using the input dictionary using UserInputBucketer : from skorecard.bucketers import UserInputBucketer uib = UserInputBucketer ( bucket_maps ) From a file \u00b6 You can also work with manually defined buckets that have saved in a .yml file. See the how to on Read/write buckets to file .","title":"Manually defining buckets"},{"location":"howto/using_manually_defined_buckets/#working-with-manually-defined-buckets","text":"Often bucketing is tweaked manually to incorporate domain expertise. Skorecard offers good support for manually defining buckets.","title":"Working with manually defined buckets"},{"location":"howto/using_manually_defined_buckets/#from-a-bucketer","text":"If you've used .fit_interactive() (see interactive bucketing ), you can choose to explicitly use the updated bucket mapping in a UserInputBucketer : from skorecard.datasets import load_uci_credit_card , load_credit_card from skorecard.bucketers import DecisionTreeBucketer , UserInputBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( variables = [ 'EDUCATION' ]) bucketer . fit ( X , y ) # can also be .fit_interactive() bucketer . features_bucket_mapping_ FeaturesBucketMapping([BucketMapping(feature_name='EDUCATION', type='numerical', missing_bucket=None, other_bucket=None, map=[1.5, 2.5], right=False, specials={})]) uib = UserInputBucketer ( bucketer . features_bucket_mapping_ ) uib . transform ( X ) . head ( 1 ) # note uib does not require a .fit() step .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 2 400000.0 201800.0","title":"From a bucketer"},{"location":"howto/using_manually_defined_buckets/#from-a-dictionary","text":"You can manually define the buckets in a python dictionary. For every feature, the following keys must be present. feature_name (mandatory): must match the column name in the dataframe type (mandatory): type of feature (categorical or numerical) map (mandatory): contains the actual mapping for the bins. categorical features: expect a dictionary {value:bin_index} numerical features: expect a list of boundaries [value, value] right (optional, defaults to True ): flag that indicates if to include the upper bound (True) or lower bound (False) in the bucket definition. Applicable only to numerical bucketers specials (optional, defaults to {} ): dictionary of special values that will be put in their own bucket. Here's an example: bucket_maps = { 'EDUCATION' :{ \"feature_name\" : 'EDUCATION' , \"type\" : 'categorical' , \"map\" : { 2 : 0 , 1 : 1 , 3 : 2 }, \"right\" : True , \"specials\" : {} }, 'LIMIT_BAL' :{ \"feature_name\" : 'LIMIT_BAL' , \"type\" : 'numerical' , \"map\" : [ 25000. , 55000. , 105000. , 225000. , 275000. , 325000. ], \"right\" : True , \"specials\" : {} }, 'BILL_AMT1' :{ \"feature_name\" : 'BILL_AMT1' , \"type\" : 'numerical' , \"map\" : [ 800. , 12500 , 50000 , 77800 , 195000. ], \"right\" : True , \"specials\" : {} } } You can create a bucketer using the input dictionary using UserInputBucketer : from skorecard.bucketers import UserInputBucketer uib = UserInputBucketer ( bucket_maps )","title":"From a dictionary"},{"location":"howto/using_manually_defined_buckets/#from-a-file","text":"You can also work with manually defined buckets that have saved in a .yml file. See the how to on Read/write buckets to file .","title":"From a file"},{"location":"tutorials/1_bucketing/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Bucketing \u00b6 The core of a good skorecard models is to bucket the features. This section showcases how to use skorecard to achieve this. Let's start by loading the demo data from skorecard.datasets import load_credit_card data = load_credit_card ( as_frame = True ) data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x15 x16 x17 x18 x19 x20 x21 x22 x23 y 0 20000.0 2.0 2.0 1.0 24.0 2.0 2.0 -1.0 -1.0 -2.0 ... 0.0 0.0 0.0 0.0 689.0 0.0 0.0 0.0 0.0 1 1 120000.0 2.0 2.0 2.0 26.0 -1.0 2.0 0.0 0.0 0.0 ... 3272.0 3455.0 3261.0 0.0 1000.0 1000.0 1000.0 0.0 2000.0 1 2 90000.0 2.0 2.0 2.0 34.0 0.0 0.0 0.0 0.0 0.0 ... 14331.0 14948.0 15549.0 1518.0 1500.0 1000.0 1000.0 1000.0 5000.0 0 3 50000.0 2.0 2.0 1.0 37.0 0.0 0.0 0.0 0.0 0.0 ... 28314.0 28959.0 29547.0 2000.0 2019.0 1200.0 1100.0 1069.0 1000.0 0 4 50000.0 1.0 2.0 1.0 57.0 -1.0 0.0 -1.0 0.0 0.0 ... 20940.0 19146.0 19131.0 2000.0 36681.0 10000.0 9000.0 689.0 679.0 0 5 rows \u00d7 24 columns The dataset used contains 30K rows, 23 features and a binary target. Let's start by splitting the data in train and test sample, as per common practice when building a model. from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) Define the numerical and categorical features \u00b6 The features x2 , x3 and x4 are of categorical nature cat_cols = [ 'x2' , 'x3' , 'x4' ] num_cols = [ col for col in X_train . columns if col not in cat_cols ] print ( f \"Total categorical columns: { len ( cat_cols ) } \" ) print ( f \"Total numerical columns: { len ( num_cols ) } \" ) Total categorical columns: 3 Total numerical columns: 20 Bucketing features \u00b6 Skorecard implements different bucketers, but they are not applicable to all the features. Categorical features : In most of the cases, there is no numerical relationship between categories. Therefore automatic bucketing is very difficult to perform. skorecard implements the OrdinalCategoricalBucketer that orders the buckets either by the count or by the target rate. It includes a tolerance ( tol ) input, which represent the lower bound of the fraction of data allowed to keep a category in the same Numerical features : differently from categorical features, algorithmic bucketing can be applied to numerical features. skorecard implements different bucketers that can be used for numerical features: DecisionTreeBucketer : fits a univariate decision tree to find the optimal splits (requires the target y ) EqualWidthBucketer : generates buckets with equal spacing in the bucket boundaries (ie historgrams) EqualFrequencyBucketer : generates buckets with equal counts in the buckets (ie quantiles) AgglomerativeClusteringBucketer : generates bucketes by applying AgglomerativeClustering (density based bucketer) Manual correction \u00b6 Note: to build a high quality scorecard, it's highly recommended to assess manually every bucket. Algorithms implemented in skorecard are very helpful, but are obscure to the business sense. This is especially true for categorical features, where business sense should prevail. Default bucketers \u00b6 Categorical features \u00b6 Due to (generally speaking) no relationship between categories, it's not possible to implement an algorithmic way of bucketing the values (in the same way as it is possible for numerical features). The only suitable bucketer for categorical features in skorecard is the ordinal categorical bucketer, which groups together low-frequency categrical variables (all variables with a frequency below the tol threshold are put in the other bucket) Let's fix the tol to 5% , as this is the recommended minimum. # Start with categorical features from skorecard.bucketers import OrdinalCategoricalBucketer cat_bucketer = OrdinalCategoricalBucketer ( variables = cat_cols , tol = 0.05 , encoding_method = 'ordered' ) cat_bucketer . fit ( X_train , y_train ) OrdinalCategoricalBucketer(encoding_method='ordered', variables=['x2', 'x3', 'x4']) Example: Look up the feature 'x3' The feature 'x3' has a few categories that are sparesely-populated X_train [ 'x3' ] . value_counts ( normalize = True ) 2.0 0.466311 1.0 0.354089 3.0 0.163911 5.0 0.009333 4.0 0.004089 6.0 0.001822 0.0 0.000444 Name: x3, dtype: float64 The OrdinalCategorical bucketer populates the other category with sparse values cat_bucketer . bucket_table ( 'x3' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -2 Other 353.0 1.57 326.0 27.0 0.076487 1.239 0.016 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 3.0 3688.0 16.39 2755.0 933.0 0.252983 -0.168 0.005 3 1 1.0 7967.0 35.41 6445.0 1522.0 0.191038 0.193 0.012 4 2 2.0 10492.0 46.63 7965.0 2527.0 0.240850 -0.102 0.005 Note There might be a different strategy applied to different bucketers. This is addressed by defining a pipeline of bucketers (see the numerical features section for details) Numerical features \u00b6 Numerical features allow for different bucketers (as described above). However, the recommended approach for bucketing is to use either the DecisionTreeBucketer or the BucketingProcess . X_train [ 'x1' ] . value_counts () 50000.0 2510 20000.0 1470 30000.0 1218 80000.0 1173 200000.0 1151 ... 650000.0 1 1000000.0 1 730000.0 1 690000.0 1 327680.0 1 Name: x1, Length: 79, dtype: int64 from skorecard.bucketers import DecisionTreeBucketer specials = { 'x1' :{ 'special_demo' :[ 50000 ]}} num_bucketer = DecisionTreeBucketer ( variables = num_cols , max_n_bins = 5 , #max number of bins allowed min_bin_size = 0.06 , # min fraction of data allowed in the bin dt_kwargs = { 'criterion' : \"entropy\" , 'min_impurity_decrease' : 0.0005 , #as in sklearn. Helps to decide how to split the buckets }, specials = specials ) num_bucketer . fit ( X_train , y_train ) DecisionTreeBucketer(dt_kwargs={'criterion': 'entropy', 'min_impurity_decrease': 0.0005}, max_n_bins=5, min_bin_size=0.06, specials={'x1': {'special_demo': [50000]}}, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23']) num_bucketer . bucket_table ( 'x1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 See the bucket outputs (for the first three features) \u00b6 for x in num_cols [: 3 ]: display ( num_bucketer . fit ( X_train , y_train ) . bucket_table ( x )) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 25.5) 2927.0 13.01 2143.0 784.0 0.267851 -0.245 0.008 2 1 [25.5, 35.5) 9664.0 42.95 7750.0 1914.0 0.198055 0.148 0.009 3 2 [35.5, inf) 9909.0 44.04 7598.0 2311.0 0.233222 -0.060 0.002 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, -0.5) 6370.0 28.31 5361.0 1009.0 0.158399 0.420 0.044 2 1 [-0.5, 0.5) 11032.0 49.03 9620.0 1412.0 0.127991 0.668 0.179 3 2 [0.5, 1.5) 2720.0 12.09 1796.0 924.0 0.339706 -0.586 0.048 4 3 [1.5, inf) 2378.0 10.57 714.0 1664.0 0.699748 -2.096 0.611 With different bucketers for different features in one go \u00b6 Note that below a warning is given to alert you that there are too many unique values in the numerical features. It is good to pay attention to these warnings, as the quantiles are approximate. from sklearn.pipeline import make_pipeline from skorecard.bucketers import EqualFrequencyBucketer , DecisionTreeBucketer pipe = make_pipeline ( EqualFrequencyBucketer ( n_bins = 5 , variables = num_cols [: 5 ]), DecisionTreeBucketer ( max_n_bins = 5 , variables = num_cols [ 5 :]) ) pipe . fit ( X_train , y_train ) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) Pipeline(steps=[('equalfrequencybucketer', EqualFrequencyBucketer(variables=['x1', 'x5', 'x6', 'x7', 'x8'])), ('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=5, variables=['x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23']))]) pipe . transform ( X_test ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 2308 0 1.0 2.0 2.0 0 1 1 1 2 2 ... 2 1 3 3 1 2 1 1 1 1 22404 2 2.0 1.0 2.0 0 1 1 1 2 2 ... 4 4 4 4 2 2 2 3 2 2 23397 1 2.0 3.0 1.0 2 1 1 1 2 2 ... 3 4 4 4 1 2 2 2 1 2 25058 2 1.0 3.0 2.0 4 1 1 1 2 2 ... 2 2 2 1 1 2 3 1 3 2 2664 0 2.0 2.0 2.0 2 1 1 1 2 2 ... 3 2 3 3 1 1 1 2 0 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 3211 0 2.0 3.0 1.0 4 2 0 0 0 0 ... 0 0 0 0 0 0 0 0 1 1 9355 4 2.0 2.0 1.0 3 1 1 1 2 2 ... 2 3 3 4 3 3 3 3 3 2 28201 4 2.0 3.0 2.0 4 2 2 2 1 2 ... 0 0 1 0 1 0 1 1 1 0 19705 1 2.0 2.0 1.0 4 0 0 0 1 1 ... 0 1 0 0 3 0 3 0 0 0 28313 2 2.0 3.0 1.0 2 0 0 0 1 1 ... 0 1 0 0 1 1 1 0 1 0 7500 rows \u00d7 23 columns Parenthesis: compare the buckets from two different algorithms \u00b6 By comparing the DecisionTreeBucketer in the first example, and the EqualFrequencyBucketer from the pipeline example, here comes a quick preview on assessing the two bucketing results. The first case results in the higher IV, with less buckets, hence it's definetely a better result! print ( f \" \\n DecisionTreeBucketer, with IV: { num_bucketer . bucket_table ( num_cols [ 0 ])[ 'IV' ] . sum () } \" ) display ( num_bucketer . bucket_table ( num_cols [ 0 ])) print ( f \" \\n EqualFrequencyBucketer, with IV: { pipe . steps [ 0 ][ 1 ] . bucket_table ( num_cols [ 0 ])[ 'IV' ] . sum () } \" ) display ( pipe . steps [ 0 ][ 1 ] . bucket_table ( num_cols [ 0 ])) DecisionTreeBucketer, with IV: 0.17500000000000002 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 EqualFrequencyBucketer, with IV: 0.159 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 (-inf, 50000.0] 5741.0 25.52 3885.0 1856.0 0.323289 -0.512 0.076 2 1 (50000.0, 100000.0] 3613.0 16.06 2691.0 922.0 0.255190 -0.179 0.005 3 2 (100000.0, 180000.0] 4629.0 20.57 3711.0 918.0 0.198315 0.146 0.004 4 3 (180000.0, 270000.0] 4062.0 18.05 3362.0 700.0 0.172329 0.319 0.017 5 4 (270000.0, inf] 4455.0 19.80 3842.0 613.0 0.137598 0.585 0.057 Make a pipeline for all the features \u00b6 So far we have shown how to deal with bucketers for categoricals/numericals. The whole process can be put together as in a scikit-learn pipeline. bucketing_pipe = make_pipeline ( num_bucketer , cat_bucketer ) bucketing_pipe . fit ( X_train , y_train ) Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(dt_kwargs={'criterion': 'entropy', 'min_impurity_decrease': 0.0005}, max_n_bins=5, min_bin_size=0.06, specials={'x1': {'special_demo': [50000]}}, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('ordinalcategoricalbucketer', OrdinalCategoricalBucketer(encoding_method='ordered', variables=['x2', 'x3', 'x4']))]) Save the bucketers to file \u00b6 Once the buckets are satisfactory, save the ouputs to a yaml file from skorecard.pipeline import to_skorecard_pipeline to_skorecard_pipeline ( bucketing_pipe ) . save_yml ( open ( \"buckets.yml\" , \"w\" )) Using the bucketing process \u00b6 The most common approach in bucketing is to perform what is known as fine-coarse classing . In less fancy words: - you start with very loose bucketing requirements (many buckets, where some minimal (hopefully significant) aggregations and statistics can be computed - this is known as fine classing - for numerical features, it starts by merging together adjacent buckets with similar default rate/WoE - for categorical features, one should merge together categories with similar default rate/WoE, but only when it makes sense - the last two steps (or merging together buckets) is known as coarse classing In skorecard, this process is known as Bucketing Process , as shown below: The bucketing process starts by defining the loose (fine) buckets (prebucketing pipeline) It then runs an optimization algorithm, that merges the buckets together according to an optimization algorithm (bucketing pipeline) from skorecard.bucketers import DecisionTreeBucketer , OrdinalCategoricalBucketer , OptimalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline specials = { 'x1' :{ 'special_demo' :[ 50000 ]}} prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 40 , #loose requirements min_bin_size = 0.03 ), OrdinalCategoricalBucketer ( variables = cat_cols , tol = 0.02 ) ) bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 6 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ) ) bucketing_process = BucketingProcess ( prebucketing_pipeline = prebucketing_pipeline , bucketing_pipeline = bucketing_pipeline , specials = specials , ) bucketing_process = bucketing_process . fit ( X_train , y_train ) Let's see the output of this optimization step \u00b6 print ( f \"Prebucketing step (fine classing), IV { bucketing_process . prebucket_table ( 'x1' )[ 'IV' ] . sum () } \" ) display ( bucketing_process . prebucket_table ( 'x1' )) print ( f \" \\n Bucketing step (coarse classing), IV { bucketing_process . bucket_table ( 'x1' )[ 'IV' ] . sum () } \" ) display ( bucketing_process . bucket_table ( 'x1' )) Prebucketing step (fine classing), IV 0.192 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 -3 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -1 2 0 [-inf, 25000.0) 1830.0 8.13 1153.0 677.0 0.369945 -0.718 0.050 0 3 1 [25000.0, 50000.0) 1401.0 6.23 884.0 517.0 0.369022 -0.714 0.038 0 4 2 [50000.0, 75000.0) 1168.0 5.19 843.0 325.0 0.278253 -0.297 0.005 1 5 3 [75000.0, 85000.0) 1173.0 5.21 907.0 266.0 0.226769 -0.024 0.000 2 6 4 [85000.0, 105000.0) 1272.0 5.65 941.0 331.0 0.260220 -0.206 0.003 2 7 5 [105000.0, 125000.0) 995.0 4.42 770.0 225.0 0.226131 -0.020 0.000 2 8 6 [125000.0, 145000.0) 1127.0 5.01 876.0 251.0 0.222715 -0.001 0.000 2 9 7 [145000.0, 155000.0) 821.0 3.65 683.0 138.0 0.168088 0.349 0.004 3 10 8 [155000.0, 175000.0) 937.0 4.16 768.0 169.0 0.180363 0.263 0.003 3 11 9 [175000.0, 185000.0) 749.0 3.33 614.0 135.0 0.180240 0.264 0.002 3 12 10 [185000.0, 205000.0) 1321.0 5.87 1070.0 251.0 0.190008 0.199 0.002 3 13 11 [205000.0, 225000.0) 877.0 3.90 729.0 148.0 0.168757 0.344 0.004 3 14 12 [225000.0, 245000.0) 1037.0 4.61 859.0 178.0 0.171649 0.323 0.004 3 15 13 [245000.0, 285000.0) 1193.0 5.30 1018.0 175.0 0.146689 0.510 0.012 4 16 14 [285000.0, 305000.0) 680.0 3.02 573.0 107.0 0.157353 0.427 0.005 4 17 15 [305000.0, 355000.0) 908.0 4.04 791.0 117.0 0.128855 0.660 0.014 4 18 16 [355000.0, 375000.0) 707.0 3.14 580.0 127.0 0.179632 0.268 0.002 4 19 17 [375000.0, 495000.0) 1098.0 4.88 965.0 133.0 0.121129 0.731 0.021 5 20 18 [495000.0, inf) 696.0 3.09 619.0 77.0 0.110632 0.833 0.017 5 Bucketing step (coarse classing), IV 0.186 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 2.0) 3231.0 14.36 2037.0 1194.0 0.369545 -0.716 0.087 3 1 [2.0, 3.0) 1168.0 5.19 843.0 325.0 0.278253 -0.297 0.005 4 2 [3.0, 7.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 5 3 [7.0, 13.0) 5742.0 25.52 4723.0 1019.0 0.177464 0.283 0.019 6 4 [13.0, 17.0) 3488.0 15.50 2962.0 526.0 0.150803 0.478 0.031 7 5 [17.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 Notice in the first table there is an additional column that are the optimized buckets (those indexes are aggregated in the second table). Because of the additive nature of the IV, by reducing the number of buckets, the IV will normally decrease. The goal is to reduce the number of buckets as much as possible, by keeping a high IV value, and check for monotonicity wherever needed. y_train . value_counts ( normalize = True ) 0 0.777378 1 0.222622 Name: y, dtype: float64 bucketing_process . plot_prebucket ( 'x1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) bucketing_process . plot_bucket ( 'x1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) bucketing_process . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 x1 21 8 0.186123 float64 1 x2 4 4 0.010225 float64 2 x3 5 5 0.027332 float64 3 x4 4 4 0.005379 float64 4 x5 24 3 0.009663 float64 5 x6 6 5 0.871685 float64 6 x7 5 3 0.567571 float64 7 x8 5 4 0.431979 float64 8 x9 5 4 0.371231 float64 9 x10 5 4 0.334732 float64 10 x11 5 4 0.283282 float64 11 x12 26 7 0.008280 float64 12 x13 27 6 0.005242 float64 13 x14 25 5 0.004368 float64 14 x15 22 6 0.003904 float64 15 x16 24 4 0.005211 float64 16 x17 25 4 0.005717 float64 17 x18 21 7 0.181745 float64 18 x19 21 7 0.167212 float64 19 x20 21 7 0.126632 float64 20 x21 22 7 0.109142 float64 21 x22 19 7 0.088834 float64 22 x23 20 7 0.098997 float64 bucketing_process . save_yml ( open ( 'best_bucketing.yml' , 'w' )) Manual bucket refinement \u00b6 Besides manually inspecting, it's often necessary to manually refine the buckets. skorecard implements a handy dash web-app that allows the user to redefine the bucket allocation. bucketing_process . fit ( X_train , y_train ) BucketingProcess(bucketing_pipeline=Pipeline(steps=[('optimalbucketer-1', OptimalBucketer(max_n_bins=6, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('optimalbucketer-2', OptimalBucketer(variables=['x2', 'x3', 'x4'], variables_type='categorical'))]), prebucketing_pipeline=P...steps=[('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=40, min_bin_size=0.03, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('ordinalcategoricalbucketer', OrdinalCategoricalBucketer(tol=0.02, variables=['x2', 'x3', 'x4']))]), specials={'x1': {'special_demo': [50000]}}) Up next \u00b6 How to perform feature selection in a skorecard model","title":"Bucketing features"},{"location":"tutorials/1_bucketing/#bucketing","text":"The core of a good skorecard models is to bucket the features. This section showcases how to use skorecard to achieve this. Let's start by loading the demo data from skorecard.datasets import load_credit_card data = load_credit_card ( as_frame = True ) data . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x15 x16 x17 x18 x19 x20 x21 x22 x23 y 0 20000.0 2.0 2.0 1.0 24.0 2.0 2.0 -1.0 -1.0 -2.0 ... 0.0 0.0 0.0 0.0 689.0 0.0 0.0 0.0 0.0 1 1 120000.0 2.0 2.0 2.0 26.0 -1.0 2.0 0.0 0.0 0.0 ... 3272.0 3455.0 3261.0 0.0 1000.0 1000.0 1000.0 0.0 2000.0 1 2 90000.0 2.0 2.0 2.0 34.0 0.0 0.0 0.0 0.0 0.0 ... 14331.0 14948.0 15549.0 1518.0 1500.0 1000.0 1000.0 1000.0 5000.0 0 3 50000.0 2.0 2.0 1.0 37.0 0.0 0.0 0.0 0.0 0.0 ... 28314.0 28959.0 29547.0 2000.0 2019.0 1200.0 1100.0 1069.0 1000.0 0 4 50000.0 1.0 2.0 1.0 57.0 -1.0 0.0 -1.0 0.0 0.0 ... 20940.0 19146.0 19131.0 2000.0 36681.0 10000.0 9000.0 689.0 679.0 0 5 rows \u00d7 24 columns The dataset used contains 30K rows, 23 features and a binary target. Let's start by splitting the data in train and test sample, as per common practice when building a model. from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 )","title":"Bucketing"},{"location":"tutorials/1_bucketing/#define-the-numerical-and-categorical-features","text":"The features x2 , x3 and x4 are of categorical nature cat_cols = [ 'x2' , 'x3' , 'x4' ] num_cols = [ col for col in X_train . columns if col not in cat_cols ] print ( f \"Total categorical columns: { len ( cat_cols ) } \" ) print ( f \"Total numerical columns: { len ( num_cols ) } \" ) Total categorical columns: 3 Total numerical columns: 20","title":"Define the numerical and categorical features"},{"location":"tutorials/1_bucketing/#bucketing-features","text":"Skorecard implements different bucketers, but they are not applicable to all the features. Categorical features : In most of the cases, there is no numerical relationship between categories. Therefore automatic bucketing is very difficult to perform. skorecard implements the OrdinalCategoricalBucketer that orders the buckets either by the count or by the target rate. It includes a tolerance ( tol ) input, which represent the lower bound of the fraction of data allowed to keep a category in the same Numerical features : differently from categorical features, algorithmic bucketing can be applied to numerical features. skorecard implements different bucketers that can be used for numerical features: DecisionTreeBucketer : fits a univariate decision tree to find the optimal splits (requires the target y ) EqualWidthBucketer : generates buckets with equal spacing in the bucket boundaries (ie historgrams) EqualFrequencyBucketer : generates buckets with equal counts in the buckets (ie quantiles) AgglomerativeClusteringBucketer : generates bucketes by applying AgglomerativeClustering (density based bucketer)","title":"Bucketing features"},{"location":"tutorials/1_bucketing/#manual-correction","text":"Note: to build a high quality scorecard, it's highly recommended to assess manually every bucket. Algorithms implemented in skorecard are very helpful, but are obscure to the business sense. This is especially true for categorical features, where business sense should prevail.","title":"Manual correction"},{"location":"tutorials/1_bucketing/#default-bucketers","text":"","title":"Default bucketers"},{"location":"tutorials/1_bucketing/#categorical-features","text":"Due to (generally speaking) no relationship between categories, it's not possible to implement an algorithmic way of bucketing the values (in the same way as it is possible for numerical features). The only suitable bucketer for categorical features in skorecard is the ordinal categorical bucketer, which groups together low-frequency categrical variables (all variables with a frequency below the tol threshold are put in the other bucket) Let's fix the tol to 5% , as this is the recommended minimum. # Start with categorical features from skorecard.bucketers import OrdinalCategoricalBucketer cat_bucketer = OrdinalCategoricalBucketer ( variables = cat_cols , tol = 0.05 , encoding_method = 'ordered' ) cat_bucketer . fit ( X_train , y_train ) OrdinalCategoricalBucketer(encoding_method='ordered', variables=['x2', 'x3', 'x4']) Example: Look up the feature 'x3' The feature 'x3' has a few categories that are sparesely-populated X_train [ 'x3' ] . value_counts ( normalize = True ) 2.0 0.466311 1.0 0.354089 3.0 0.163911 5.0 0.009333 4.0 0.004089 6.0 0.001822 0.0 0.000444 Name: x3, dtype: float64 The OrdinalCategorical bucketer populates the other category with sparse values cat_bucketer . bucket_table ( 'x3' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -2 Other 353.0 1.57 326.0 27.0 0.076487 1.239 0.016 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 3.0 3688.0 16.39 2755.0 933.0 0.252983 -0.168 0.005 3 1 1.0 7967.0 35.41 6445.0 1522.0 0.191038 0.193 0.012 4 2 2.0 10492.0 46.63 7965.0 2527.0 0.240850 -0.102 0.005 Note There might be a different strategy applied to different bucketers. This is addressed by defining a pipeline of bucketers (see the numerical features section for details)","title":"Categorical features"},{"location":"tutorials/1_bucketing/#numerical-features","text":"Numerical features allow for different bucketers (as described above). However, the recommended approach for bucketing is to use either the DecisionTreeBucketer or the BucketingProcess . X_train [ 'x1' ] . value_counts () 50000.0 2510 20000.0 1470 30000.0 1218 80000.0 1173 200000.0 1151 ... 650000.0 1 1000000.0 1 730000.0 1 690000.0 1 327680.0 1 Name: x1, Length: 79, dtype: int64 from skorecard.bucketers import DecisionTreeBucketer specials = { 'x1' :{ 'special_demo' :[ 50000 ]}} num_bucketer = DecisionTreeBucketer ( variables = num_cols , max_n_bins = 5 , #max number of bins allowed min_bin_size = 0.06 , # min fraction of data allowed in the bin dt_kwargs = { 'criterion' : \"entropy\" , 'min_impurity_decrease' : 0.0005 , #as in sklearn. Helps to decide how to split the buckets }, specials = specials ) num_bucketer . fit ( X_train , y_train ) DecisionTreeBucketer(dt_kwargs={'criterion': 'entropy', 'min_impurity_decrease': 0.0005}, max_n_bins=5, min_bin_size=0.06, specials={'x1': {'special_demo': [50000]}}, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23']) num_bucketer . bucket_table ( 'x1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037","title":"Numerical features"},{"location":"tutorials/1_bucketing/#see-the-bucket-outputs-for-the-first-three-features","text":"for x in num_cols [: 3 ]: display ( num_bucketer . fit ( X_train , y_train ) . bucket_table ( x )) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 25.5) 2927.0 13.01 2143.0 784.0 0.267851 -0.245 0.008 2 1 [25.5, 35.5) 9664.0 42.95 7750.0 1914.0 0.198055 0.148 0.009 3 2 [35.5, inf) 9909.0 44.04 7598.0 2311.0 0.233222 -0.060 0.002 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, -0.5) 6370.0 28.31 5361.0 1009.0 0.158399 0.420 0.044 2 1 [-0.5, 0.5) 11032.0 49.03 9620.0 1412.0 0.127991 0.668 0.179 3 2 [0.5, 1.5) 2720.0 12.09 1796.0 924.0 0.339706 -0.586 0.048 4 3 [1.5, inf) 2378.0 10.57 714.0 1664.0 0.699748 -2.096 0.611","title":"See the bucket outputs (for the first three features)"},{"location":"tutorials/1_bucketing/#with-different-bucketers-for-different-features-in-one-go","text":"Note that below a warning is given to alert you that there are too many unique values in the numerical features. It is good to pay attention to these warnings, as the quantiles are approximate. from sklearn.pipeline import make_pipeline from skorecard.bucketers import EqualFrequencyBucketer , DecisionTreeBucketer pipe = make_pipeline ( EqualFrequencyBucketer ( n_bins = 5 , variables = num_cols [: 5 ]), DecisionTreeBucketer ( max_n_bins = 5 , variables = num_cols [ 5 :]) ) pipe . fit ( X_train , y_train ) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) /Users/iv58uq/Documents/open_source/skorecard/skorecard/bucketers/bucketers.py:502: ApproximationWarning: Approximated quantiles - too many unique values warnings.warn(ApproximationWarning(\"Approximated quantiles - too many unique values\")) Pipeline(steps=[('equalfrequencybucketer', EqualFrequencyBucketer(variables=['x1', 'x5', 'x6', 'x7', 'x8'])), ('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=5, variables=['x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23']))]) pipe . transform ( X_test ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 2308 0 1.0 2.0 2.0 0 1 1 1 2 2 ... 2 1 3 3 1 2 1 1 1 1 22404 2 2.0 1.0 2.0 0 1 1 1 2 2 ... 4 4 4 4 2 2 2 3 2 2 23397 1 2.0 3.0 1.0 2 1 1 1 2 2 ... 3 4 4 4 1 2 2 2 1 2 25058 2 1.0 3.0 2.0 4 1 1 1 2 2 ... 2 2 2 1 1 2 3 1 3 2 2664 0 2.0 2.0 2.0 2 1 1 1 2 2 ... 3 2 3 3 1 1 1 2 0 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 3211 0 2.0 3.0 1.0 4 2 0 0 0 0 ... 0 0 0 0 0 0 0 0 1 1 9355 4 2.0 2.0 1.0 3 1 1 1 2 2 ... 2 3 3 4 3 3 3 3 3 2 28201 4 2.0 3.0 2.0 4 2 2 2 1 2 ... 0 0 1 0 1 0 1 1 1 0 19705 1 2.0 2.0 1.0 4 0 0 0 1 1 ... 0 1 0 0 3 0 3 0 0 0 28313 2 2.0 3.0 1.0 2 0 0 0 1 1 ... 0 1 0 0 1 1 1 0 1 0 7500 rows \u00d7 23 columns","title":"With different bucketers for different features in one go"},{"location":"tutorials/1_bucketing/#parenthesis-compare-the-buckets-from-two-different-algorithms","text":"By comparing the DecisionTreeBucketer in the first example, and the EqualFrequencyBucketer from the pipeline example, here comes a quick preview on assessing the two bucketing results. The first case results in the higher IV, with less buckets, hence it's definetely a better result! print ( f \" \\n DecisionTreeBucketer, with IV: { num_bucketer . bucket_table ( num_cols [ 0 ])[ 'IV' ] . sum () } \" ) display ( num_bucketer . bucket_table ( num_cols [ 0 ])) print ( f \" \\n EqualFrequencyBucketer, with IV: { pipe . steps [ 0 ][ 1 ] . bucket_table ( num_cols [ 0 ])[ 'IV' ] . sum () } \" ) display ( pipe . steps [ 0 ][ 1 ] . bucket_table ( num_cols [ 0 ])) DecisionTreeBucketer, with IV: 0.17500000000000002 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 EqualFrequencyBucketer, with IV: 0.159 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 (-inf, 50000.0] 5741.0 25.52 3885.0 1856.0 0.323289 -0.512 0.076 2 1 (50000.0, 100000.0] 3613.0 16.06 2691.0 922.0 0.255190 -0.179 0.005 3 2 (100000.0, 180000.0] 4629.0 20.57 3711.0 918.0 0.198315 0.146 0.004 4 3 (180000.0, 270000.0] 4062.0 18.05 3362.0 700.0 0.172329 0.319 0.017 5 4 (270000.0, inf] 4455.0 19.80 3842.0 613.0 0.137598 0.585 0.057","title":"Parenthesis: compare the buckets from two different algorithms"},{"location":"tutorials/1_bucketing/#make-a-pipeline-for-all-the-features","text":"So far we have shown how to deal with bucketers for categoricals/numericals. The whole process can be put together as in a scikit-learn pipeline. bucketing_pipe = make_pipeline ( num_bucketer , cat_bucketer ) bucketing_pipe . fit ( X_train , y_train ) Pipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(dt_kwargs={'criterion': 'entropy', 'min_impurity_decrease': 0.0005}, max_n_bins=5, min_bin_size=0.06, specials={'x1': {'special_demo': [50000]}}, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('ordinalcategoricalbucketer', OrdinalCategoricalBucketer(encoding_method='ordered', variables=['x2', 'x3', 'x4']))])","title":"Make a pipeline for all the features"},{"location":"tutorials/1_bucketing/#save-the-bucketers-to-file","text":"Once the buckets are satisfactory, save the ouputs to a yaml file from skorecard.pipeline import to_skorecard_pipeline to_skorecard_pipeline ( bucketing_pipe ) . save_yml ( open ( \"buckets.yml\" , \"w\" ))","title":"Save the bucketers to file"},{"location":"tutorials/1_bucketing/#using-the-bucketing-process","text":"The most common approach in bucketing is to perform what is known as fine-coarse classing . In less fancy words: - you start with very loose bucketing requirements (many buckets, where some minimal (hopefully significant) aggregations and statistics can be computed - this is known as fine classing - for numerical features, it starts by merging together adjacent buckets with similar default rate/WoE - for categorical features, one should merge together categories with similar default rate/WoE, but only when it makes sense - the last two steps (or merging together buckets) is known as coarse classing In skorecard, this process is known as Bucketing Process , as shown below: The bucketing process starts by defining the loose (fine) buckets (prebucketing pipeline) It then runs an optimization algorithm, that merges the buckets together according to an optimization algorithm (bucketing pipeline) from skorecard.bucketers import DecisionTreeBucketer , OrdinalCategoricalBucketer , OptimalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline specials = { 'x1' :{ 'special_demo' :[ 50000 ]}} prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 40 , #loose requirements min_bin_size = 0.03 ), OrdinalCategoricalBucketer ( variables = cat_cols , tol = 0.02 ) ) bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 6 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ) ) bucketing_process = BucketingProcess ( prebucketing_pipeline = prebucketing_pipeline , bucketing_pipeline = bucketing_pipeline , specials = specials , ) bucketing_process = bucketing_process . fit ( X_train , y_train )","title":"Using the bucketing process"},{"location":"tutorials/1_bucketing/#lets-see-the-output-of-this-optimization-step","text":"print ( f \"Prebucketing step (fine classing), IV { bucketing_process . prebucket_table ( 'x1' )[ 'IV' ] . sum () } \" ) display ( bucketing_process . prebucket_table ( 'x1' )) print ( f \" \\n Bucketing step (coarse classing), IV { bucketing_process . bucket_table ( 'x1' )[ 'IV' ] . sum () } \" ) display ( bucketing_process . bucket_table ( 'x1' )) Prebucketing step (fine classing), IV 0.192 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 -3 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -1 2 0 [-inf, 25000.0) 1830.0 8.13 1153.0 677.0 0.369945 -0.718 0.050 0 3 1 [25000.0, 50000.0) 1401.0 6.23 884.0 517.0 0.369022 -0.714 0.038 0 4 2 [50000.0, 75000.0) 1168.0 5.19 843.0 325.0 0.278253 -0.297 0.005 1 5 3 [75000.0, 85000.0) 1173.0 5.21 907.0 266.0 0.226769 -0.024 0.000 2 6 4 [85000.0, 105000.0) 1272.0 5.65 941.0 331.0 0.260220 -0.206 0.003 2 7 5 [105000.0, 125000.0) 995.0 4.42 770.0 225.0 0.226131 -0.020 0.000 2 8 6 [125000.0, 145000.0) 1127.0 5.01 876.0 251.0 0.222715 -0.001 0.000 2 9 7 [145000.0, 155000.0) 821.0 3.65 683.0 138.0 0.168088 0.349 0.004 3 10 8 [155000.0, 175000.0) 937.0 4.16 768.0 169.0 0.180363 0.263 0.003 3 11 9 [175000.0, 185000.0) 749.0 3.33 614.0 135.0 0.180240 0.264 0.002 3 12 10 [185000.0, 205000.0) 1321.0 5.87 1070.0 251.0 0.190008 0.199 0.002 3 13 11 [205000.0, 225000.0) 877.0 3.90 729.0 148.0 0.168757 0.344 0.004 3 14 12 [225000.0, 245000.0) 1037.0 4.61 859.0 178.0 0.171649 0.323 0.004 3 15 13 [245000.0, 285000.0) 1193.0 5.30 1018.0 175.0 0.146689 0.510 0.012 4 16 14 [285000.0, 305000.0) 680.0 3.02 573.0 107.0 0.157353 0.427 0.005 4 17 15 [305000.0, 355000.0) 908.0 4.04 791.0 117.0 0.128855 0.660 0.014 4 18 16 [355000.0, 375000.0) 707.0 3.14 580.0 127.0 0.179632 0.268 0.002 4 19 17 [375000.0, 495000.0) 1098.0 4.88 965.0 133.0 0.121129 0.731 0.021 5 20 18 [495000.0, inf) 696.0 3.09 619.0 77.0 0.110632 0.833 0.017 5 Bucketing step (coarse classing), IV 0.186 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 2.0) 3231.0 14.36 2037.0 1194.0 0.369545 -0.716 0.087 3 1 [2.0, 3.0) 1168.0 5.19 843.0 325.0 0.278253 -0.297 0.005 4 2 [3.0, 7.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 5 3 [7.0, 13.0) 5742.0 25.52 4723.0 1019.0 0.177464 0.283 0.019 6 4 [13.0, 17.0) 3488.0 15.50 2962.0 526.0 0.150803 0.478 0.031 7 5 [17.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 Notice in the first table there is an additional column that are the optimized buckets (those indexes are aggregated in the second table). Because of the additive nature of the IV, by reducing the number of buckets, the IV will normally decrease. The goal is to reduce the number of buckets as much as possible, by keeping a high IV value, and check for monotonicity wherever needed. y_train . value_counts ( normalize = True ) 0 0.777378 1 0.222622 Name: y, dtype: float64 bucketing_process . plot_prebucket ( 'x1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) bucketing_process . plot_bucket ( 'x1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) bucketing_process . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 x1 21 8 0.186123 float64 1 x2 4 4 0.010225 float64 2 x3 5 5 0.027332 float64 3 x4 4 4 0.005379 float64 4 x5 24 3 0.009663 float64 5 x6 6 5 0.871685 float64 6 x7 5 3 0.567571 float64 7 x8 5 4 0.431979 float64 8 x9 5 4 0.371231 float64 9 x10 5 4 0.334732 float64 10 x11 5 4 0.283282 float64 11 x12 26 7 0.008280 float64 12 x13 27 6 0.005242 float64 13 x14 25 5 0.004368 float64 14 x15 22 6 0.003904 float64 15 x16 24 4 0.005211 float64 16 x17 25 4 0.005717 float64 17 x18 21 7 0.181745 float64 18 x19 21 7 0.167212 float64 19 x20 21 7 0.126632 float64 20 x21 22 7 0.109142 float64 21 x22 19 7 0.088834 float64 22 x23 20 7 0.098997 float64 bucketing_process . save_yml ( open ( 'best_bucketing.yml' , 'w' ))","title":"Let's see the output of this optimization step"},{"location":"tutorials/1_bucketing/#manual-bucket-refinement","text":"Besides manually inspecting, it's often necessary to manually refine the buckets. skorecard implements a handy dash web-app that allows the user to redefine the bucket allocation. bucketing_process . fit ( X_train , y_train ) BucketingProcess(bucketing_pipeline=Pipeline(steps=[('optimalbucketer-1', OptimalBucketer(max_n_bins=6, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('optimalbucketer-2', OptimalBucketer(variables=['x2', 'x3', 'x4'], variables_type='categorical'))]), prebucketing_pipeline=P...steps=[('decisiontreebucketer', DecisionTreeBucketer(max_n_bins=40, min_bin_size=0.03, variables=['x1', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'x11', 'x12', 'x13', 'x14', 'x15', 'x16', 'x17', 'x18', 'x19', 'x20', 'x21', 'x22', 'x23'])), ('ordinalcategoricalbucketer', OrdinalCategoricalBucketer(tol=0.02, variables=['x2', 'x3', 'x4']))]), specials={'x1': {'special_demo': [50000]}})","title":"Manual bucket refinement"},{"location":"tutorials/1_bucketing/#up-next","text":"How to perform feature selection in a skorecard model","title":"Up next"},{"location":"tutorials/2_feature_selection/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Once the buckets are defined, the next step is to perform the feature selection. \u00b6 In building a skorecard model, there are a few recommended steps to felect the features. Calculate the information values (IV) to identify the very predictive features Calculate the Population Stability Index (PSI) to identify the unstable features Evaluate the multicollinearity of the features that pass the previous two steps The information value IV \u00b6 The information value is defined by the following equation \\[IV = \\sum_{i}(\\%n_{i}^{y=0} - \\%n_{i}^{y=1})\\frac{\\%n_{i}^{y=0}}{\\%n_{i}^{y=1}}\\] where \\(i\\) is the bucket index, \\(\\%n_{i}^{y=0}\\) represents the fraction counts of target 0 in the bucket, while \\(\\%n_{i}^{y=1}\\) represents the fraction of the counts of target 1 in the bucket \\(i\\) . The IV is a weighted sum of the Weighte of Evidences (WoE) of every bin. The higher the value, the larger the separation between the classes: in other words the more predictive the feature is. As a rule of thumb: - IV<0.02 non predictive features - 0.02 < IV < 0.1 predictive feature - IV > 0.1 very predictive feature The Population Stability index (PSI) \u00b6 The PSI measures the similarity between two samples. The PSI is defined as \\[PSI = \\sum_{i}(\\%n_{i}^{X1} - \\%n_{i}^{X2})\\frac{\\%n_{i}^{X1}}{\\%n_{i}^{X2}}\\] where \\(i\\) is the bucket index, \\(\\%n_{i}^{X1}\\) represents the fraction counts of the feature in the sample X1 , while \\(\\%n_{i}^{y=1}\\) represents the fraction counts of the feature in the sample X2 in the bucket \\(i\\) . It's the same definition as in the IV. However, here large values indicate a difference between two samples, therefore for the selection we look at the lower values: - IV < 0.02 stable features - 0.02 < IV < 0.1 unstable, but acceptable, feature - IV > 0.1 unstable feature Let's load the data as in the previous tutorials. import pandas as pd from skorecard.datasets import load_credit_card data = load_credit_card ( as_frame = True ) And split it into train and test data from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) Load the saved buckets \u00b6 import yaml buckets_dict = yaml . safe_load ( open ( \"buckets.yml\" , 'r' )) Define the bucketer, using the UserInputBucketer from skorecard.bucketers import UserInputBucketer uib = UserInputBucketer ( buckets_dict ) X_train_bins = uib . fit_transform ( X_train , y_train ) X_test_bins = uib . transform ( X_test ) X_train_bins .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 21177 2 0 0 0 1 1 0 0 0 0 ... 0 0 3 3 1 1 1 2 2 2 23942 0 0 2 0 0 1 0 0 0 0 ... 0 0 2 2 1 1 1 3 2 1 1247 1 1 2 0 1 0 0 0 0 0 ... 0 0 0 0 1 0 0 0 0 0 23622 2 1 2 1 2 2 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 28454 0 1 2 0 2 1 0 0 0 0 ... 0 0 2 2 1 1 1 1 1 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 29802 -3 0 2 0 1 1 0 0 0 0 ... 0 0 2 1 1 1 1 1 1 3 5390 2 0 1 0 2 3 1 1 1 1 ... 0 0 3 3 2 2 0 3 2 2 860 -3 0 1 0 1 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 15795 0 1 2 0 0 1 0 0 0 1 ... 0 0 2 2 1 1 1 1 0 1 23654 2 1 2 1 2 0 0 0 0 0 ... 0 0 1 2 0 1 1 2 3 1 22500 rows \u00d7 23 columns uib . bucket_table ( 'x1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037 Calculating the Information Value \u00b6 The information value can be calculated by the iv function in the reporting module. from skorecard.reporting import iv iv_dict = iv ( X_train_bins , y_train ) iv_values = pd . Series ( iv_dict ) . sort_values ( ascending = False ) # sort them by predicting power iv_values . head ( 5 ) x6 0.881380 x7 0.567571 x8 0.431407 x9 0.370131 x10 0.333630 dtype: float64 Using the definitions from the beginning of this tutorial, we can select the features where the IV values is above 0.02 preselected_features = iv_values [ iv_values > 0.02 ] . index . tolist () print ( f \"Total selected features by IV: { len ( preselected_features ) } \" ) Total selected features by IV: 16 Calculate the PSI \u00b6 Similar to the IV, by using the psi function in the report module. from skorecard.reporting import psi psi_dict = psi ( X_train_bins , X_test_bins ) psi_values = pd . Series ( psi_dict ) psi_values . sort_values ( ascending = False ) . head ( 5 ) x6 0.000996 x2 0.000702 x12 0.000697 x19 0.000443 x21 0.000357 dtype: float64 In this particular case, all the features have a very low PSI, hence no instability is present and no feature selection is performed. Removing multi-collinear features \u00b6 A skorecard model is based on a logistic regression algorithm. Logistic regression suffers from multi-collinearity (i.e. highly correlated features) by design. There are multiple ways of measuring it (VIF, correlations)... Here we are showing the approach with correlations. First, let's build an easy visualization function import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline def plot_correlations ( corr ): plt . figure ( figsize = ( 10 , 8 ), constrained_layout = True ) cmap = plt . cm . get_cmap ( \"RdBu\" ) matrix = np . triu ( corr ) sns . heatmap ( corr , vmin =- 1 , vmax = 1 , annot = True , mask = matrix , cmap = cmap , annot_kws = { \"fontsize\" : 6 }) Adding the WoE Encoder \u00b6 A default scorecard model is defined by the following steps: - bucketing - encoder (a default one is a WoE encoder) - logistic regression model As the input of the logistic regression model is the dataset transformed to its WoE, first let's build the pipline with the first two steps and transform the dataset from skorecard.preprocessing import WoeEncoder from sklearn.pipeline import make_pipeline woe_pipe = make_pipeline ( uib , WoeEncoder () ) X_train_woe = woe_pipe . fit_transform ( X_train , y_train ) X_train_corr = X_train_woe [ preselected_features ] . corr () plot_correlations ( X_train_corr ) As a rule of thumb, correlations above 0.6 can be considered problematic for the logisitc regression model (this threshold might depend heeavily on dataset and use case). The following code snippet illustrates a recursive feature elimination step, where features are sorted by their IV importance, and correlated features with lower IV importance are removed corr_limit = 0.6 # correlation threshold drop_feats = list () # keep_feats = list() for ix , feature in enumerate ( preselected_features ): if feature in drop_feats : continue remaining_features = [ feat for feat in preselected_features [ ix :] #check the next feature in the preselected step if feat not in drop_feats and feat != feature ] if len ( remaining_features ) == 0 : continue # go to the next step if the features at step x have already been removeed # find the correlated features with the remaining preselected features # both positive and negative correlations matter, hence the abs() corr_feats = X_train_corr . loc [ remaining_features , feature ] . apply ( lambda x : abs ( x )) drop_at_step = corr_feats [ corr_feats > corr_limit ] . index . tolist () # append the new features to the list drop_feats += drop_at_step # Select thee features with low correlations good_feats = [ feat for feat in preselected_features if feat not in drop_feats ] print ( f \"Total preselected features: { len ( preselected_features ) } \" ) print ( f \"Total features dropped due too high correlations: { len ( drop_feats ) } \" ) print ( f \"Total selected features: { len ( good_feats ) } \" ) Total preselected features: 16 Total features dropped due too high correlations: 2 Total selected features: 14 Visualizing the correlation of the good features to verify that the RFE step worked plot_correlations ( X_train_woe [ good_feats ] . corr ()) and the final list of selected features is shown below good_feats ['x6', 'x7', 'x9', 'x11', 'x18', 'x1', 'x19', 'x20', 'x21', 'x23', 'x22', 'x3', 'x17', 'x16'] Up next \u00b6 After performing the feature selection, it's time to build the final Skorecard model.","title":"Selecting features"},{"location":"tutorials/2_feature_selection/#once-the-buckets-are-defined-the-next-step-is-to-perform-the-feature-selection","text":"In building a skorecard model, there are a few recommended steps to felect the features. Calculate the information values (IV) to identify the very predictive features Calculate the Population Stability Index (PSI) to identify the unstable features Evaluate the multicollinearity of the features that pass the previous two steps","title":"Once the buckets are defined, the next step is to perform the feature selection."},{"location":"tutorials/2_feature_selection/#the-information-value-iv","text":"The information value is defined by the following equation \\[IV = \\sum_{i}(\\%n_{i}^{y=0} - \\%n_{i}^{y=1})\\frac{\\%n_{i}^{y=0}}{\\%n_{i}^{y=1}}\\] where \\(i\\) is the bucket index, \\(\\%n_{i}^{y=0}\\) represents the fraction counts of target 0 in the bucket, while \\(\\%n_{i}^{y=1}\\) represents the fraction of the counts of target 1 in the bucket \\(i\\) . The IV is a weighted sum of the Weighte of Evidences (WoE) of every bin. The higher the value, the larger the separation between the classes: in other words the more predictive the feature is. As a rule of thumb: - IV<0.02 non predictive features - 0.02 < IV < 0.1 predictive feature - IV > 0.1 very predictive feature","title":"The information value IV"},{"location":"tutorials/2_feature_selection/#the-population-stability-index-psi","text":"The PSI measures the similarity between two samples. The PSI is defined as \\[PSI = \\sum_{i}(\\%n_{i}^{X1} - \\%n_{i}^{X2})\\frac{\\%n_{i}^{X1}}{\\%n_{i}^{X2}}\\] where \\(i\\) is the bucket index, \\(\\%n_{i}^{X1}\\) represents the fraction counts of the feature in the sample X1 , while \\(\\%n_{i}^{y=1}\\) represents the fraction counts of the feature in the sample X2 in the bucket \\(i\\) . It's the same definition as in the IV. However, here large values indicate a difference between two samples, therefore for the selection we look at the lower values: - IV < 0.02 stable features - 0.02 < IV < 0.1 unstable, but acceptable, feature - IV > 0.1 unstable feature Let's load the data as in the previous tutorials. import pandas as pd from skorecard.datasets import load_credit_card data = load_credit_card ( as_frame = True ) And split it into train and test data from sklearn.model_selection import train_test_split X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 )","title":"The Population Stability index (PSI)"},{"location":"tutorials/2_feature_selection/#load-the-saved-buckets","text":"import yaml buckets_dict = yaml . safe_load ( open ( \"buckets.yml\" , 'r' )) Define the bucketer, using the UserInputBucketer from skorecard.bucketers import UserInputBucketer uib = UserInputBucketer ( buckets_dict ) X_train_bins = uib . fit_transform ( X_train , y_train ) X_test_bins = uib . transform ( X_test ) X_train_bins .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 ... x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 21177 2 0 0 0 1 1 0 0 0 0 ... 0 0 3 3 1 1 1 2 2 2 23942 0 0 2 0 0 1 0 0 0 0 ... 0 0 2 2 1 1 1 3 2 1 1247 1 1 2 0 1 0 0 0 0 0 ... 0 0 0 0 1 0 0 0 0 0 23622 2 1 2 1 2 2 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 28454 0 1 2 0 2 1 0 0 0 0 ... 0 0 2 2 1 1 1 1 1 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 29802 -3 0 2 0 1 1 0 0 0 0 ... 0 0 2 1 1 1 1 1 1 3 5390 2 0 1 0 2 3 1 1 1 1 ... 0 0 3 3 2 2 0 3 2 2 860 -3 0 1 0 1 0 0 0 0 0 ... 0 0 0 0 0 0 0 0 0 0 15795 0 1 2 0 0 1 0 0 0 1 ... 0 0 2 2 1 1 1 1 0 1 23654 2 1 2 1 2 0 0 0 0 0 ... 0 0 1 2 0 1 1 2 3 1 22500 rows \u00d7 23 columns uib . bucket_table ( 'x1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -3 Special: special_demo 2510.0 11.16 1848.0 662.0 0.263745 -0.224 0.006 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 [-inf, 75000.0) 4399.0 19.55 2880.0 1519.0 0.345306 -0.611 0.085 3 1 [75000.0, 145000.0) 4567.0 20.30 3494.0 1073.0 0.234946 -0.070 0.001 4 2 [145000.0, 375000.0) 9230.0 41.02 7685.0 1545.0 0.167389 0.354 0.046 5 3 [375000.0, inf) 1794.0 7.97 1584.0 210.0 0.117057 0.770 0.037","title":"Load the saved buckets"},{"location":"tutorials/2_feature_selection/#calculating-the-information-value","text":"The information value can be calculated by the iv function in the reporting module. from skorecard.reporting import iv iv_dict = iv ( X_train_bins , y_train ) iv_values = pd . Series ( iv_dict ) . sort_values ( ascending = False ) # sort them by predicting power iv_values . head ( 5 ) x6 0.881380 x7 0.567571 x8 0.431407 x9 0.370131 x10 0.333630 dtype: float64 Using the definitions from the beginning of this tutorial, we can select the features where the IV values is above 0.02 preselected_features = iv_values [ iv_values > 0.02 ] . index . tolist () print ( f \"Total selected features by IV: { len ( preselected_features ) } \" ) Total selected features by IV: 16","title":"Calculating the Information Value"},{"location":"tutorials/2_feature_selection/#calculate-the-psi","text":"Similar to the IV, by using the psi function in the report module. from skorecard.reporting import psi psi_dict = psi ( X_train_bins , X_test_bins ) psi_values = pd . Series ( psi_dict ) psi_values . sort_values ( ascending = False ) . head ( 5 ) x6 0.000996 x2 0.000702 x12 0.000697 x19 0.000443 x21 0.000357 dtype: float64 In this particular case, all the features have a very low PSI, hence no instability is present and no feature selection is performed.","title":"Calculate the PSI"},{"location":"tutorials/2_feature_selection/#removing-multi-collinear-features","text":"A skorecard model is based on a logistic regression algorithm. Logistic regression suffers from multi-collinearity (i.e. highly correlated features) by design. There are multiple ways of measuring it (VIF, correlations)... Here we are showing the approach with correlations. First, let's build an easy visualization function import numpy as np import matplotlib.pyplot as plt import seaborn as sns % matplotlib inline def plot_correlations ( corr ): plt . figure ( figsize = ( 10 , 8 ), constrained_layout = True ) cmap = plt . cm . get_cmap ( \"RdBu\" ) matrix = np . triu ( corr ) sns . heatmap ( corr , vmin =- 1 , vmax = 1 , annot = True , mask = matrix , cmap = cmap , annot_kws = { \"fontsize\" : 6 })","title":"Removing multi-collinear features"},{"location":"tutorials/2_feature_selection/#adding-the-woe-encoder","text":"A default scorecard model is defined by the following steps: - bucketing - encoder (a default one is a WoE encoder) - logistic regression model As the input of the logistic regression model is the dataset transformed to its WoE, first let's build the pipline with the first two steps and transform the dataset from skorecard.preprocessing import WoeEncoder from sklearn.pipeline import make_pipeline woe_pipe = make_pipeline ( uib , WoeEncoder () ) X_train_woe = woe_pipe . fit_transform ( X_train , y_train ) X_train_corr = X_train_woe [ preselected_features ] . corr () plot_correlations ( X_train_corr ) As a rule of thumb, correlations above 0.6 can be considered problematic for the logisitc regression model (this threshold might depend heeavily on dataset and use case). The following code snippet illustrates a recursive feature elimination step, where features are sorted by their IV importance, and correlated features with lower IV importance are removed corr_limit = 0.6 # correlation threshold drop_feats = list () # keep_feats = list() for ix , feature in enumerate ( preselected_features ): if feature in drop_feats : continue remaining_features = [ feat for feat in preselected_features [ ix :] #check the next feature in the preselected step if feat not in drop_feats and feat != feature ] if len ( remaining_features ) == 0 : continue # go to the next step if the features at step x have already been removeed # find the correlated features with the remaining preselected features # both positive and negative correlations matter, hence the abs() corr_feats = X_train_corr . loc [ remaining_features , feature ] . apply ( lambda x : abs ( x )) drop_at_step = corr_feats [ corr_feats > corr_limit ] . index . tolist () # append the new features to the list drop_feats += drop_at_step # Select thee features with low correlations good_feats = [ feat for feat in preselected_features if feat not in drop_feats ] print ( f \"Total preselected features: { len ( preselected_features ) } \" ) print ( f \"Total features dropped due too high correlations: { len ( drop_feats ) } \" ) print ( f \"Total selected features: { len ( good_feats ) } \" ) Total preselected features: 16 Total features dropped due too high correlations: 2 Total selected features: 14 Visualizing the correlation of the good features to verify that the RFE step worked plot_correlations ( X_train_woe [ good_feats ] . corr ()) and the final list of selected features is shown below good_feats ['x6', 'x7', 'x9', 'x11', 'x18', 'x1', 'x19', 'x20', 'x21', 'x23', 'x22', 'x3', 'x17', 'x16']","title":"Adding the WoE Encoder"},{"location":"tutorials/2_feature_selection/#up-next","text":"After performing the feature selection, it's time to build the final Skorecard model.","title":"Up next"},{"location":"tutorials/3_skorecard_model/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Building a scorecard model \u00b6 This tutorial shows how to build a skorecard model. Start by loading the data and performiing the train test split: import pandas as pd import numpy as np import matplotlib.pyplot as plt % matplotlib inline from skorecard.datasets import load_credit_card from sklearn.model_selection import train_test_split data = load_credit_card ( as_frame = True ) X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) Load the buckets and the selected features that were created in the previous tutorials. import yaml buckets_dict = yaml . safe_load ( open ( \"buckets.yml\" , 'r' )) selected_features = [ 'x6' , 'x8' , 'x10' , 'x18' , 'x1' , 'x19' , 'x20' , 'x21' , 'x23' , 'x22' , 'x3' , 'x17' , 'x16' ] Define the scorecard model \u00b6 A Skorecard class has two main components: - the bucketer - the list of selected features (if None is passed, it uses all the features defined in the bucketer) It behaves like a scikit-learn model from skorecard import Skorecard from skorecard.bucketers import UserInputBucketer scorecard = Skorecard ( bucketing = UserInputBucketer ( buckets_dict ), variables = selected_features , calculate_stats = True ) scorecard = scorecard . fit ( X_train , y_train ) The get_stats method returns the coefficients with their standard error and p-values scorecard . get_stats () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. Std.Err z P>|z| const -1.241909 0.018234 -68.108318 0.000000e+00 x6 -0.765686 0.020628 -37.118825 1.396362e-301 x8 -0.277082 0.033663 -8.231014 1.856352e-16 x10 -0.323763 0.036347 -8.907520 5.218682e-19 x18 -0.226041 0.050366 -4.488000 7.189489e-06 x1 -0.394552 0.048151 -8.194025 2.526325e-16 x19 -0.165788 0.055869 -2.967422 3.003087e-03 x20 -0.253802 0.062855 -4.037910 5.392951e-05 x21 -0.097436 0.072469 -1.344523 1.787793e-01 x23 -0.176596 0.073965 -2.387563 1.696051e-02 x22 -0.111084 0.076593 -1.450316 1.469704e-01 x3 -0.442646 0.095453 -4.637296 3.529970e-06 x17 -0.203660 0.133256 -1.528331 1.264305e-01 x16 0.166586 0.142489 1.169115 2.423572e-01 Retrieve the model performance like in any sklearn classifier from sklearn.metrics import roc_auc_score , classification_report proba_train = scorecard . predict_proba ( X_train )[:, 1 ] proba_test = scorecard . predict_proba ( X_test )[:, 1 ] print ( f \"AUC train: { round ( roc_auc_score ( y_train , proba_train ), 4 ) } \" ) print ( f \"AUC test : { round ( roc_auc_score ( y_test , proba_test ), 4 ) } \\n \" ) print ( classification_report ( y_test , scorecard . predict ( X_test ))) AUC train:0.7714 AUC test :0.7642 precision recall f1-score support 0 0.84 0.95 0.89 5873 1 0.66 0.34 0.45 1627 accuracy 0.82 7500 macro avg 0.75 0.65 0.67 7500 weighted avg 0.80 0.82 0.80 7500 Removing features based on their statistical properties \u00b6 Features can be further removed. In a scorecard model, the coefficients are expected to be between 0 and -1. Coefficients smaller than -1 indicate that the model relies heavily on a features (likely to overfit), while positive coefficients show an inveerted trend. Additionally, p-values of the coefficient should be smaller that 0.05. (or 0.01). Looking at the stats table above, this would suggest removing the following features from the list ['x21','x16','x17','x22'] . Note that feature removal should be done carefully, as everytime the feature is removed, the coefficients might converge elsewhere, and hence giving different model with a different interpretation. new_feats = [ feat for feat in selected_features if feat not in [ 'x21' , 'x16' , 'x17' , 'x22' ]] scorecard = Skorecard ( UserInputBucketer ( buckets_dict ), variables = new_feats , calculate_stats = True ) scorecard = scorecard . fit ( X_train , y_train ) model_stats = scorecard . get_stats () model_stats . index = [ 'Const' ] + new_feats display ( model_stats ) proba_train = scorecard . predict_proba ( X_train )[:, 1 ] proba_test = scorecard . predict_proba ( X_test )[:, 1 ] print ( f \"AUC train: { round ( roc_auc_score ( y_train , proba_train ), 4 ) } \" ) print ( f \"AUC test : { round ( roc_auc_score ( y_test , proba_test ), 4 ) } \" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. Std.Err z P>|z| Const -1.241603 0.018225 -68.125518 0.000000e+00 x6 -0.764208 0.020602 -37.094054 3.503284e-301 x8 -0.269190 0.033241 -8.098050 5.584713e-16 x10 -0.339152 0.035175 -9.641740 5.327710e-22 x18 -0.241746 0.049655 -4.868497 1.124502e-06 x1 -0.409005 0.046597 -8.777552 1.670710e-18 x19 -0.191925 0.053792 -3.567929 3.598136e-04 x20 -0.281660 0.060816 -4.631336 3.633141e-06 x23 -0.227582 0.069555 -3.271986 1.067949e-03 x3 -0.440842 0.095443 -4.618917 3.857474e-06 AUC train:0.7713 AUC test :0.7648 Retrieving the transformed data \u00b6 Buckets and WoE transformations are available directly in a fitted skorecard model print ( \"Top 5 rows and the transformed buckets\" ) display ( scorecard . bucket_transform ( X_test )[ new_feats ] . head ()) print ( \" \\n Top 5 rows and the transformed WoEs\" ) display ( scorecard . woe_transform ( X_test )[ new_feats ] . head ()) Top 5 rows and the transformed buckets .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x6 x8 x10 x18 x1 x19 x20 x23 x3 2308 1 0 0 1 0 1 1 1 1 22404 1 0 0 1 2 1 1 2 0 23397 1 0 0 1 0 1 1 2 2 25058 1 0 0 1 1 1 2 2 2 2664 1 0 0 1 -3 1 1 1 1 Top 5 rows and the transformed WoEs .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x6 x8 x10 x18 x1 x19 x20 x23 x3 2308 0.668214 0.321072 0.229952 0.029155 -0.610435 -0.00042 0.015423 -0.105218 -0.102405 22404 0.668214 0.321072 0.229952 0.029155 0.353700 -0.00042 0.015423 0.257127 0.192772 23397 0.668214 0.321072 0.229952 0.029155 -0.610435 -0.00042 0.015423 0.257127 -0.167585 25058 0.668214 0.321072 0.229952 0.029155 -0.069828 -0.00042 0.406017 0.257127 -0.167585 2664 0.668214 0.321072 0.229952 0.029155 -0.223667 -0.00042 0.015423 -0.105218 -0.102405 Getting the feature importance (to be integrated in the skorecard class) \u00b6 In order to talk of feature importance, we should consider both the coefficients and the IV of the single feature. The importance cab be approximated as the product of the two numbers. from skorecard.reporting import iv X_train_bins = scorecard . bucket_transform ( X_train ) iv_dict = iv ( X_train_bins , y_train ) iv_values = pd . Series ( iv_dict ) . sort_values ( ascending = False ) iv_values . name = \"IV\" feat_importance = model_stats [[ 'Coef.' ]] . join ( iv_values ) feat_importance [ 'importance' ] = - 1. * feat_importance [ 'Coef.' ] * feat_importance [ 'IV' ] feat_importance . sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. IV importance x6 -0.764208 0.881380 0.673558 x8 -0.269190 0.431407 0.116130 x10 -0.339152 0.333630 0.113151 x1 -0.409005 0.175246 0.071677 x18 -0.241746 0.179461 0.043384 x20 -0.281660 0.126180 0.035540 x19 -0.191925 0.164367 0.031546 x23 -0.227582 0.094546 0.021517 x3 -0.440842 0.038569 0.017003 Const -1.241603 NaN NaN Scaling the scores \u00b6 The last step of building skorecard models is the rescaling of the predictions. This is a very common practice within the Credit Risk domain, where scorecard models are widely used. Rescaling scorecards has no impact on the model performance, but rather returns the predictions on an arbitrary scale (normally from 0-1000) which are more meaningful for risk manager and underwriters in a bank than probabilities. The rescaling is a linear transfromation performed on the log-odds of the predicted probability \\(p\\) , \\[ log(\\frac{1-p}{p}) \\] The reference for the linear transformation are commonly defined by the following values: ref_score : reference score, that should match a given reference odds (ref_odds) ref_odds : reference odds that should match a giver reference score pdo : points to double the odds, number of points to add where the odds double. An example: with the following settings: ref_score = 400 ref_odds = 20 pdo = 25 A score of 400 corresponds to the odds 20:1 of being a \"good client\" ( y=0 ), in other words the predicted probability to be y=1 in this case ~4.76% ) When the score increases to 425 , the odds double to 40:1 (predicted probability to be y=1 is ~2,43% ). When the score decreases to 375 , the odds are reduced by a factor 2, ie, 10:1 (predicted probability to be y=1 is ~9,09% ). In skorecard , one can use the calibrate_to_master_scale function from skorecard.rescale import calibrate_to_master_scale proba_train = pd . Series ( proba_train , index = y_train . index ) . sort_values () # sorting for visualization purposes scores = calibrate_to_master_scale ( proba_train , pdo = 25 , ref_score = 400 , ref_odds = 20 ) Visualize the score dependencies \u00b6 fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 3 , sharex = True , figsize = ( 8 , 12 ), gridspec_kw = { 'hspace' : 0 }) ax1 . plot ( scores . values , proba_train . values ) ax1 . set_ylabel ( \"Predicted probability\" ) ax1 . set_title ( \"Rescaled scores and probabilities\" ) ax1 . grid () ax2 . plot ( scores . values , proba_train . apply ( lambda x : ( 1 - x ) / x ) . values ) ax2 . set_ylabel ( \"Odds\" ) ax2 . grid () ax3 . plot ( scores . values , proba_train . apply ( lambda x : np . log ( 1 - x ) - np . log ( x )) . values ,) ax3 . set_ylabel ( \"log-odds\" ) ax3 . grid () ax3 . set_xlabel ( \"Rescaled scores\" ) plt . show () Assigning points to every feature \u00b6 The last step of a scorecard development is to convert all the features into the rescaled model. A scorecard model is a logisitic regression fitted on the WoE values of every single bucketed feature. In other words, the following equations holds: \\[ log(odds) = log(\\frac{1-p}{p}) = \\beta_{0} + \\sum_{i} \\beta_{i} \\cdot WOE(X_{i}) \\] As the rescaling performed earlier is linear in the predicted log-odds , this means that the every feature-bucket contribution can be rescaled to an integer value (by rescaling directly the $ \\beta_{i} \\cdot WOE(X_{i})$ factors with the same calculations. This returns the final scorecard, that can be easily implemented. The functionality in skorecard to rescale the features is as follows from skorecard.rescale import ScoreCardPoints # ensure that pdo, ref_score and ref_odds are consistent scp = ScoreCardPoints ( skorecard_model = scorecard , pdo = 25 , ref_score = 400 , ref_odds = 20 ) one can extract the final scorecard as follows scp . get_scorecard_points () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bin_index map woe feature coef contribution Points 1 0 [-inf, -0.5) 0.419571 x6 -0.764208 -0.320639 49 2 1 [-0.5, 0.5) 0.668214 x6 -0.764208 -0.510655 56 3 2 [0.5, 1.5) -0.585414 x6 -0.764208 0.447378 21 4 3 [1.5, inf) -2.094401 x6 -0.764208 1.600558 -20 6 0 [-inf, 1.5) 0.321072 x8 -0.269190 -0.086429 41 7 1 [1.5, inf) -1.392144 x8 -0.269190 0.374751 24 9 0 [-inf, 1.0) 0.229952 x10 -0.339152 -0.077989 40 10 1 [1.0, inf) -1.490744 x10 -0.339152 0.505589 19 12 0 [-inf, 21.0) -0.691658 x18 -0.241746 0.167205 31 13 1 [21.0, 4552.5) 0.029155 x18 -0.241746 -0.007048 38 14 2 [4552.5, 15001.5) 0.457794 x18 -0.241746 -0.110670 41 15 3 [15001.5, inf) 0.864446 x18 -0.241746 -0.208976 45 16 -3 Special: special_demo -0.223667 x1 -0.409005 0.091481 34 18 0 [-inf, 75000.0) -0.610435 x1 -0.409005 0.249671 28 19 1 [75000.0, 145000.0) -0.069828 x1 -0.409005 0.028560 36 20 2 [145000.0, 375000.0) 0.353700 x1 -0.409005 -0.144665 43 21 3 [375000.0, inf) 0.768872 x1 -0.409005 -0.314473 49 23 0 [-inf, 131.5) -0.575973 x19 -0.191925 0.110544 33 24 1 [131.5, 4970.5) -0.000420 x19 -0.191925 0.000081 37 25 2 [4970.5, 15001.0) 0.404465 x19 -0.191925 -0.077627 40 26 3 [15001.0, inf) 1.166887 x19 -0.191925 -0.223955 45 28 0 [-inf, 16.5) -0.509150 x20 -0.281660 0.143407 32 29 1 [16.5, 4513.5) 0.015423 x20 -0.281660 -0.004344 38 30 2 [4513.5, 12490.5) 0.406017 x20 -0.281660 -0.114359 42 31 3 [12490.5, inf) 0.834994 x20 -0.281660 -0.235184 46 33 0 [-inf, 1.5) -0.350635 x23 -0.227582 0.079798 35 34 1 [1.5, 2000.5) -0.105218 x23 -0.227582 0.023946 37 35 2 [2000.5, 9849.5) 0.257127 x23 -0.227582 -0.058517 40 36 3 [9849.5, inf) 0.703908 x23 -0.227582 -0.160197 43 37 -2 Other 1.227579 x3 -0.440842 -0.541169 57 39 0 1.0 0.192772 x3 -0.440842 -0.084982 40 40 1 2.0 -0.102405 x3 -0.440842 0.045144 36 41 2 3.0 -0.167585 x3 -0.440842 0.073878 35 42 0 0 0.000000 Intercept -1.241603 -0.000000 0 Or one can apply the transformation directly on the data, by calling the transform method, in order to map each feature to its actual points. Validate the rescaling \u00b6 As the last step, in order to ensure that the rescaling was successfull, one can verify that the sum of the points of each row in the dataset matches the rescaled scores. The rescaling steps has some integer rounding, therefore small discrepancies of 1-2 points might occur due to the rounding error proba_train = pd . Series ( proba_train , index = y_train . index ) #convert to pandas and correct index in order to be able to perform the diff scores = calibrate_to_master_scale ( proba_train , pdo = 25 , ref_score = 400 , ref_odds = 20 ) # Check the distribution of the differences ( scores - scp . transform ( X_train ) . sum ( axis = 1 )) . value_counts () -1 10816 0 7892 1 1994 -2 1716 2 82 dtype: int64","title":"Scorecard model"},{"location":"tutorials/3_skorecard_model/#building-a-scorecard-model","text":"This tutorial shows how to build a skorecard model. Start by loading the data and performiing the train test split: import pandas as pd import numpy as np import matplotlib.pyplot as plt % matplotlib inline from skorecard.datasets import load_credit_card from sklearn.model_selection import train_test_split data = load_credit_card ( as_frame = True ) X_train , X_test , y_train , y_test = train_test_split ( data . drop ([ 'y' ], axis = 1 ), data [ 'y' ], test_size = 0.25 , random_state = 42 ) Load the buckets and the selected features that were created in the previous tutorials. import yaml buckets_dict = yaml . safe_load ( open ( \"buckets.yml\" , 'r' )) selected_features = [ 'x6' , 'x8' , 'x10' , 'x18' , 'x1' , 'x19' , 'x20' , 'x21' , 'x23' , 'x22' , 'x3' , 'x17' , 'x16' ]","title":"Building a scorecard model"},{"location":"tutorials/3_skorecard_model/#define-the-scorecard-model","text":"A Skorecard class has two main components: - the bucketer - the list of selected features (if None is passed, it uses all the features defined in the bucketer) It behaves like a scikit-learn model from skorecard import Skorecard from skorecard.bucketers import UserInputBucketer scorecard = Skorecard ( bucketing = UserInputBucketer ( buckets_dict ), variables = selected_features , calculate_stats = True ) scorecard = scorecard . fit ( X_train , y_train ) The get_stats method returns the coefficients with their standard error and p-values scorecard . get_stats () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. Std.Err z P>|z| const -1.241909 0.018234 -68.108318 0.000000e+00 x6 -0.765686 0.020628 -37.118825 1.396362e-301 x8 -0.277082 0.033663 -8.231014 1.856352e-16 x10 -0.323763 0.036347 -8.907520 5.218682e-19 x18 -0.226041 0.050366 -4.488000 7.189489e-06 x1 -0.394552 0.048151 -8.194025 2.526325e-16 x19 -0.165788 0.055869 -2.967422 3.003087e-03 x20 -0.253802 0.062855 -4.037910 5.392951e-05 x21 -0.097436 0.072469 -1.344523 1.787793e-01 x23 -0.176596 0.073965 -2.387563 1.696051e-02 x22 -0.111084 0.076593 -1.450316 1.469704e-01 x3 -0.442646 0.095453 -4.637296 3.529970e-06 x17 -0.203660 0.133256 -1.528331 1.264305e-01 x16 0.166586 0.142489 1.169115 2.423572e-01 Retrieve the model performance like in any sklearn classifier from sklearn.metrics import roc_auc_score , classification_report proba_train = scorecard . predict_proba ( X_train )[:, 1 ] proba_test = scorecard . predict_proba ( X_test )[:, 1 ] print ( f \"AUC train: { round ( roc_auc_score ( y_train , proba_train ), 4 ) } \" ) print ( f \"AUC test : { round ( roc_auc_score ( y_test , proba_test ), 4 ) } \\n \" ) print ( classification_report ( y_test , scorecard . predict ( X_test ))) AUC train:0.7714 AUC test :0.7642 precision recall f1-score support 0 0.84 0.95 0.89 5873 1 0.66 0.34 0.45 1627 accuracy 0.82 7500 macro avg 0.75 0.65 0.67 7500 weighted avg 0.80 0.82 0.80 7500","title":"Define the scorecard model"},{"location":"tutorials/3_skorecard_model/#removing-features-based-on-their-statistical-properties","text":"Features can be further removed. In a scorecard model, the coefficients are expected to be between 0 and -1. Coefficients smaller than -1 indicate that the model relies heavily on a features (likely to overfit), while positive coefficients show an inveerted trend. Additionally, p-values of the coefficient should be smaller that 0.05. (or 0.01). Looking at the stats table above, this would suggest removing the following features from the list ['x21','x16','x17','x22'] . Note that feature removal should be done carefully, as everytime the feature is removed, the coefficients might converge elsewhere, and hence giving different model with a different interpretation. new_feats = [ feat for feat in selected_features if feat not in [ 'x21' , 'x16' , 'x17' , 'x22' ]] scorecard = Skorecard ( UserInputBucketer ( buckets_dict ), variables = new_feats , calculate_stats = True ) scorecard = scorecard . fit ( X_train , y_train ) model_stats = scorecard . get_stats () model_stats . index = [ 'Const' ] + new_feats display ( model_stats ) proba_train = scorecard . predict_proba ( X_train )[:, 1 ] proba_test = scorecard . predict_proba ( X_test )[:, 1 ] print ( f \"AUC train: { round ( roc_auc_score ( y_train , proba_train ), 4 ) } \" ) print ( f \"AUC test : { round ( roc_auc_score ( y_test , proba_test ), 4 ) } \" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. Std.Err z P>|z| Const -1.241603 0.018225 -68.125518 0.000000e+00 x6 -0.764208 0.020602 -37.094054 3.503284e-301 x8 -0.269190 0.033241 -8.098050 5.584713e-16 x10 -0.339152 0.035175 -9.641740 5.327710e-22 x18 -0.241746 0.049655 -4.868497 1.124502e-06 x1 -0.409005 0.046597 -8.777552 1.670710e-18 x19 -0.191925 0.053792 -3.567929 3.598136e-04 x20 -0.281660 0.060816 -4.631336 3.633141e-06 x23 -0.227582 0.069555 -3.271986 1.067949e-03 x3 -0.440842 0.095443 -4.618917 3.857474e-06 AUC train:0.7713 AUC test :0.7648","title":"Removing features based on their statistical properties"},{"location":"tutorials/3_skorecard_model/#retrieving-the-transformed-data","text":"Buckets and WoE transformations are available directly in a fitted skorecard model print ( \"Top 5 rows and the transformed buckets\" ) display ( scorecard . bucket_transform ( X_test )[ new_feats ] . head ()) print ( \" \\n Top 5 rows and the transformed WoEs\" ) display ( scorecard . woe_transform ( X_test )[ new_feats ] . head ()) Top 5 rows and the transformed buckets .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x6 x8 x10 x18 x1 x19 x20 x23 x3 2308 1 0 0 1 0 1 1 1 1 22404 1 0 0 1 2 1 1 2 0 23397 1 0 0 1 0 1 1 2 2 25058 1 0 0 1 1 1 2 2 2 2664 1 0 0 1 -3 1 1 1 1 Top 5 rows and the transformed WoEs .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x6 x8 x10 x18 x1 x19 x20 x23 x3 2308 0.668214 0.321072 0.229952 0.029155 -0.610435 -0.00042 0.015423 -0.105218 -0.102405 22404 0.668214 0.321072 0.229952 0.029155 0.353700 -0.00042 0.015423 0.257127 0.192772 23397 0.668214 0.321072 0.229952 0.029155 -0.610435 -0.00042 0.015423 0.257127 -0.167585 25058 0.668214 0.321072 0.229952 0.029155 -0.069828 -0.00042 0.406017 0.257127 -0.167585 2664 0.668214 0.321072 0.229952 0.029155 -0.223667 -0.00042 0.015423 -0.105218 -0.102405","title":"Retrieving the transformed data"},{"location":"tutorials/3_skorecard_model/#getting-the-feature-importance-to-be-integrated-in-the-skorecard-class","text":"In order to talk of feature importance, we should consider both the coefficients and the IV of the single feature. The importance cab be approximated as the product of the two numbers. from skorecard.reporting import iv X_train_bins = scorecard . bucket_transform ( X_train ) iv_dict = iv ( X_train_bins , y_train ) iv_values = pd . Series ( iv_dict ) . sort_values ( ascending = False ) iv_values . name = \"IV\" feat_importance = model_stats [[ 'Coef.' ]] . join ( iv_values ) feat_importance [ 'importance' ] = - 1. * feat_importance [ 'Coef.' ] * feat_importance [ 'IV' ] feat_importance . sort_values ( by = 'importance' , ascending = False ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Coef. IV importance x6 -0.764208 0.881380 0.673558 x8 -0.269190 0.431407 0.116130 x10 -0.339152 0.333630 0.113151 x1 -0.409005 0.175246 0.071677 x18 -0.241746 0.179461 0.043384 x20 -0.281660 0.126180 0.035540 x19 -0.191925 0.164367 0.031546 x23 -0.227582 0.094546 0.021517 x3 -0.440842 0.038569 0.017003 Const -1.241603 NaN NaN","title":"Getting the feature importance (to be integrated in the skorecard class)"},{"location":"tutorials/3_skorecard_model/#scaling-the-scores","text":"The last step of building skorecard models is the rescaling of the predictions. This is a very common practice within the Credit Risk domain, where scorecard models are widely used. Rescaling scorecards has no impact on the model performance, but rather returns the predictions on an arbitrary scale (normally from 0-1000) which are more meaningful for risk manager and underwriters in a bank than probabilities. The rescaling is a linear transfromation performed on the log-odds of the predicted probability \\(p\\) , \\[ log(\\frac{1-p}{p}) \\] The reference for the linear transformation are commonly defined by the following values: ref_score : reference score, that should match a given reference odds (ref_odds) ref_odds : reference odds that should match a giver reference score pdo : points to double the odds, number of points to add where the odds double. An example: with the following settings: ref_score = 400 ref_odds = 20 pdo = 25 A score of 400 corresponds to the odds 20:1 of being a \"good client\" ( y=0 ), in other words the predicted probability to be y=1 in this case ~4.76% ) When the score increases to 425 , the odds double to 40:1 (predicted probability to be y=1 is ~2,43% ). When the score decreases to 375 , the odds are reduced by a factor 2, ie, 10:1 (predicted probability to be y=1 is ~9,09% ). In skorecard , one can use the calibrate_to_master_scale function from skorecard.rescale import calibrate_to_master_scale proba_train = pd . Series ( proba_train , index = y_train . index ) . sort_values () # sorting for visualization purposes scores = calibrate_to_master_scale ( proba_train , pdo = 25 , ref_score = 400 , ref_odds = 20 )","title":"Scaling the scores"},{"location":"tutorials/3_skorecard_model/#visualize-the-score-dependencies","text":"fig , ( ax1 , ax2 , ax3 ) = plt . subplots ( 3 , sharex = True , figsize = ( 8 , 12 ), gridspec_kw = { 'hspace' : 0 }) ax1 . plot ( scores . values , proba_train . values ) ax1 . set_ylabel ( \"Predicted probability\" ) ax1 . set_title ( \"Rescaled scores and probabilities\" ) ax1 . grid () ax2 . plot ( scores . values , proba_train . apply ( lambda x : ( 1 - x ) / x ) . values ) ax2 . set_ylabel ( \"Odds\" ) ax2 . grid () ax3 . plot ( scores . values , proba_train . apply ( lambda x : np . log ( 1 - x ) - np . log ( x )) . values ,) ax3 . set_ylabel ( \"log-odds\" ) ax3 . grid () ax3 . set_xlabel ( \"Rescaled scores\" ) plt . show ()","title":"Visualize the score dependencies"},{"location":"tutorials/3_skorecard_model/#assigning-points-to-every-feature","text":"The last step of a scorecard development is to convert all the features into the rescaled model. A scorecard model is a logisitic regression fitted on the WoE values of every single bucketed feature. In other words, the following equations holds: \\[ log(odds) = log(\\frac{1-p}{p}) = \\beta_{0} + \\sum_{i} \\beta_{i} \\cdot WOE(X_{i}) \\] As the rescaling performed earlier is linear in the predicted log-odds , this means that the every feature-bucket contribution can be rescaled to an integer value (by rescaling directly the $ \\beta_{i} \\cdot WOE(X_{i})$ factors with the same calculations. This returns the final scorecard, that can be easily implemented. The functionality in skorecard to rescale the features is as follows from skorecard.rescale import ScoreCardPoints # ensure that pdo, ref_score and ref_odds are consistent scp = ScoreCardPoints ( skorecard_model = scorecard , pdo = 25 , ref_score = 400 , ref_odds = 20 ) one can extract the final scorecard as follows scp . get_scorecard_points () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bin_index map woe feature coef contribution Points 1 0 [-inf, -0.5) 0.419571 x6 -0.764208 -0.320639 49 2 1 [-0.5, 0.5) 0.668214 x6 -0.764208 -0.510655 56 3 2 [0.5, 1.5) -0.585414 x6 -0.764208 0.447378 21 4 3 [1.5, inf) -2.094401 x6 -0.764208 1.600558 -20 6 0 [-inf, 1.5) 0.321072 x8 -0.269190 -0.086429 41 7 1 [1.5, inf) -1.392144 x8 -0.269190 0.374751 24 9 0 [-inf, 1.0) 0.229952 x10 -0.339152 -0.077989 40 10 1 [1.0, inf) -1.490744 x10 -0.339152 0.505589 19 12 0 [-inf, 21.0) -0.691658 x18 -0.241746 0.167205 31 13 1 [21.0, 4552.5) 0.029155 x18 -0.241746 -0.007048 38 14 2 [4552.5, 15001.5) 0.457794 x18 -0.241746 -0.110670 41 15 3 [15001.5, inf) 0.864446 x18 -0.241746 -0.208976 45 16 -3 Special: special_demo -0.223667 x1 -0.409005 0.091481 34 18 0 [-inf, 75000.0) -0.610435 x1 -0.409005 0.249671 28 19 1 [75000.0, 145000.0) -0.069828 x1 -0.409005 0.028560 36 20 2 [145000.0, 375000.0) 0.353700 x1 -0.409005 -0.144665 43 21 3 [375000.0, inf) 0.768872 x1 -0.409005 -0.314473 49 23 0 [-inf, 131.5) -0.575973 x19 -0.191925 0.110544 33 24 1 [131.5, 4970.5) -0.000420 x19 -0.191925 0.000081 37 25 2 [4970.5, 15001.0) 0.404465 x19 -0.191925 -0.077627 40 26 3 [15001.0, inf) 1.166887 x19 -0.191925 -0.223955 45 28 0 [-inf, 16.5) -0.509150 x20 -0.281660 0.143407 32 29 1 [16.5, 4513.5) 0.015423 x20 -0.281660 -0.004344 38 30 2 [4513.5, 12490.5) 0.406017 x20 -0.281660 -0.114359 42 31 3 [12490.5, inf) 0.834994 x20 -0.281660 -0.235184 46 33 0 [-inf, 1.5) -0.350635 x23 -0.227582 0.079798 35 34 1 [1.5, 2000.5) -0.105218 x23 -0.227582 0.023946 37 35 2 [2000.5, 9849.5) 0.257127 x23 -0.227582 -0.058517 40 36 3 [9849.5, inf) 0.703908 x23 -0.227582 -0.160197 43 37 -2 Other 1.227579 x3 -0.440842 -0.541169 57 39 0 1.0 0.192772 x3 -0.440842 -0.084982 40 40 1 2.0 -0.102405 x3 -0.440842 0.045144 36 41 2 3.0 -0.167585 x3 -0.440842 0.073878 35 42 0 0 0.000000 Intercept -1.241603 -0.000000 0 Or one can apply the transformation directly on the data, by calling the transform method, in order to map each feature to its actual points.","title":"Assigning points to every feature"},{"location":"tutorials/3_skorecard_model/#validate-the-rescaling","text":"As the last step, in order to ensure that the rescaling was successfull, one can verify that the sum of the points of each row in the dataset matches the rescaled scores. The rescaling steps has some integer rounding, therefore small discrepancies of 1-2 points might occur due to the rounding error proba_train = pd . Series ( proba_train , index = y_train . index ) #convert to pandas and correct index in order to be able to perform the diff scores = calibrate_to_master_scale ( proba_train , pdo = 25 , ref_score = 400 , ref_odds = 20 ) # Check the distribution of the differences ( scores - scp . transform ( X_train ) . sum ( axis = 1 )) . value_counts () -1 10816 0 7892 1 1994 -2 1716 2 82 dtype: int64","title":"Validate the rescaling"},{"location":"tutorials/categoricals/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Categoricals \u00b6 skorecard also has bucketers that support categorical features (such as OptimalBucketer and OrdinalCategoricalBucketer ). If you have a categorical feature, you can bucket them directly: from skorecard.bucketers import OptimalBucketer import random from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) # Add a categorical feature pets = [ \"no pets\" ] * 3000 + [ \"cat lover\" ] * 1500 + [ \"dog lover\" ] * 1000 + [ \"rabbit\" ] * 498 + [ \"gold fish\" ] * 2 random . Random ( 42 ) . shuffle ( pets ) X [ \"pet_ownership\" ] = pets bucketer = OptimalBucketer ( max_n_bins = 3 , variables = [ \"pet_ownership\" ], variables_type = \"categorical\" , cat_cutoff = None ) bucketer . fit_transform ( X , y )[ 'pet_ownership' ] . value_counts () . sort_index () 0 1998 1 3000 2 1002 Name: pet_ownership, dtype: int64","title":"Categoricals"},{"location":"tutorials/categoricals/#categoricals","text":"skorecard also has bucketers that support categorical features (such as OptimalBucketer and OrdinalCategoricalBucketer ). If you have a categorical feature, you can bucket them directly: from skorecard.bucketers import OptimalBucketer import random from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) # Add a categorical feature pets = [ \"no pets\" ] * 3000 + [ \"cat lover\" ] * 1500 + [ \"dog lover\" ] * 1000 + [ \"rabbit\" ] * 498 + [ \"gold fish\" ] * 2 random . Random ( 42 ) . shuffle ( pets ) X [ \"pet_ownership\" ] = pets bucketer = OptimalBucketer ( max_n_bins = 3 , variables = [ \"pet_ownership\" ], variables_type = \"categorical\" , cat_cutoff = None ) bucketer . fit_transform ( X , y )[ 'pet_ownership' ] . value_counts () . sort_index () 0 1998 1 3000 2 1002 Name: pet_ownership, dtype: int64","title":"Categoricals"},{"location":"tutorials/interactive_bucketing/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Interactive bucketing \u00b6 You might want to manually edit the bucketing boundaries, for example to incorporate specific domain knowledge. You can manually define buckets , but you could also use to interactive explore and update the buckets. All skorecard.bucketers have a method called .fit_interactive() , which will call .fit() if the bucketer is not yet fitted, and then launch a dash webapp . Make sure to have the up to date dash dependencies by running pip install --upgrade skorecard[dashboard] . from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) # bucketer.fit_interactive(X, y) # not run This should look like: This also works for categorical features: from skorecard.bucketers import OrdinalCategoricalBucketer import random pets = [ \"no pets\" ] * 3000 + [ \"cat lover\" ] * 1500 + [ \"dog lover\" ] * 1000 + [ \"rabbit\" ] * 498 + [ \"gold fish\" ] * 2 random . Random ( 42 ) . shuffle ( pets ) X [ \"pet_ownership\" ] = pets bucketer = OrdinalCategoricalBucketer ( variables = [ 'pet_ownership' ]) # bucketer.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/ Which should look like: Pipelines \u00b6 You can also run .fit_interactive() on a pipeline of bucketers. You'll need to convert to a SkorecardPipeline in order to have access to the method: [ feat for feat in X . columns if feat not in cat_cols ] ['LIMIT_BAL', 'BILL_AMT1', 'pet_ownership'] from skorecard.bucketers import OrdinalCategoricalBucketer from skorecard.pipeline import to_skorecard_pipeline from sklearn.pipeline import make_pipeline pipe = make_pipeline ( OrdinalCategoricalBucketer ( variables = [ \"EDUCATION\" , \"MARRIAGE\" ]), DecisionTreeBucketer ( max_n_bins = 10 , variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ]) ) # Make this a skorecard pipeline, which adds some convenience methods pipe = to_skorecard_pipeline ( pipe ) # pipe.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/ BucketingProcess and Skorecard models \u00b6 Interactively setting pre-bucketing and bucketing per column is also possible on BucketingProcess and Skorecard models from skorecard import Skorecard from skorecard.datasets import load_uci_credit_card model = Skorecard ( variables = [ \"EDUCATION\" , \"MARRIAGE\" , \"LIMIT_BAL\" , \"BILL_AMT1\" ]) # model.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/","title":"Interactive"},{"location":"tutorials/interactive_bucketing/#interactive-bucketing","text":"You might want to manually edit the bucketing boundaries, for example to incorporate specific domain knowledge. You can manually define buckets , but you could also use to interactive explore and update the buckets. All skorecard.bucketers have a method called .fit_interactive() , which will call .fit() if the bucketer is not yet fitted, and then launch a dash webapp . Make sure to have the up to date dash dependencies by running pip install --upgrade skorecard[dashboard] . from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer X , y = load_uci_credit_card ( return_X_y = True ) bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) # bucketer.fit_interactive(X, y) # not run This should look like: This also works for categorical features: from skorecard.bucketers import OrdinalCategoricalBucketer import random pets = [ \"no pets\" ] * 3000 + [ \"cat lover\" ] * 1500 + [ \"dog lover\" ] * 1000 + [ \"rabbit\" ] * 498 + [ \"gold fish\" ] * 2 random . Random ( 42 ) . shuffle ( pets ) X [ \"pet_ownership\" ] = pets bucketer = OrdinalCategoricalBucketer ( variables = [ 'pet_ownership' ]) # bucketer.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/ Which should look like:","title":"Interactive bucketing"},{"location":"tutorials/interactive_bucketing/#pipelines","text":"You can also run .fit_interactive() on a pipeline of bucketers. You'll need to convert to a SkorecardPipeline in order to have access to the method: [ feat for feat in X . columns if feat not in cat_cols ] ['LIMIT_BAL', 'BILL_AMT1', 'pet_ownership'] from skorecard.bucketers import OrdinalCategoricalBucketer from skorecard.pipeline import to_skorecard_pipeline from sklearn.pipeline import make_pipeline pipe = make_pipeline ( OrdinalCategoricalBucketer ( variables = [ \"EDUCATION\" , \"MARRIAGE\" ]), DecisionTreeBucketer ( max_n_bins = 10 , variables = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ]) ) # Make this a skorecard pipeline, which adds some convenience methods pipe = to_skorecard_pipeline ( pipe ) # pipe.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/","title":"Pipelines"},{"location":"tutorials/interactive_bucketing/#bucketingprocess-and-skorecard-models","text":"Interactively setting pre-bucketing and bucketing per column is also possible on BucketingProcess and Skorecard models from skorecard import Skorecard from skorecard.datasets import load_uci_credit_card model = Skorecard ( variables = [ \"EDUCATION\" , \"MARRIAGE\" , \"LIMIT_BAL\" , \"BILL_AMT1\" ]) # model.fit_interactive(X, y) # not run Dash app running on http://127.0.0.1:8050/","title":"BucketingProcess and Skorecard models"},{"location":"tutorials/methods/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Methods \u00b6 The bucketers of skorecard come with a handy list of methods for you to peek under the hood of the bucketer from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer X , y = load_uci_credit_card ( return_X_y = True ) specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20000,30000]\" : [ 20000 , 30000 ]}} dt_bucketer = DecisionTreeBucketer ( variables = [ 'LIMIT_BAL' ], specials = specials ) dt_bucketer . fit ( X , y ) dt_bucketer . fit_transform ( X , y ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 9 201800.0 1 2 2 1 80610.0 2 1 2 9 499452.0 3 1 1 3 450.0 4 2 1 9 56107.0 .summary() \u00b6 This gives the user a simple table of the columns and number of (pre)buckets generated by the bucketer. The information value and dtypes are also given dt_bucketer . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 EDUCATION not_prebucketed not_bucketed 0.057606 int64 1 MARRIAGE not_prebucketed not_bucketed 0.016267 int64 2 LIMIT_BAL not_prebucketed 13 0.178036 float64 3 BILL_AMT1 not_prebucketed not_bucketed 2.915613 float64 .bucket_table() \u00b6 To look at the buckets in a more granular level, the bucket_table() method outputs, among others, a table containing the counts in each bin, the percentages, and the event rate. dt_bucketer . bucket_table ( 'LIMIT_BAL' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -4 Special: in [20000,30000] 723.0 12.05 453.0 270.0 0.373444 -0.724 -0.075 1 -3 Special: =50000 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 2 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 3 0 [-inf, 75000.0) 462.0 7.70 313.0 149.0 0.322511 -0.499 -0.022 4 1 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 5 2 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 6 3 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 7 4 [145000.0, 175000.0) 449.0 7.48 380.0 69.0 0.153675 0.464 -0.014 8 5 [175000.0, 225000.0) 769.0 12.82 630.0 139.0 0.180754 0.270 -0.009 9 6 [225000.0, 275000.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 10 7 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 11 8 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 12 9 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 .plot_bucket() \u00b6 We have already seen that we can plot the above bucket table for a better visualisation of the buckets dt_bucketer . plot_bucket ( 'LIMIT_BAL' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) # remove format argument for an interactive plotly plot.) .save_yml() \u00b6 We can save the generated bucket to a yaml file. This yaml file can later be used to generate a bucketer as we show in the create_bucketer_from_file tutorial dt_bucketer . save_yml ( open ( \"my_output.yml\" , \"w\" )) Bucket mapping \u00b6 If you're interested into digging into the internals of the buckets, you can access the fitted attribute features_bucket_mapping_ . For example: ```python bucketer.features_bucket_mapping_.get('pet_ownership').labels # {0: 'cat lover, rabbit', # 1: 'no pets', # 2: 'dog lover', # 3: 'gold fish', # 4: 'other', # 5: 'Missing'} ```","title":"Methods"},{"location":"tutorials/methods/#methods","text":"The bucketers of skorecard come with a handy list of methods for you to peek under the hood of the bucketer from skorecard.datasets import load_uci_credit_card from skorecard.bucketers import DecisionTreeBucketer X , y = load_uci_credit_card ( return_X_y = True ) specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20000,30000]\" : [ 20000 , 30000 ]}} dt_bucketer = DecisionTreeBucketer ( variables = [ 'LIMIT_BAL' ], specials = specials ) dt_bucketer . fit ( X , y ) dt_bucketer . fit_transform ( X , y ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 9 201800.0 1 2 2 1 80610.0 2 1 2 9 499452.0 3 1 1 3 450.0 4 2 1 9 56107.0","title":"Methods"},{"location":"tutorials/methods/#summary","text":"This gives the user a simple table of the columns and number of (pre)buckets generated by the bucketer. The information value and dtypes are also given dt_bucketer . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 EDUCATION not_prebucketed not_bucketed 0.057606 int64 1 MARRIAGE not_prebucketed not_bucketed 0.016267 int64 2 LIMIT_BAL not_prebucketed 13 0.178036 float64 3 BILL_AMT1 not_prebucketed not_bucketed 2.915613 float64","title":".summary()"},{"location":"tutorials/methods/#bucket_table","text":"To look at the buckets in a more granular level, the bucket_table() method outputs, among others, a table containing the counts in each bin, the percentages, and the event rate. dt_bucketer . bucket_table ( 'LIMIT_BAL' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -4 Special: in [20000,30000] 723.0 12.05 453.0 270.0 0.373444 -0.724 -0.075 1 -3 Special: =50000 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 2 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 3 0 [-inf, 75000.0) 462.0 7.70 313.0 149.0 0.322511 -0.499 -0.022 4 1 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 5 2 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 6 3 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 7 4 [145000.0, 175000.0) 449.0 7.48 380.0 69.0 0.153675 0.464 -0.014 8 5 [175000.0, 225000.0) 769.0 12.82 630.0 139.0 0.180754 0.270 -0.009 9 6 [225000.0, 275000.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 10 7 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 11 8 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 12 9 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022","title":".bucket_table()"},{"location":"tutorials/methods/#plot_bucket","text":"We have already seen that we can plot the above bucket table for a better visualisation of the buckets dt_bucketer . plot_bucket ( 'LIMIT_BAL' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) # remove format argument for an interactive plotly plot.)","title":".plot_bucket()"},{"location":"tutorials/methods/#save_yml","text":"We can save the generated bucket to a yaml file. This yaml file can later be used to generate a bucketer as we show in the create_bucketer_from_file tutorial dt_bucketer . save_yml ( open ( \"my_output.yml\" , \"w\" ))","title":".save_yml()"},{"location":"tutorials/methods/#bucket-mapping","text":"If you're interested into digging into the internals of the buckets, you can access the fitted attribute features_bucket_mapping_ . For example: ```python bucketer.features_bucket_mapping_.get('pet_ownership').labels # {0: 'cat lover, rabbit', # 1: 'no pets', # 2: 'dog lover', # 3: 'gold fish', # 4: 'other', # 5: 'Missing'} ```","title":"Bucket mapping"},{"location":"tutorials/missing_values/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Missing Values \u00b6 skorecard bucketers offer native support for missing values and will put them in a separate bucket by default. In the example below, you can see that the single missing value is put into a new bucket '-1'. import numpy as np import pandas as pd from skorecard.bucketers import EqualFrequencyBucketer df = pd . DataFrame ({ 'counts' : [ 1 , 2 , 2 , 1 , 4 , 2 , np . nan , 1 , 3 ]}) EqualFrequencyBucketer ( n_bins = 2 ) . fit_transform ( df ) . value_counts () counts 0 6 1 2 -1 1 dtype: int64 Specific \u00b6 Alternatively, the user can give a specific bucket for the missing values. In the example below, you can see we put the missing value into bucket 1 EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = { 'counts' : 1 }) . fit_transform ( df ) . value_counts () counts 0 6 1 3 dtype: int64 Passthrough \u00b6 If the user wishes the missing values to be left untouched, they can specify this with the passthrough argument EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'passthrough' ) . fit_transform ( df ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0.0 1 0.0 2 0.0 3 0.0 4 1.0 5 0.0 6 NaN 7 0.0 8 1.0 Most frequent \u00b6 It's also possible to put the missing values into the most common bucket. Below, we see that the missing values are put into the '0' bucket EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'most_frequent' ) . fit_transform ( df ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1 Using the target to bucket \u00b6 It's also possible to use the target to decide which bucket to use for the missing values. In the below examples, we use y as the target. Neutral \u00b6 Here the missing values are placed into the bucket that has a Weight of Evidence closest to 0 X = pd . DataFrame ({ 'counts' : [ 1 , 2 , 2 , 1 , 4 , 2 , np . nan , 1 , 3 ]}) y = pd . DataFrame ({ 'target' : [ 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]}) EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'neutral' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1 Similar \u00b6 We can also put the missing values into the bucket that has a Weight of Evidence closest to the bucket containing only missing values EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'similar' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 1 7 0 8 1 Least risky \u00b6 Missing values are put into the bucket containing the largest percentage of Class 0. a = EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'least_risky' ) #.fit_transform(X, y) a . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1 EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'least_risky' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1 Most risky \u00b6 Missing values are put into the bucket containing the largest percentage of Class 1. EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'most_risky' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 1 7 0 8 1","title":"Missing Values"},{"location":"tutorials/missing_values/#missing-values","text":"skorecard bucketers offer native support for missing values and will put them in a separate bucket by default. In the example below, you can see that the single missing value is put into a new bucket '-1'. import numpy as np import pandas as pd from skorecard.bucketers import EqualFrequencyBucketer df = pd . DataFrame ({ 'counts' : [ 1 , 2 , 2 , 1 , 4 , 2 , np . nan , 1 , 3 ]}) EqualFrequencyBucketer ( n_bins = 2 ) . fit_transform ( df ) . value_counts () counts 0 6 1 2 -1 1 dtype: int64","title":"Missing Values"},{"location":"tutorials/missing_values/#specific","text":"Alternatively, the user can give a specific bucket for the missing values. In the example below, you can see we put the missing value into bucket 1 EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = { 'counts' : 1 }) . fit_transform ( df ) . value_counts () counts 0 6 1 3 dtype: int64","title":"Specific"},{"location":"tutorials/missing_values/#passthrough","text":"If the user wishes the missing values to be left untouched, they can specify this with the passthrough argument EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'passthrough' ) . fit_transform ( df ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0.0 1 0.0 2 0.0 3 0.0 4 1.0 5 0.0 6 NaN 7 0.0 8 1.0","title":"Passthrough"},{"location":"tutorials/missing_values/#most-frequent","text":"It's also possible to put the missing values into the most common bucket. Below, we see that the missing values are put into the '0' bucket EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'most_frequent' ) . fit_transform ( df ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1","title":"Most frequent"},{"location":"tutorials/missing_values/#using-the-target-to-bucket","text":"It's also possible to use the target to decide which bucket to use for the missing values. In the below examples, we use y as the target.","title":"Using the target to bucket"},{"location":"tutorials/missing_values/#neutral","text":"Here the missing values are placed into the bucket that has a Weight of Evidence closest to 0 X = pd . DataFrame ({ 'counts' : [ 1 , 2 , 2 , 1 , 4 , 2 , np . nan , 1 , 3 ]}) y = pd . DataFrame ({ 'target' : [ 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 1 ]}) EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'neutral' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1","title":"Neutral"},{"location":"tutorials/missing_values/#similar","text":"We can also put the missing values into the bucket that has a Weight of Evidence closest to the bucket containing only missing values EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'similar' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 1 7 0 8 1","title":"Similar"},{"location":"tutorials/missing_values/#least-risky","text":"Missing values are put into the bucket containing the largest percentage of Class 0. a = EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'least_risky' ) #.fit_transform(X, y) a . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1 EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'least_risky' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 0 7 0 8 1","title":"Least risky"},{"location":"tutorials/missing_values/#most-risky","text":"Missing values are put into the bucket containing the largest percentage of Class 1. EqualFrequencyBucketer ( n_bins = 2 , missing_treatment = 'most_risky' ) . fit_transform ( X , y ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } counts 0 0 1 0 2 0 3 0 4 1 5 0 6 1 7 0 8 1","title":"Most risky"},{"location":"tutorials/reporting/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Reporting \u00b6 Reporting plays a crucial role in building scorecard models. Skorecard bucketers include a reporting module, and this tutorial shows how to extract it % matplotlib inline from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) X . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 201800.0 1 2 2 80000.0 80610.0 2 1 2 500000.0 499452.0 3 1 1 140000.0 450.0 Reporting in bucketers \u00b6 Once a bucketer is fitted, the reporting module is incorporated directly in the bucketer object from skorecard.bucketers import DecisionTreeBucketer bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) X_transformed = bucketer . fit_transform ( X , y ) X_transformed . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0 Retrieve the bucket summary table bucketer . bucket_table ( column = 'LIMIT_BAL' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 45000.0) 849.0 14.15 533.0 316.0 0.372203 -0.719 -0.087 2 1 [45000.0, 55000.0) 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 3 2 [55000.0, 75000.0) 336.0 5.60 233.0 103.0 0.306548 -0.425 -0.011 4 3 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 5 4 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 6 5 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 7 6 [145000.0, 275000.0) 1719.0 28.65 1429.0 290.0 0.168703 0.353 -0.032 8 7 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 9 8 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 10 9 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 Plotting the buckets bucketer . plot_bucket ( column = 'LIMIT_BAL' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) Reporting in Bucketing Process \u00b6 The Bucketing Process module incorporates two bucketing steps: - the prebucketing step - bucketing step Let's first fit a bucketing process step from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer , AsIsCategoricalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline df = datasets . load_uci_credit_card ( as_frame = True ) y = df [ \"default\" ] X = df . drop ( columns = [ \"default\" ]) num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ) ) _ = bucketing_process . fit ( X , y ) BucketingProcess(bucketing_pipeline=SkorecardPipeline(steps=[('optimalbucketer-1', OptimalBucketer(variables=['LIMIT_BAL', 'BILL_AMT1'])), ('optimalbucketer-2', OptimalBucketer(variables=['EDUCATION', 'MARRIAGE'], variables_type='categorical'))]), prebucketing_pipeline=SkorecardPipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(variables=['LIMIT_BAL', 'BILL_AMT1'])), ('asiscategoricalbucketer', AsIsCategoricalBucketer(variables=['EDUCATION', 'MARRIAGE']))])) Prebucketing step \u00b6 Retrieve the bucketing report of the prebucketing step by calling the prebucket_table . In addition to the statstics, the prebucket_table returns also the recommended bucket for the merging. bucketing_process . prebucket_table ( \"LIMIT_BAL\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 0 1 0 [-inf, 25000.0) 479.0 7.98 300.0 179.0 0.373695 -0.725 -0.050 0 2 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 0.370270 -0.710 -0.037 1 3 2 [45000.0, 55000.0) 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 2 4 3 [55000.0, 75000.0) 336.0 5.60 233.0 103.0 0.306548 -0.425 -0.011 2 5 4 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 3 6 5 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 3 7 6 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 4 8 7 [145000.0, 175000.0) 449.0 7.48 380.0 69.0 0.153675 0.464 -0.014 5 9 8 [175000.0, 225000.0) 769.0 12.82 630.0 139.0 0.180754 0.270 -0.009 5 10 9 [225000.0, 275000.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 6 11 10 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 7 12 11 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 7 13 12 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 8 Visualizing the bucketing bucketing_process . plot_prebucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) Bucketing step \u00b6 Retreving the bucketing table from the second step is the same like in every bucketer, ie bucketing_process . bucket_table ( \"LIMIT_BAL\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 1.0) 479.0 7.98 300.0 179.0 0.373695 -0.725 -0.050 2 1 [1.0, 2.0) 370.0 6.17 233.0 137.0 0.370270 -0.710 -0.037 3 2 [2.0, 4.0) 1012.0 16.87 751.0 261.0 0.257905 -0.185 -0.006 4 3 [4.0, 6.0) 649.0 10.82 484.0 165.0 0.254237 -0.165 -0.003 5 4 [6.0, 7.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 6 5 [7.0, 9.0) 1218.0 20.30 1010.0 208.0 0.170772 0.339 -0.021 7 6 [9.0, 10.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 8 7 [10.0, 12.0) 729.0 12.15 613.0 116.0 0.159122 0.423 -0.019 9 8 [12.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 and the same applies to plotting the bucketing step bucketing_process . plot_bucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 )","title":"Reporting"},{"location":"tutorials/reporting/#reporting","text":"Reporting plays a crucial role in building scorecard models. Skorecard bucketers include a reporting module, and this tutorial shows how to extract it % matplotlib inline from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) X . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 201800.0 1 2 2 80000.0 80610.0 2 1 2 500000.0 499452.0 3 1 1 140000.0 450.0","title":"Reporting"},{"location":"tutorials/reporting/#reporting-in-bucketers","text":"Once a bucketer is fitted, the reporting module is incorporated directly in the bucketer object from skorecard.bucketers import DecisionTreeBucketer bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) X_transformed = bucketer . fit_transform ( X , y ) X_transformed . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0 Retrieve the bucket summary table bucketer . bucket_table ( column = 'LIMIT_BAL' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 45000.0) 849.0 14.15 533.0 316.0 0.372203 -0.719 -0.087 2 1 [45000.0, 55000.0) 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 3 2 [55000.0, 75000.0) 336.0 5.60 233.0 103.0 0.306548 -0.425 -0.011 4 3 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 5 4 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 6 5 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 7 6 [145000.0, 275000.0) 1719.0 28.65 1429.0 290.0 0.168703 0.353 -0.032 8 7 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 9 8 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 10 9 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 Plotting the buckets bucketer . plot_bucket ( column = 'LIMIT_BAL' , format = \"png\" , scale = 2 , width = 1050 , height = 525 )","title":"Reporting in bucketers"},{"location":"tutorials/reporting/#reporting-in-bucketing-process","text":"The Bucketing Process module incorporates two bucketing steps: - the prebucketing step - bucketing step Let's first fit a bucketing process step from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer , AsIsCategoricalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline df = datasets . load_uci_credit_card ( as_frame = True ) y = df [ \"default\" ] X = df . drop ( columns = [ \"default\" ]) num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ) ) _ = bucketing_process . fit ( X , y ) BucketingProcess(bucketing_pipeline=SkorecardPipeline(steps=[('optimalbucketer-1', OptimalBucketer(variables=['LIMIT_BAL', 'BILL_AMT1'])), ('optimalbucketer-2', OptimalBucketer(variables=['EDUCATION', 'MARRIAGE'], variables_type='categorical'))]), prebucketing_pipeline=SkorecardPipeline(steps=[('decisiontreebucketer', DecisionTreeBucketer(variables=['LIMIT_BAL', 'BILL_AMT1'])), ('asiscategoricalbucketer', AsIsCategoricalBucketer(variables=['EDUCATION', 'MARRIAGE']))]))","title":"Reporting in Bucketing Process"},{"location":"tutorials/reporting/#prebucketing-step","text":"Retrieve the bucketing report of the prebucketing step by calling the prebucket_table . In addition to the statstics, the prebucket_table returns also the recommended bucket for the merging. bucketing_process . prebucket_table ( \"LIMIT_BAL\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 0 1 0 [-inf, 25000.0) 479.0 7.98 300.0 179.0 0.373695 -0.725 -0.050 0 2 1 [25000.0, 45000.0) 370.0 6.17 233.0 137.0 0.370270 -0.710 -0.037 1 3 2 [45000.0, 55000.0) 676.0 11.27 518.0 158.0 0.233728 -0.054 -0.000 2 4 3 [55000.0, 75000.0) 336.0 5.60 233.0 103.0 0.306548 -0.425 -0.011 2 5 4 [75000.0, 85000.0) 319.0 5.32 243.0 76.0 0.238245 -0.079 -0.000 3 6 5 [85000.0, 105000.0) 330.0 5.50 241.0 89.0 0.269697 -0.245 -0.004 3 7 6 [105000.0, 145000.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 4 8 7 [145000.0, 175000.0) 449.0 7.48 380.0 69.0 0.153675 0.464 -0.014 5 9 8 [175000.0, 225000.0) 769.0 12.82 630.0 139.0 0.180754 0.270 -0.009 5 10 9 [225000.0, 275000.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 6 11 10 [275000.0, 325000.0) 379.0 6.32 326.0 53.0 0.139842 0.575 -0.018 7 12 11 [325000.0, 385000.0) 350.0 5.83 287.0 63.0 0.180000 0.275 -0.004 7 13 12 [385000.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 8 Visualizing the bucketing bucketing_process . plot_prebucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 )","title":"Prebucketing step"},{"location":"tutorials/reporting/#bucketing-step","text":"Retreving the bucketing table from the second step is the same like in every bucketer, ie bucketing_process . bucket_table ( \"LIMIT_BAL\" ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 [-inf, 1.0) 479.0 7.98 300.0 179.0 0.373695 -0.725 -0.050 2 1 [1.0, 2.0) 370.0 6.17 233.0 137.0 0.370270 -0.710 -0.037 3 2 [2.0, 4.0) 1012.0 16.87 751.0 261.0 0.257905 -0.185 -0.006 4 3 [4.0, 6.0) 649.0 10.82 484.0 165.0 0.254237 -0.165 -0.003 5 4 [6.0, 7.0) 566.0 9.43 436.0 130.0 0.229682 -0.031 -0.000 6 5 [7.0, 9.0) 1218.0 20.30 1010.0 208.0 0.170772 0.339 -0.021 7 6 [9.0, 10.0) 501.0 8.35 419.0 82.0 0.163673 0.390 -0.011 8 7 [10.0, 12.0) 729.0 12.15 613.0 116.0 0.159122 0.423 -0.019 9 8 [12.0, inf) 476.0 7.93 409.0 67.0 0.140756 0.567 -0.022 and the same applies to plotting the bucketing step bucketing_process . plot_bucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 )","title":"Bucketing step"},{"location":"tutorials/specials/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Special values \u00b6 You might have some features with values that you need to have in a separate bucket. You can define a dictionary with the buckets you want, and pass them to the bucketer. In the example below, the special values for the variable \"EDUCATION\" are put into a separate bucket, -3. Note that this bucket is not included in the n_bins parameter from skorecard.bucketers import EqualWidthBucketer from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20001,30000]\" : [ 20000 , 30000 ]}, \"EDUCATION\" : { \"=High School, Graduate School\" : [ 1 , 3 ]} } cols = [ 'LIMIT_BAL' , 'EDUCATION' ] X_transformed = EqualWidthBucketer ( n_bins = 3 , specials = specials , variables = cols ) . fit_transform ( X , y ) X_transformed [ 'EDUCATION' ] . value_counts () -3 3199 0 2726 2 62 1 13 Name: EDUCATION, dtype: int64","title":"Special Values"},{"location":"tutorials/specials/#special-values","text":"You might have some features with values that you need to have in a separate bucket. You can define a dictionary with the buckets you want, and pass them to the bucketer. In the example below, the special values for the variable \"EDUCATION\" are put into a separate bucket, -3. Note that this bucket is not included in the n_bins parameter from skorecard.bucketers import EqualWidthBucketer from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) specials = { \"LIMIT_BAL\" : { \"=50000\" : [ 50000 ], \"in [20001,30000]\" : [ 20000 , 30000 ]}, \"EDUCATION\" : { \"=High School, Graduate School\" : [ 1 , 3 ]} } cols = [ 'LIMIT_BAL' , 'EDUCATION' ] X_transformed = EqualWidthBucketer ( n_bins = 3 , specials = specials , variables = cols ) . fit_transform ( X , y ) X_transformed [ 'EDUCATION' ] . value_counts () -3 3199 0 2726 2 62 1 13 Name: EDUCATION, dtype: int64","title":"Special values"},{"location":"tutorials/the_basics/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); The Basics \u00b6 Dummy dataset \u00b6 Let's start first with a dummy dataset based on the UCI credit card dataset. from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) X . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 201800.0 1 2 2 80000.0 80610.0 2 1 2 500000.0 499452.0 3 1 1 140000.0 450.0 A basic bucketer \u00b6 skorecard offers a set of bucketers that have a scikit-learn compatible interface. By default they will bucket all variables into n_bins buckets. Some bucketers like OptimalBucketer and DecisionTreeBucketer are supervised and can use information from y to find good buckets. You can control the numbers of buckets using max_n_bins instead of n_bins . from skorecard.bucketers import DecisionTreeBucketer bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) X_transformed = bucketer . fit_transform ( X , y ) X_transformed . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0 X_transformed [ 'BILL_AMT1' ] . value_counts () . sort_index () 0 1343 1 404 2 574 3 462 4 400 5 359 6 857 7 789 8 500 9 312 Name: BILL_AMT1, dtype: int64 Bucketing specific variables \u00b6 Instead of applying a bucketer on all features, you'll likely want to apply it only to specific features. You can use the variables parameter for that: bucketer = DecisionTreeBucketer ( max_n_bins = 10 , variables = [ \"BILL_AMT1\" ]) bucketer . fit_transform ( X , y ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 9 1 2 2 80000.0 7 2 1 2 500000.0 9 3 1 1 140000.0 0 Inspecting bucketing results \u00b6 skorecard bucketers have some methods to help you inspect the result of the bucketing process: from skorecard.bucketers import EqualWidthBucketer bucketer = EqualWidthBucketer ( n_bins = 5 , variables = [ \"BILL_AMT1\" ]) bucketer . fit ( X , y ) bucketer . bucket_table ( 'BILL_AMT1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 (-inf, -10319.399999999994] 3.0 0.05 3.0 0.0 0.000000 4.181 -0.003 2 1 (-10319.399999999994, 144941.2] 5408.0 90.13 4188.0 1220.0 0.225592 -0.008 -0.000 3 2 (144941.2, 300201.80000000005] 490.0 8.17 395.0 95.0 0.193878 0.183 -0.003 4 3 (300201.80000000005, 455462.4] 75.0 1.25 55.0 20.0 0.266667 -0.230 -0.001 5 4 (455462.4, inf] 24.0 0.40 14.0 10.0 0.416667 -0.903 -0.004 bucketer . plot_bucket ( 'BILL_AMT1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) # remove format argument for an interactive plotly plot.","title":"The Basics"},{"location":"tutorials/the_basics/#the-basics","text":"","title":"The Basics"},{"location":"tutorials/the_basics/#dummy-dataset","text":"Let's start first with a dummy dataset based on the UCI credit card dataset. from skorecard.datasets import load_uci_credit_card X , y = load_uci_credit_card ( return_X_y = True ) X . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 201800.0 1 2 2 80000.0 80610.0 2 1 2 500000.0 499452.0 3 1 1 140000.0 450.0","title":"Dummy dataset"},{"location":"tutorials/the_basics/#a-basic-bucketer","text":"skorecard offers a set of bucketers that have a scikit-learn compatible interface. By default they will bucket all variables into n_bins buckets. Some bucketers like OptimalBucketer and DecisionTreeBucketer are supervised and can use information from y to find good buckets. You can control the numbers of buckets using max_n_bins instead of n_bins . from skorecard.bucketers import DecisionTreeBucketer bucketer = DecisionTreeBucketer ( max_n_bins = 10 ) X_transformed = bucketer . fit_transform ( X , y ) X_transformed . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 0 1 9 9 1 1 1 3 7 2 0 1 9 9 3 0 0 5 0 X_transformed [ 'BILL_AMT1' ] . value_counts () . sort_index () 0 1343 1 404 2 574 3 462 4 400 5 359 6 857 7 789 8 500 9 312 Name: BILL_AMT1, dtype: int64","title":"A basic bucketer"},{"location":"tutorials/the_basics/#bucketing-specific-variables","text":"Instead of applying a bucketer on all features, you'll likely want to apply it only to specific features. You can use the variables parameter for that: bucketer = DecisionTreeBucketer ( max_n_bins = 10 , variables = [ \"BILL_AMT1\" ]) bucketer . fit_transform ( X , y ) . head ( 4 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 1 2 400000.0 9 1 2 2 80000.0 7 2 1 2 500000.0 9 3 1 1 140000.0 0","title":"Bucketing specific variables"},{"location":"tutorials/the_basics/#inspecting-bucketing-results","text":"skorecard bucketers have some methods to help you inspect the result of the bucketing process: from skorecard.bucketers import EqualWidthBucketer bucketer = EqualWidthBucketer ( n_bins = 5 , variables = [ \"BILL_AMT1\" ]) bucketer . fit ( X , y ) bucketer . bucket_table ( 'BILL_AMT1' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 0 (-inf, -10319.399999999994] 3.0 0.05 3.0 0.0 0.000000 4.181 -0.003 2 1 (-10319.399999999994, 144941.2] 5408.0 90.13 4188.0 1220.0 0.225592 -0.008 -0.000 3 2 (144941.2, 300201.80000000005] 490.0 8.17 395.0 95.0 0.193878 0.183 -0.003 4 3 (300201.80000000005, 455462.4] 75.0 1.25 55.0 20.0 0.266667 -0.230 -0.001 5 4 (455462.4, inf] 24.0 0.40 14.0 10.0 0.416667 -0.903 -0.004 bucketer . plot_bucket ( 'BILL_AMT1' , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) # remove format argument for an interactive plotly plot.","title":"Inspecting bucketing results"},{"location":"tutorials/using-bucketing-process/","text":"(function() { function addWidgetsRenderer() { var requireJsScript = document.createElement('script'); requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js'; var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var jupyterWidgetsScript = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} jupyterWidgetsScript.src = widgetRendererSrc; document.body.appendChild(requireJsScript); document.body.appendChild(jupyterWidgetsScript); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Using the BucketingProcess \u00b6 The BucketingProcess enables a two-step bucketing approach, where a feature is first pre-bucketed to e.g. 100 pre-buckets, and then bucketed. This is a common practice - it reduces the complexity of finding exact boundaries to the problem of finding which of 100 buckets to merge together. Define the BucketingProcess \u00b6 The bucketing process incorporates a pre-bucketing pipeline and a bucketing pipeline. You can also pass specials or variables and BucketingProcess will pass those settings on to the bucketers in the pipelines. In the example below, we prebucket numerical features to max 100 bins, and prebucket categorical columns as-is (each unique value is a category and new categories end up in the other bucket). from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer , AsIsCategoricalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline df = datasets . load_uci_credit_card ( as_frame = True ) y = df [ \"default\" ] X = df . drop ( columns = [ \"default\" ]) num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] specials = { \"EDUCATION\" : { \"Is 1\" : [ 1 ] } } bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ), specials = specials ) bucketing_process . fit_transform ( X , y ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 -3 0 8 5 1 1 0 3 4 2 -3 0 8 5 3 -3 1 4 0 4 1 1 8 3 Methods and Attributes \u00b6 A BucketingProcess instance has all the similar methods & attributes of a bucketer: .summary() .bucket_table(column) .plot_bucket(column) .features_bucket_mapping .save_to_yaml() .fit_interactive() but also adds a few unique ones: .prebucket_table(column) .plot_prebucket(column) bucketing_process . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 EDUCATION 9 5 0.036308 int64 1 MARRIAGE 6 4 0.013054 int64 2 LIMIT_BAL 14 10 0.168862 float64 3 BILL_AMT1 15 7 0.005823 float64 bucketing_process . prebucket_table ( 'MARRIAGE' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -2 Other 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -2 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -1 2 0 2 3138.0 52.30 2493.0 645.0 0.205545 0.110 0.006 0 3 1 1 2784.0 46.40 2108.0 676.0 0.242816 -0.104 0.005 1 4 2 3 64.0 1.07 42.0 22.0 0.343750 -0.594 0.004 1 5 3 0 14.0 0.23 12.0 2.0 0.142857 0.547 0.001 0 bucketing_process . bucket_table ( 'MARRIAGE' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -2 Other 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 0, 3 3152.0 52.53 2505.0 647.0 0.205266 0.112 0.006 3 1 1, 2 2848.0 47.47 2150.0 698.0 0.245084 -0.117 0.007 bucketing_process . plot_prebucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 ) The .features_bucket_mapping attribute \u00b6 All skorecard bucketing classes have a .features_bucket_mapping attribute to access the stored bucketing information to go from an input feature to a bucketed feature. In the case of BucketingProcess , because there is a prebucketing and bucketing step, this means the bucket mapping reflects the net effect of merging both steps into one. This is demonstrated below: bucketing_process . pre_pipeline_ . features_bucket_mapping_ . get ( 'MARRIAGE' ) . labels {3: '0', 1: '1', 0: '2', 2: '3', -1: 'Missing', -2: 'Other'} bucketing_process . pipeline_ . features_bucket_mapping_ . get ( 'EDUCATION' ) BucketMapping(feature_name='EDUCATION', type='categorical', missing_bucket=None, other_bucket=None, map={1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 0: 1}, right=False, specials={'Is 1': [-3]}) bucketing_process . features_bucket_mapping_ . get ( 'EDUCATION' ) BucketMapping(feature_name='EDUCATION', type='categorical', missing_bucket=None, other_bucket=None, map={0: 0, 3: 0, 4: 0, 5: 0, 6: 0, 2: 1}, right=True, specials={'Is 1': [1]}) The .fit_interactive() method \u00b6 All skorecard bucketing classes have a .fit_interactive() method. In the case of BucketingProcess this will launch a slightly different app that shows the pre-buckets and the buckets, and allows you to edit the prebucketing as well. # bucketing_process.fit_interactive(X, y) # not run","title":"BucketingProcess"},{"location":"tutorials/using-bucketing-process/#using-the-bucketingprocess","text":"The BucketingProcess enables a two-step bucketing approach, where a feature is first pre-bucketed to e.g. 100 pre-buckets, and then bucketed. This is a common practice - it reduces the complexity of finding exact boundaries to the problem of finding which of 100 buckets to merge together.","title":"Using the BucketingProcess"},{"location":"tutorials/using-bucketing-process/#define-the-bucketingprocess","text":"The bucketing process incorporates a pre-bucketing pipeline and a bucketing pipeline. You can also pass specials or variables and BucketingProcess will pass those settings on to the bucketers in the pipelines. In the example below, we prebucket numerical features to max 100 bins, and prebucket categorical columns as-is (each unique value is a category and new categories end up in the other bucket). from skorecard import datasets from skorecard.bucketers import DecisionTreeBucketer , OptimalBucketer , AsIsCategoricalBucketer from skorecard.pipeline import BucketingProcess from sklearn.pipeline import make_pipeline df = datasets . load_uci_credit_card ( as_frame = True ) y = df [ \"default\" ] X = df . drop ( columns = [ \"default\" ]) num_cols = [ \"LIMIT_BAL\" , \"BILL_AMT1\" ] cat_cols = [ \"EDUCATION\" , \"MARRIAGE\" ] specials = { \"EDUCATION\" : { \"Is 1\" : [ 1 ] } } bucketing_process = BucketingProcess ( prebucketing_pipeline = make_pipeline ( DecisionTreeBucketer ( variables = num_cols , max_n_bins = 100 , min_bin_size = 0.05 ), AsIsCategoricalBucketer ( variables = cat_cols ) ), bucketing_pipeline = make_pipeline ( OptimalBucketer ( variables = num_cols , max_n_bins = 10 , min_bin_size = 0.05 ), OptimalBucketer ( variables = cat_cols , variables_type = 'categorical' , max_n_bins = 10 , min_bin_size = 0.05 ), ), specials = specials ) bucketing_process . fit_transform ( X , y ) . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } EDUCATION MARRIAGE LIMIT_BAL BILL_AMT1 0 -3 0 8 5 1 1 0 3 4 2 -3 0 8 5 3 -3 1 4 0 4 1 1 8 3","title":"Define the BucketingProcess"},{"location":"tutorials/using-bucketing-process/#methods-and-attributes","text":"A BucketingProcess instance has all the similar methods & attributes of a bucketer: .summary() .bucket_table(column) .plot_bucket(column) .features_bucket_mapping .save_to_yaml() .fit_interactive() but also adds a few unique ones: .prebucket_table(column) .plot_prebucket(column) bucketing_process . summary () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } column num_prebuckets num_buckets IV_score dtype 0 EDUCATION 9 5 0.036308 int64 1 MARRIAGE 6 4 0.013054 int64 2 LIMIT_BAL 14 10 0.168862 float64 3 BILL_AMT1 15 7 0.005823 float64 bucketing_process . prebucket_table ( 'MARRIAGE' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } pre-bucket label Count Count (%) Non-event Event Event Rate WoE IV bucket 0 -2 Other 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -2 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 -1 2 0 2 3138.0 52.30 2493.0 645.0 0.205545 0.110 0.006 0 3 1 1 2784.0 46.40 2108.0 676.0 0.242816 -0.104 0.005 1 4 2 3 64.0 1.07 42.0 22.0 0.343750 -0.594 0.004 1 5 3 0 14.0 0.23 12.0 2.0 0.142857 0.547 0.001 0 bucketing_process . bucket_table ( 'MARRIAGE' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bucket label Count Count (%) Non-event Event Event Rate WoE IV 0 -2 Other 0.0 0.00 0.0 0.0 NaN 0.000 0.000 1 -1 Missing 0.0 0.00 0.0 0.0 NaN 0.000 0.000 2 0 0, 3 3152.0 52.53 2505.0 647.0 0.205266 0.112 0.006 3 1 1, 2 2848.0 47.47 2150.0 698.0 0.245084 -0.117 0.007 bucketing_process . plot_prebucket ( \"LIMIT_BAL\" , format = \"png\" , scale = 2 , width = 1050 , height = 525 )","title":"Methods and Attributes"},{"location":"tutorials/using-bucketing-process/#the-features_bucket_mapping-attribute","text":"All skorecard bucketing classes have a .features_bucket_mapping attribute to access the stored bucketing information to go from an input feature to a bucketed feature. In the case of BucketingProcess , because there is a prebucketing and bucketing step, this means the bucket mapping reflects the net effect of merging both steps into one. This is demonstrated below: bucketing_process . pre_pipeline_ . features_bucket_mapping_ . get ( 'MARRIAGE' ) . labels {3: '0', 1: '1', 0: '2', 2: '3', -1: 'Missing', -2: 'Other'} bucketing_process . pipeline_ . features_bucket_mapping_ . get ( 'EDUCATION' ) BucketMapping(feature_name='EDUCATION', type='categorical', missing_bucket=None, other_bucket=None, map={1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 0: 1}, right=False, specials={'Is 1': [-3]}) bucketing_process . features_bucket_mapping_ . get ( 'EDUCATION' ) BucketMapping(feature_name='EDUCATION', type='categorical', missing_bucket=None, other_bucket=None, map={0: 0, 3: 0, 4: 0, 5: 0, 6: 0, 2: 1}, right=True, specials={'Is 1': [1]})","title":"The .features_bucket_mapping attribute"},{"location":"tutorials/using-bucketing-process/#the-fit_interactive-method","text":"All skorecard bucketing classes have a .fit_interactive() method. In the case of BucketingProcess this will launch a slightly different app that shows the pre-buckets and the buckets, and allows you to edit the prebucketing as well. # bucketing_process.fit_interactive(X, y) # not run","title":"The .fit_interactive() method"}]}